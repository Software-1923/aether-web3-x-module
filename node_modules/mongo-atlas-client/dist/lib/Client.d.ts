import { Document, Filter, UpdateFilter } from "mongodb";
import { ConnectionData } from "./ConnectionData.js";
import { Request } from "./Request.js";
import { IMongoFindOneResponse, IMongoFindResponse, IMongoInsertOneResponse, IMongoInsertManyResponse, IMongoDeleteResponse, IMongoUpdateResponse, IMongoReplaceResponse, IMongoAggregateResponse } from "./Responses.js";
import { IQueryOptions } from "./IQueryOptions.js";
export declare class Client {
    private _atlasEndpoint;
    private _apiKey;
    private _database;
    private _dataSource;
    private _request;
    private _log?;
    private getHeaders;
    private getActionUrl;
    /**
     * Excecute an aggregate operation
     * @param collection collection name
     * @param pipeline pipeline
     * @returns
     */
    aggregate<T>(collection: string, pipeline: Document[]): Promise<IMongoAggregateResponse<T> | null>;
    /**
     * find a single document
     * @param collection collection name
     * @param filter filter
     * @param options options
     * @returns
     */
    findOne<T>(collection: string, filter: Filter<T>, options?: IQueryOptions): Promise<IMongoFindOneResponse<T> | null>;
    /**
     * find multiple documents
     * @param collection collection name
     * @param filter filter
     * @param options options
     * @returns
     */
    find<T>(collection: string, filter: Filter<T>, options?: IQueryOptions): Promise<IMongoFindResponse<T> | null>;
    /**
     * insert a single document
     * @param collection collection name
     * @param document document
     * @returns
     */
    insertOne<T>(collection: string, document: T): Promise<IMongoInsertOneResponse | null>;
    /**
     * insert multiple documents
     * @param collection collection name
     * @param documents documents
     * @returns
     */
    insertMany<T>(collection: string, documents: T[]): Promise<IMongoInsertManyResponse | null>;
    /**
     * delete single document
     * @param collection collection name
     * @param filter filter
     * @returns
     */
    deleteOne<T>(collection: string, filter: Filter<T>): Promise<IMongoDeleteResponse | null>;
    /**
     * delete multiple documents
     * @param collection collection name
     * @param filter filter
     * @returns
     */
    deleteMany<T>(collection: string, filter: Filter<T>): Promise<IMongoDeleteResponse | null>;
    /**
     * update a single document
     * @param collection collection name
     * @param filter filter
     * @param update update filter
     * @param upsert upsert
     * @returns
     */
    updateOne<T>(collection: string, filter: Filter<T>, update: UpdateFilter<T>, upsert?: boolean): Promise<IMongoUpdateResponse | null>;
    /**
     * update multiple documents
     * @param collection collection name
     * @param filter filter
     * @param update update filter
     * @param upsert upsert
     * @returns
     */
    updateMany<T>(collection: string, filter: Filter<T>, update: UpdateFilter<T>, upsert?: boolean): Promise<IMongoUpdateResponse | null>;
    /**
     * replace a document
     * @param collection collection name
     * @param filter filter
     * @param data replacement data
     * @param upsert upsert
     * @returns
     */
    replaceOne<T>(collection: string, filter: Filter<T>, data: T, upsert?: boolean): Promise<IMongoReplaceResponse | null>;
    /**
     * Constructor of the Client
     * @param cData the connection data with the api key, database/datasource and atlas endpoint
     * @param request the request handler
     * @param log optional log function, if not passed console.log will be used
     */
    constructor(cData: ConnectionData, request: Request, log?: (message: string) => void);
}
