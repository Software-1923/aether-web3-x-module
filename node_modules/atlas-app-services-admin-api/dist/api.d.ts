/**
 * MongoDB Atlas App Services Admin API
 * The App Services Admin API lets you programmatically perform administrative tasks over HTTPS. This includes defining & configuring things like:  - App Deployment & Security - APIs & Endpoints - Authentication & User Management - Data Sources - Device Sync - Environments - Functions - Logs - Rules - Schemas - Static Hosting - Triggers - Usage & Billing Metrics - Values & Secrets  The Admin API is for application development, configuration, and deployment. To actually use the features you configure with the Admin API, client applications connect with a [Realm SDK](https://mongodb.com/docs/realm/) or over an HTTPS API specific to your App.  ## Project & Application IDs  **Note**: The terms _Project ID_ and _Group ID_ are interchangeable.  Atlas App Services Admin API endpoints frequently require you to include two parameters in the URL:  - Your Atlas _Project ID_ (also sometimes called a _Group ID_) - Your App Services _Application ID_  ### Project ID  You can find your Project ID from the MongoDB Atlas dashboard or with the MongoDB Atlas CLI.  ### Application ID  To find an Application ID, make a request to the [List Apps](#operation/adminListApplications) endpoint for your project. You\'ll need an `access_token` to make this request. To learn how to get one, see [Get an Admin API Session Access Token](#get-an-admin-api-session-access-token).  ```sh curl --request GET \\   --header \'Authorization: Bearer <access_token>\' \\   https://realm.mongodb.com/api/admin/v3.0/groups/{groupId}/apps ```  This will return a list of objects describing each App Services App in the provided project/group. For Admin API requests, your Application ID is the ObjectId value in the `_id` field, _not_ the `client_app_id`.  ```json [   {     \"_id\": \"5997529e46224c6e42gb6dd9\",     \"group_id\": \"57879f6cc4b32dbe440bb8c5\",     \"domain_id\": \"5886619e46124e4c42fb5dd8\",     \"client_app_id\": \"myapp-abcde\",     \"name\": \"myapp\",     \"location\": \"US-VA\",     \"deployment_model\": \"GLOBAL\",     \"last_used\": 1615153544,     \"last_modified\": 0,     \"product\": \"standard\",     \"environment\": \"\"   } ] ```  ## Get an Admin API Session Access Token  Every request to the App Services Admin API must include a valid, unexpired access token issued by the MongoDB Cloud API. You include this token in the `Authorization` header of each request using the bearer auth scheme.  You need a valid [MongoDB Atlas programmatic API key](https://docs.atlas.mongodb.com/configure-api-access) for MongoDB Atlas to get a token.  Once you have an API key pair, call the authentication endpoint:  ```shell curl --request POST \\   --header \'Content-Type: application/json\' \\   --header \'Accept: application/json\' \\   --data \'{\"username\": \"<Public API Key>\", \"apiKey\": \"<Private API Key>\"}\' \\   https://realm.mongodb.com/api/admin/v3.0/auth/providers/mongodb-cloud/login ```  If authentication succeeds, App Services returns an access token as part of the JSON response document:  ```json {   \"access_token\": \"<access_token>\",   \"refresh_token\": \"<refresh_token>\",   \"user_id\": \"<user_id>\",   \"device_id\": \"<device_id>\" } ```  The `access_token` represents a limited-time authorization to interact with the Admin API. To authenticate a request, include the token in a [Bearer token](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication) `Authorization` header.  ```http Authorization: Bearer <access_token> ```  ## Refresh an Admin API Session Access Token  Session access tokens expire 30 minutes after they are issued. When you login, the response also includes a `refresh_token` that you can use to get a new access token. This is useful because you only need to log in with credentials one time. After that you can use the refresh token to re-authenticate for as long as its valid.  Refresh tokens expire 60 days after being issued.  To refresh your authentication and get a new `access_token`, call the auth session endpoint with your `refresh_token` in the `Authorization` header:  ```shell curl --request POST \\   --header \'Authorization: Bearer <refresh_token>\' \\   https://realm.mongodb.com/api/admin/v3.0/auth/session ```  If the refresh token is valid, the response body includes a new `access_token` that\'s valid for the next 30 minutes:  ```json {   \"access_token\": \"<access_token>\" } ```
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface AdminAppMeasurements200Response
 */
export interface AdminAppMeasurements200Response {
    /**
     * The RFC 3339 date and time of the start of the query period, which can be specified with the `start` query parameter.
     * @type {any}
     * @memberof AdminAppMeasurements200Response
     */
    'start'?: any;
    /**
     * The RFC 3339 date and time of the end of the query period, which can be specified with the `end` query parameter.
     * @type {any}
     * @memberof AdminAppMeasurements200Response
     */
    'end'?: any;
    /**
     * The granularity, which can be specified with the `granularity` query parameter.
     * @type {any}
     * @memberof AdminAppMeasurements200Response
     */
    'granularity'?: any;
    /**
     * The Atlas [Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @type {any}
     * @memberof AdminAppMeasurements200Response
     */
    'group_id'?: any;
    /**
     * The Atlas App Services App ID specified by the `appId` path parameter.
     * @type {any}
     * @memberof AdminAppMeasurements200Response
     */
    'appId'?: any;
    /**
     * The name of the Atlas App Services App specified by the `appId` path parameter.
     * @type {any}
     * @memberof AdminAppMeasurements200Response
     */
    'appName'?: any;
    /**
     * The array of measurements.
     * @type {any}
     * @memberof AdminAppMeasurements200Response
     */
    'measurements'?: any;
}
/**
 *
 * @export
 * @interface AdminCreateASecretRequest
 */
export interface AdminCreateASecretRequest {
    /**
     *
     * @type {any}
     * @memberof AdminCreateASecretRequest
     */
    'name': any;
    /**
     *
     * @type {any}
     * @memberof AdminCreateASecretRequest
     */
    'value': any;
}
/**
 *
 * @export
 * @interface AdminCreateApiKeyRequest
 */
export interface AdminCreateApiKeyRequest {
    /**
     *
     * @type {any}
     * @memberof AdminCreateApiKeyRequest
     */
    'name': any;
}
/**
 *
 * @export
 * @interface AdminCreateFunction201Response
 */
export interface AdminCreateFunction201Response {
    /**
     * Unique identifier for the function.
     * @type {any}
     * @memberof AdminCreateFunction201Response
     */
    '_id'?: any;
    /**
     * Name for the function specified in the `name` field of the request.
     * @type {any}
     * @memberof AdminCreateFunction201Response
     */
    'name'?: any;
}
/**
 *
 * @export
 * @interface AdminCreateRule201Response
 */
export interface AdminCreateRule201Response {
    /**
     *
     * @type {any}
     * @memberof AdminCreateRule201Response
     */
    '_id'?: any;
    /**
     *
     * @type {any}
     * @memberof AdminCreateRule201Response
     */
    'name'?: any;
}
/**
 *
 * @export
 * @interface AdminCreateSchema200Response
 */
export interface AdminCreateSchema200Response {
    /**
     *
     * @type {any}
     * @memberof AdminCreateSchema200Response
     */
    '_id'?: any;
    /**
     *
     * @type {SchemaMetadata}
     * @memberof AdminCreateSchema200Response
     */
    'metadata'?: SchemaMetadata;
}
/**
 *
 * @export
 * @interface AdminCreateSchemaRequest
 */
export interface AdminCreateSchemaRequest {
    /**
     *
     * @type {any}
     * @memberof AdminCreateSchemaRequest
     */
    '_id'?: any;
    /**
     * A valid [schema](https://www.mongodb.com/docs/realm/schemas) for the collection.
     * @type {any}
     * @memberof AdminCreateSchemaRequest
     */
    'schema': any;
    /**
     *
     * @type {SchemaMetadata}
     * @memberof AdminCreateSchemaRequest
     */
    'metadata': SchemaMetadata;
}
/**
 *
 * @export
 * @interface AdminCreateSession201Response
 */
export interface AdminCreateSession201Response {
    /**
     *
     * @type {any}
     * @memberof AdminCreateSession201Response
     */
    'access_token'?: any;
}
/**
 *
 * @export
 * @interface AdminCreateUserRequest
 */
export interface AdminCreateUserRequest {
    /**
     *
     * @type {any}
     * @memberof AdminCreateUserRequest
     */
    'email': any;
    /**
     *
     * @type {any}
     * @memberof AdminCreateUserRequest
     */
    'password': any;
}
/**
 *
 * @export
 * @interface AdminDeployDraftRequest
 */
export interface AdminDeployDraftRequest {
    /**
     * The name of the deployment. To deploy a draft without a name, use an empty string.
     * @type {any}
     * @memberof AdminDeployDraftRequest
     */
    'name': any;
}
/**
 *
 * @export
 * @interface AdminEnableDisableHostingRequest
 */
export interface AdminEnableDisableHostingRequest {
    /**
     * Set to `true` to enable App Services Hosting. Set to `false` to disable App Services Hosting.
     * @type {any}
     * @memberof AdminEnableDisableHostingRequest
     */
    'enabled'?: any;
}
/**
 *
 * @export
 * @interface AdminExecuteFunction200Response
 */
export interface AdminExecuteFunction200Response {
    /**
     *
     * @type {any}
     * @memberof AdminExecuteFunction200Response
     */
    'error'?: any;
    /**
     *
     * @type {any}
     * @memberof AdminExecuteFunction200Response
     */
    'logs'?: any;
    /**
     *
     * @type {any}
     * @memberof AdminExecuteFunction200Response
     */
    'result'?: any;
    /**
     *
     * @type {AdminExecuteFunction200ResponseStats}
     * @memberof AdminExecuteFunction200Response
     */
    'stats'?: AdminExecuteFunction200ResponseStats;
}
/**
 *
 * @export
 * @interface AdminExecuteFunction200ResponseStats
 */
export interface AdminExecuteFunction200ResponseStats {
    /**
     *
     * @type {any}
     * @memberof AdminExecuteFunction200ResponseStats
     */
    'execution_time'?: any;
}
/**
 *
 * @export
 * @interface AdminExecuteFunctionRequest
 */
export interface AdminExecuteFunctionRequest {
    /**
     * The service to use when calling this function.
     * @type {any}
     * @memberof AdminExecuteFunctionRequest
     */
    'service'?: any;
    /**
     * The name of the function you want to run.
     * @type {any}
     * @memberof AdminExecuteFunctionRequest
     */
    'name': any;
    /**
     * Any arguments that your function needs.
     * @type {any}
     * @memberof AdminExecuteFunctionRequest
     */
    'arguments'?: any;
}
/**
 *
 * @export
 * @interface AdminExecuteFunctionSourceRequest
 */
export interface AdminExecuteFunctionSourceRequest {
    /**
     * This JSON expression must evaluate to `true` before the function may run. If this field is blank, it will evaluate to `true`.
     * @type {any}
     * @memberof AdminExecuteFunctionSourceRequest
     */
    'eval_source'?: any;
    /**
     *
     * @type {any}
     * @memberof AdminExecuteFunctionSourceRequest
     */
    'source': any;
}
/**
 *
 * @export
 * @interface AdminGenerateSchema200Response
 */
export interface AdminGenerateSchema200Response {
    /**
     * The generated JSON schema
     * @type {any}
     * @memberof AdminGenerateSchema200Response
     */
    'schema'?: any;
}
/**
 *
 * @export
 * @interface AdminGenerateSchemaRequest
 */
export interface AdminGenerateSchemaRequest {
    /**
     * The name of the database that contains the collection.
     * @type {any}
     * @memberof AdminGenerateSchemaRequest
     */
    'database_name': any;
    /**
     * The name of the collection to sample and generate a schema for.
     * @type {any}
     * @memberof AdminGenerateSchemaRequest
     */
    'collection_name': any;
    /**
     * The maximum number of documents to include in the sample.
     * @type {any}
     * @memberof AdminGenerateSchemaRequest
     */
    'limit': any;
}
/**
 *
 * @export
 * @interface AdminGetHostedAsset404Response
 */
export interface AdminGetHostedAsset404Response {
    /**
     *
     * @type {any}
     * @memberof AdminGetHostedAsset404Response
     */
    'error'?: any;
}
/**
 *
 * @export
 * @interface AdminGetLatestEventSubscriptionExecution200Response
 */
export interface AdminGetLatestEventSubscriptionExecution200Response {
    /**
     *
     * @type {any}
     * @memberof AdminGetLatestEventSubscriptionExecution200Response
     */
    'data'?: any;
    /**
     *
     * @type {any}
     * @memberof AdminGetLatestEventSubscriptionExecution200Response
     */
    'resource_id'?: any;
    /**
     * The last time a batch was processed from the event stream.  The value of `completed_at` should be relatively close to the current time. If `completed_at` is not updating over time, it might mean that the event processor (e.g. Device Sync) is down or stuck.
     * @type {any}
     * @memberof AdminGetLatestEventSubscriptionExecution200Response
     */
    'completed_at'?: any;
    /**
     * The time of the latest event in the most recently processed batch.  If the value of `cluster_time` is significantly earlier than the `completed_at` time, the event processor (e.g. Device Sync) is lagging behind the event .
     * @type {any}
     * @memberof AdminGetLatestEventSubscriptionExecution200Response
     */
    'cluster_time'?: any;
}
/**
 *
 * @export
 * @interface AdminGetLogs200Response
 */
export interface AdminGetLogs200Response {
    /**
     * At most 100 results per request.
     * @type {any}
     * @memberof AdminGetLogs200Response
     */
    'logs'?: any;
    /**
     * The end date and time of the next page of log entries in ISO 8601 format. App Services paginates the result sets of queries that match more than 100 log entries and includes this field in paginated responses. To get the next page of up to 100 entries, pass this value as the `end_date` parameter in a subsequent request.
     * @type {any}
     * @memberof AdminGetLogs200Response
     */
    'nextEndDate': any;
    /**
     * The offset into the next page of log entries in ISO 8601 format. MongoDB App Services paginates the result sets of queries that match more than 100 log entries and includes this field in paginated responses where the first entry on the next page has the same timestamp as the last entry on this page. To get the next page of up to 100 entries, pass this value, if it is present, as the `skip` parameter in a subsequent request.
     * @type {any}
     * @memberof AdminGetLogs200Response
     */
    'nextSkip': any;
}
/**
 *
 * @export
 * @interface AdminGetMetrics200Response
 */
export interface AdminGetMetrics200Response {
    /**
     * The list of metrics.
     * @type {any}
     * @memberof AdminGetMetrics200Response
     */
    'measurements': any;
    /**
     * The app ID sent in the request.
     * @type {any}
     * @memberof AdminGetMetrics200Response
     */
    'app_id': any;
    /**
     * The app\'s human-readable name.
     * @type {any}
     * @memberof AdminGetMetrics200Response
     */
    'app_name': any;
    /**
     * The group ID sent in the request.
     * @type {any}
     * @memberof AdminGetMetrics200Response
     */
    'group_id': any;
    /**
     * The date and time (ISO-8601 format) of the earliest requested measurement.
     * @type {any}
     * @memberof AdminGetMetrics200Response
     */
    'start': any;
    /**
     * The date and time (ISO-8601 format) of the latest requested measurement.
     * @type {any}
     * @memberof AdminGetMetrics200Response
     */
    'end': any;
    /**
     * The requested granularity of the metrics in [ISO-8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations).
     * @type {any}
     * @memberof AdminGetMetrics200Response
     */
    'granularity': any;
}
/**
 *
 * @export
 * @interface AdminGetSchema200Response
 */
export interface AdminGetSchema200Response {
    /**
     *
     * @type {any}
     * @memberof AdminGetSchema200Response
     */
    '_id'?: any;
    /**
     *
     * @type {any}
     * @memberof AdminGetSchema200Response
     */
    'schema'?: any;
}
/**
 *
 * @export
 * @interface AdminLogin200Response
 */
export interface AdminLogin200Response {
    /**
     * An access token you may provide in the `Authorization` header of API requests. [The App Services API Authentication section](#section/Get-Authentication-Tokens) demonstrates how to use this token.
     * @type {any}
     * @memberof AdminLogin200Response
     */
    'access_token'?: any;
    /**
     * A refresh token you may provide in the `Authorization` header of [POST auth/session](#section/adminCreateSession) to obtain a new `access_token` for the current user session.
     * @type {any}
     * @memberof AdminLogin200Response
     */
    'refresh_token'?: any;
    /**
     * The unique `_id` value of the MongoDB Cloud user.
     * @type {any}
     * @memberof AdminLogin200Response
     */
    'user_id'?: any;
    /**
     *
     * @type {any}
     * @memberof AdminLogin200Response
     */
    'device_id'?: any;
}
/**
 *
 * @export
 * @interface AdminLoginRequest
 */
export interface AdminLoginRequest {
    /**
     *
     * @type {any}
     * @memberof AdminLoginRequest
     */
    'username': any;
    /**
     *
     * @type {any}
     * @memberof AdminLoginRequest
     */
    'apiKey': any;
}
/**
 *
 * @export
 * @interface AdminMeasurements200Response
 */
export interface AdminMeasurements200Response {
    /**
     * The [RFC 3339](https://tools.ietf.org/html/3339) date and time of the start of the query period, which can be specified with the `start` query parameter.
     * @type {any}
     * @memberof AdminMeasurements200Response
     */
    'start'?: any;
    /**
     * The [RFC 3339](https://tools.ietf.org/html/3339) date and time of the end of the query period, which can be specified with the `end` query parameter.
     * @type {any}
     * @memberof AdminMeasurements200Response
     */
    'end'?: any;
    /**
     * The granularity, which can be specified with the `granularity` query parameter.
     * @type {any}
     * @memberof AdminMeasurements200Response
     */
    'granularity'?: any;
    /**
     * The Atlas [Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @type {any}
     * @memberof AdminMeasurements200Response
     */
    'group_id'?: any;
    /**
     * The array of measurements.
     * @type {any}
     * @memberof AdminMeasurements200Response
     */
    'measurements'?: any;
}
/**
 *
 * @export
 * @interface AdminModifyASecretRequest
 */
export interface AdminModifyASecretRequest {
    /**
     *
     * @type {any}
     * @memberof AdminModifyASecretRequest
     */
    '_id'?: any;
    /**
     *
     * @type {any}
     * @memberof AdminModifyASecretRequest
     */
    'name': any;
    /**
     *
     * @type {any}
     * @memberof AdminModifyASecretRequest
     */
    'value': any;
}
/**
 *
 * @export
 * @interface AdminMoveCopyHostedAssetRequest
 */
export interface AdminMoveCopyHostedAssetRequest {
    /**
     * The current resource path of the asset to move. Must be used with `move_to`.
     * @type {any}
     * @memberof AdminMoveCopyHostedAssetRequest
     */
    'move_from'?: any;
    /**
     * The resource path to which the asset will move. Must be used with `move_from`.
     * @type {any}
     * @memberof AdminMoveCopyHostedAssetRequest
     */
    'move_to'?: any;
    /**
     * The current resource path of the asset to copy. Must be used with `copy_to`.
     * @type {any}
     * @memberof AdminMoveCopyHostedAssetRequest
     */
    'copy_from'?: any;
    /**
     * The resource path to which the asset will be copied. Must be used with `copy_from`.
     * @type {any}
     * @memberof AdminMoveCopyHostedAssetRequest
     */
    'copy_to'?: any;
}
/**
 *
 * @export
 * @interface AdminResetUserEmailRequest
 */
export interface AdminResetUserEmailRequest {
    /**
     * The new email for the user.
     * @type {any}
     * @memberof AdminResetUserEmailRequest
     */
    'email': any;
}
/**
 *
 * @export
 * @interface AdminResumeTrigger404Response
 */
export interface AdminResumeTrigger404Response {
    /**
     * A description of the error that App Services encountered.
     * @type {any}
     * @memberof AdminResumeTrigger404Response
     */
    'error'?: any;
}
/**
 *
 * @export
 * @interface AdminResumeTriggerRequest
 */
export interface AdminResumeTriggerRequest {
    /**
     * If `true`, resumes the trigger without processing missed events. Otherwise, attempts to resume the  trigger from the first change event after it failed by using  a resume token.
     * @type {any}
     * @memberof AdminResumeTriggerRequest
     */
    'disable_token'?: any;
}
/**
 * The result of the specified operation.
 * @export
 * @interface AdminRunGraphQLOperation200Response
 */
export interface AdminRunGraphQLOperation200Response {
    /**
     * The result of a successful operation. If `null`, the operation had errors.
     * @type {any}
     * @memberof AdminRunGraphQLOperation200Response
     */
    'data': any;
    /**
     * A list of errors encountered while running an operation.
     * @type {any}
     * @memberof AdminRunGraphQLOperation200Response
     */
    'errors'?: any;
}
/**
 *
 * @export
 * @interface AdminRunGraphQLOperationRequest
 */
export interface AdminRunGraphQLOperationRequest {
    /**
     * A stringified `.graphql` file that contains one or more valid GraphQL operations for your API. If more than one operation is defined, you must specify which operation to run in `operationName`.
     * @type {any}
     * @memberof AdminRunGraphQLOperationRequest
     */
    'query': any;
    /**
     * A stringified JSON object where each field name maps a value to a variable in the specified operation.
     * @type {any}
     * @memberof AdminRunGraphQLOperationRequest
     */
    'variables'?: any;
    /**
     * The name of the GraphQL operation specified in `query` to run.
     * @type {any}
     * @memberof AdminRunGraphQLOperationRequest
     */
    'operationName'?: any;
}
/**
 *
 * @export
 * @interface AdminSetEnvironmentRequest
 */
export interface AdminSetEnvironmentRequest {
    /**
     *
     * @type {AppEnvironment}
     * @memberof AdminSetEnvironmentRequest
     */
    'environment'?: AppEnvironment;
}
/**
 *
 * @export
 * @interface AdminUpdateHostedAssetRequest
 */
export interface AdminUpdateHostedAssetRequest {
    /**
     *
     * @type {any}
     * @memberof AdminUpdateHostedAssetRequest
     */
    'attributes'?: any;
}
/**
 *
 * @export
 * @interface AdminUpdateSchemaRequest
 */
export interface AdminUpdateSchemaRequest {
    /**
     *
     * @type {any}
     * @memberof AdminUpdateSchemaRequest
     */
    '_id'?: any;
    /**
     * A valid [schema](https://www.mongodb.com/docs/realm/schemas) for the collection.
     * @type {any}
     * @memberof AdminUpdateSchemaRequest
     */
    'schema': any;
    /**
     * Relationships to foreign collections. Each field name is a property in the schema. The corresponding value is a [relationship](https://www.mongodb.com/docs/realm/schemas/relationships/) definition for that field.
     * @type {{ [key: string]: Relationship; }}
     * @memberof AdminUpdateSchemaRequest
     */
    'relationships'?: {
        [key: string]: Relationship;
    };
    /**
     *
     * @type {SchemaMetadata}
     * @memberof AdminUpdateSchemaRequest
     */
    'metadata'?: SchemaMetadata;
}
/**
 *
 * @export
 * @interface AdminUploadHostedAssetRequest
 */
export interface AdminUploadHostedAssetRequest {
    /**
     * An [asset metadata document](https://www.mongodb.com/docs/realm/admin/api/v3#std-label-asset-metadata-document) (encoded as JSON).
     * @type {AssetMetadata}
     * @memberof AdminUploadHostedAssetRequest
     */
    'meta'?: AssetMetadata;
    /**
     * The asset file to upload (encoded as binary).
     * @type {any}
     * @memberof AdminUploadHostedAssetRequest
     */
    'file'?: any;
}
/**
 *
 * @export
 * @interface AdminUser
 */
export interface AdminUser {
    /**
     *
     * @type {any}
     * @memberof AdminUser
     */
    'user_id'?: any;
    /**
     *
     * @type {any}
     * @memberof AdminUser
     */
    'domain_id'?: any;
    /**
     *
     * @type {any}
     * @memberof AdminUser
     */
    'identities'?: any;
    /**
     *
     * @type {AdminUserData}
     * @memberof AdminUser
     */
    'data'?: AdminUserData;
    /**
     *
     * @type {any}
     * @memberof AdminUser
     */
    'type'?: AdminUserTypeEnum;
    /**
     *
     * @type {any}
     * @memberof AdminUser
     */
    'roles'?: any;
}
export declare const AdminUserTypeEnum: {
    readonly Normal: "normal";
    readonly Server: "server";
    readonly System: "system";
    readonly Unknown: "unknown";
};
export type AdminUserTypeEnum = typeof AdminUserTypeEnum[keyof typeof AdminUserTypeEnum];
/**
 *
 * @export
 * @interface AdminUserData
 */
export interface AdminUserData {
    /**
     *
     * @type {any}
     * @memberof AdminUserData
     */
    'email'?: any;
    /**
     *
     * @type {any}
     * @memberof AdminUserData
     */
    'name'?: any;
}
/**
 *
 * @export
 * @interface AdminValidateDocuments200Response
 */
export interface AdminValidateDocuments200Response {
    /**
     *
     * @type {any}
     * @memberof AdminValidateDocuments200Response
     */
    'errors'?: any;
    /**
     * The total number of documents that were sampled.
     * @type {any}
     * @memberof AdminValidateDocuments200Response
     */
    'total_processed_count'?: any;
    /**
     * The total number of documents that failed any validation.
     * @type {any}
     * @memberof AdminValidateDocuments200Response
     */
    'total_error_count'?: any;
}
/**
 *
 * @export
 * @interface AdminValidateDocumentsRequest
 */
export interface AdminValidateDocumentsRequest {
    /**
     * The name of the database that contains the collection to validate.
     * @type {any}
     * @memberof AdminValidateDocumentsRequest
     */
    'database_name': any;
    /**
     * The name of the collection to validate.
     * @type {any}
     * @memberof AdminValidateDocumentsRequest
     */
    'collection_name': any;
    /**
     * The EJSON schema to validate sampled documents against.
     * @type {any}
     * @memberof AdminValidateDocumentsRequest
     */
    'from_schema': any;
    /**
     * A [MongoDB query](https://www.mongodb.com/docs/manual/tutorial/query-documents/) that matches documents in the collection. The result of running this query is the sample population. Use this to narrow the sample to a subset of documents in the collection.
     * @type {any}
     * @memberof AdminValidateDocumentsRequest
     */
    'query'?: any;
    /**
     * The maximum number of documents to sample.
     * @type {any}
     * @memberof AdminValidateDocumentsRequest
     */
    'limit'?: any;
    /**
     * A [MongoDB sort](https://www.mongodb.com/docs/manual/reference/method/cursor.sort/) for the collection. Use this to determine which end of a range query to start sampling from.
     * @type {any}
     * @memberof AdminValidateDocumentsRequest
     */
    'sort'?: any;
}
/**
 *
 * @export
 * @interface AdminVerifyUserAccessTokenRequest
 */
export interface AdminVerifyUserAccessTokenRequest {
    /**
     *
     * @type {any}
     * @memberof AdminVerifyUserAccessTokenRequest
     */
    'token': any;
}
/**
 *
 * @export
 * @interface AllowedIPAccessListCreate201Response
 */
export interface AllowedIPAccessListCreate201Response {
    /**
     * ObjectID
     * @type {any}
     * @memberof AllowedIPAccessListCreate201Response
     */
    '_id'?: any;
    /**
     *
     * @type {any}
     * @memberof AllowedIPAccessListCreate201Response
     */
    'address'?: any;
    /**
     * net.IP
     * @type {any}
     * @memberof AllowedIPAccessListCreate201Response
     */
    'ip'?: any;
    /**
     * net.IPNet
     * @type {any}
     * @memberof AllowedIPAccessListCreate201Response
     */
    'network'?: any;
    /**
     *
     * @type {any}
     * @memberof AllowedIPAccessListCreate201Response
     */
    'comment'?: any;
}
/**
 *
 * @export
 * @interface AllowedIPAccessListCreateRequest
 */
export interface AllowedIPAccessListCreateRequest {
    /**
     * The value of the IP address or CIDR block.
     * @type {any}
     * @memberof AllowedIPAccessListCreateRequest
     */
    'address': any;
    /**
     * An optional comment included in the Access List entry.
     * @type {any}
     * @memberof AllowedIPAccessListCreateRequest
     */
    'comment'?: any;
}
/**
 *
 * @export
 * @interface AllowedIPAccessListUpdateRequest
 */
export interface AllowedIPAccessListUpdateRequest {
    /**
     * The modified value of the IP address or CIDR block.
     * @type {any}
     * @memberof AllowedIPAccessListUpdateRequest
     */
    'address': any;
    /**
     * An optional comment included in the Access List entry.
     * @type {any}
     * @memberof AllowedIPAccessListUpdateRequest
     */
    'comment'?: any;
}
/**
 *
 * @export
 * @interface ApiKey
 */
export interface ApiKey {
    /**
     *
     * @type {any}
     * @memberof ApiKey
     */
    '_id'?: any;
    /**
     *
     * @type {any}
     * @memberof ApiKey
     */
    'key'?: any;
    /**
     *
     * @type {any}
     * @memberof ApiKey
     */
    'name'?: any;
    /**
     *
     * @type {any}
     * @memberof ApiKey
     */
    'disabled'?: any;
}
/**
 *
 * @export
 * @interface ApiKeyResponse
 */
export interface ApiKeyResponse {
    /**
     *
     * @type {any}
     * @memberof ApiKeyResponse
     */
    '_id'?: any;
    /**
     *
     * @type {any}
     * @memberof ApiKeyResponse
     */
    'name'?: any;
    /**
     *
     * @type {any}
     * @memberof ApiKeyResponse
     */
    'disabled'?: any;
}
/**
 *
 * @export
 * @interface App
 */
export interface App {
    /**
     * The name of the application. Must begin with a letter and may only contain ASCII letters, numbers, underscores, and hyphens.
     * @type {any}
     * @memberof App
     */
    'name'?: any;
    /**
     *
     * @type {any}
     * @memberof App
     */
    'provider_region'?: any;
    /**
     * The application\'s physical deployment location. This should agree with the more specific `provider_region` value. For example, an App with a `provider_region` of `aws-us-west-2` maps to a `location` of `US-OR`.
     * @type {DeploymentLocation}
     * @memberof App
     */
    'location'?: DeploymentLocation;
    /**
     *
     * @type {DeploymentModel}
     * @memberof App
     */
    'deployment_model'?: DeploymentModel;
    /**
     *
     * @type {AppEnvironment}
     * @memberof App
     */
    'environment'?: AppEnvironment;
}
/**
 *
 * @export
 * @interface AppDeploymentSettings
 */
export interface AppDeploymentSettings {
    /**
     *
     * @type {DeploymentModel}
     * @memberof AppDeploymentSettings
     */
    'deployment_model'?: DeploymentModel;
    /**
     *
     * @type {any}
     * @memberof AppDeploymentSettings
     */
    'provider_region'?: any;
}
/**
 * The application\'s environment. An empty string indicates that the app does not have a specified environment.
 * @export
 * @interface AppEnvironment
 */
export interface AppEnvironment {
}
/**
 *
 * @export
 * @interface AssetMetadata
 */
export interface AssetMetadata {
    /**
     * The resource path of the asset
     * @type {any}
     * @memberof AssetMetadata
     */
    'path'?: any;
    /**
     * The size of the asset in bytes
     * @type {any}
     * @memberof AssetMetadata
     */
    'size'?: any;
    /**
     * An array of documents that each describe a [metadata attribute](https://www.mongodb.com/docs/realm/hosting/file-metadata-attributes) that applies to the asset.
     * @type {any}
     * @memberof AssetMetadata
     */
    'attrs'?: any;
    /**
     * The MD5 checksum hash for the asset
     * @type {any}
     * @memberof AssetMetadata
     */
    'hash'?: any;
}
/**
 *
 * @export
 * @interface AtlasCluster
 */
export interface AtlasCluster {
    /**
     *
     * @type {any}
     * @memberof AtlasCluster
     */
    'name'?: AtlasClusterNameEnum;
    /**
     *
     * @type {any}
     * @memberof AtlasCluster
     */
    'type'?: AtlasClusterTypeEnum;
    /**
     *
     * @type {AtlasClusterConfig}
     * @memberof AtlasCluster
     */
    'config'?: AtlasClusterConfig;
}
export declare const AtlasClusterNameEnum: {
    readonly MongodbAtlas: "mongodb-atlas";
};
export type AtlasClusterNameEnum = typeof AtlasClusterNameEnum[keyof typeof AtlasClusterNameEnum];
export declare const AtlasClusterTypeEnum: {
    readonly MongodbAtlas: "mongodb-atlas";
};
export type AtlasClusterTypeEnum = typeof AtlasClusterTypeEnum[keyof typeof AtlasClusterTypeEnum];
/**
 *
 * @export
 * @interface AtlasClusterConfig
 */
export interface AtlasClusterConfig {
    /**
     * The service name used to refer to the data source within this Atlas app. The name may be at most 64 characters long and must only contain ASCII letters, numbers, underscores, and hyphens.
     * @type {any}
     * @memberof AtlasClusterConfig
     */
    'clusterName': any;
    /**
     * The [read preference](https://www.mongodb.com/docs/atlas/app-services/mongodb/read-preference/) mode for read requests to the data source.
     * @type {any}
     * @memberof AtlasClusterConfig
     */
    'readPreference'?: AtlasClusterConfigReadPreferenceEnum;
    /**
     * If true, clients may [connect to the app over the MongoDB Wire Protocol](https://www.mongodb.com/docs/atlas/app-services/mongodb/wire-protocol/#connect-over-the-wire-protocol).
     * @type {any}
     * @memberof AtlasClusterConfig
     */
    'wireProtocolEnabled'?: any;
}
export declare const AtlasClusterConfigReadPreferenceEnum: {
    readonly Primary: "primary";
    readonly PrimaryPreferred: "primaryPreferred";
    readonly Secondary: "secondary";
    readonly SecondaryPreferred: "secondaryPreferred";
    readonly Nearest: "nearest";
};
export type AtlasClusterConfigReadPreferenceEnum = typeof AtlasClusterConfigReadPreferenceEnum[keyof typeof AtlasClusterConfigReadPreferenceEnum];
/**
 *
 * @export
 * @interface AtlasFederatedInstance
 */
export interface AtlasFederatedInstance {
    /**
     *
     * @type {any}
     * @memberof AtlasFederatedInstance
     */
    'name'?: AtlasFederatedInstanceNameEnum;
    /**
     *
     * @type {any}
     * @memberof AtlasFederatedInstance
     */
    'type'?: AtlasFederatedInstanceTypeEnum;
    /**
     *
     * @type {AtlasFederatedInstanceConfig}
     * @memberof AtlasFederatedInstance
     */
    'config'?: AtlasFederatedInstanceConfig;
}
export declare const AtlasFederatedInstanceNameEnum: {
    readonly MongodbDatafederation: "mongodb-datafederation";
};
export type AtlasFederatedInstanceNameEnum = typeof AtlasFederatedInstanceNameEnum[keyof typeof AtlasFederatedInstanceNameEnum];
export declare const AtlasFederatedInstanceTypeEnum: {
    readonly Datalake: "datalake";
};
export type AtlasFederatedInstanceTypeEnum = typeof AtlasFederatedInstanceTypeEnum[keyof typeof AtlasFederatedInstanceTypeEnum];
/**
 *
 * @export
 * @interface AtlasFederatedInstanceConfig
 */
export interface AtlasFederatedInstanceConfig {
    /**
     * The service name used to refer to the Federated database instance within this Atlas app. The name may be at most 64 characters long and must only contain ASCII letters, numbers, underscores, and hyphens.
     * @type {any}
     * @memberof AtlasFederatedInstanceConfig
     */
    'dataLakeName': any;
}
/**
 *
 * @export
 * @interface AwsDeploymentRegion
 */
export interface AwsDeploymentRegion {
}
/**
 *
 * @export
 * @interface AzureDeploymentRegion
 */
export interface AzureDeploymentRegion {
}
/**
 *
 * @export
 * @interface BaseAuthProvider
 */
export interface BaseAuthProvider {
    /**
     * The authentication provider\'s unique ID.
     * @type {any}
     * @memberof BaseAuthProvider
     */
    '_id'?: any;
    /**
     * The name of the authentication provider. This value must be the same as the value of `type`.
     * @type {any}
     * @memberof BaseAuthProvider
     */
    'name': any;
    /**
     *
     * @type {ProviderType}
     * @memberof BaseAuthProvider
     */
    'type': ProviderType;
    /**
     * If `true`, the auth provider is disabled. Users cannot log in through the provider until it is enabled.
     * @type {any}
     * @memberof BaseAuthProvider
     */
    'disabled'?: any;
}
/**
 * Common fields shared by all log types.
 * @export
 * @interface BaseLog
 */
export interface BaseLog {
    /**
     * A unique ID for the log entry.
     * @type {any}
     * @memberof BaseLog
     */
    '_id'?: any;
    /**
     * A correlation ID for the request that issued the logged operation.
     * @type {any}
     * @memberof BaseLog
     */
    'co_id'?: any;
    /**
     * The domain ID.
     * @type {any}
     * @memberof BaseLog
     */
    'domain_id'?: any;
    /**
     * The App\'s internal client ID value.
     * @type {any}
     * @memberof BaseLog
     */
    'app_id'?: any;
    /**
     * The App\'s Atlas Project ID value.
     * @type {any}
     * @memberof BaseLog
     */
    'group_id'?: any;
    /**
     * The URL that the incoming request was sent to.
     * @type {any}
     * @memberof BaseLog
     */
    'request_url'?: any;
    /**
     * The HTTP method used by the incoming request.
     * @type {any}
     * @memberof BaseLog
     */
    'request_method'?: any;
    /**
     * An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp for the start of the logged operation.
     * @type {any}
     * @memberof BaseLog
     */
    'started'?: any;
    /**
     * An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp for the completion of the logged operation.
     * @type {any}
     * @memberof BaseLog
     */
    'completed'?: any;
}
/**
 *
 * @export
 * @interface BaseTrigger
 */
export interface BaseTrigger {
    /**
     * The trigger\'s unique ID.
     * @type {any}
     * @memberof BaseTrigger
     */
    '_id'?: any;
    /**
     * The trigger\'s name.
     * @type {any}
     * @memberof BaseTrigger
     */
    'name': any;
    /**
     *
     * @type {any}
     * @memberof BaseTrigger
     */
    'type': any;
    /**
     * If `true`, the trigger is disabled and does not listen for events or execute.
     * @type {any}
     * @memberof BaseTrigger
     */
    'disabled'?: any;
    /**
     * An object that defines configuration values for the trigger.
     * @type {any}
     * @memberof BaseTrigger
     */
    'config': any;
    /**
     * The ID of the function that the trigger calls when it fires.  This value is the same as `event_processors.FUNCTION.function_id`. You can either define the value here or in `event_processors.FUNCTION.function_id`. The App Services backend duplicates the value to the configuration location where you did not define it.  For example, if you define `function_id`, the backend duplicates it to `event_processors.FUNCTION.function_id`.
     * @type {any}
     * @memberof BaseTrigger
     */
    'function_id'?: any;
    /**
     * The name of the function that the trigger calls when it fires, i.e. the function described by `function_id`.  This value is the same as `event_processors.FUNCTION.function_name`. You can either define the value here or in `event_processors.FUNCTION.function_name`. The App Services backend duplicates the value to the configuration location where you did not define it.  For example, if you define `function_name`, the backend duplicates it to `event_processors.FUNCTION.function_name`.
     * @type {any}
     * @memberof BaseTrigger
     */
    'function_name'?: any;
    /**
     *
     * @type {BaseTriggerEventProcessors}
     * @memberof BaseTrigger
     */
    'event_processors'?: BaseTriggerEventProcessors;
}
/**
 * An object where each field name is an event processor ID and each value is an object that configures its corresponding event processor. For an example configuration object, see [Send Trigger Events to AWS EventBridge](https://www.mongodb.com/docs/realm/triggers/examples/send-events-aws-eventbridge#std-label-event_processor_example).
 * @export
 * @interface BaseTriggerEventProcessors
 */
export interface BaseTriggerEventProcessors {
    /**
     *
     * @type {BaseTriggerEventProcessorsFUNCTION}
     * @memberof BaseTriggerEventProcessors
     */
    'FUNCTION'?: BaseTriggerEventProcessorsFUNCTION;
    /**
     *
     * @type {BaseTriggerEventProcessorsAWSEVENTBRIDGE}
     * @memberof BaseTriggerEventProcessors
     */
    'AWS_EVENTBRIDGE'?: BaseTriggerEventProcessorsAWSEVENTBRIDGE;
}
/**
 *
 * @export
 * @interface BaseTriggerEventProcessorsAWSEVENTBRIDGE
 */
export interface BaseTriggerEventProcessorsAWSEVENTBRIDGE {
    /**
     *
     * @type {BaseTriggerEventProcessorsAWSEVENTBRIDGEConfig}
     * @memberof BaseTriggerEventProcessorsAWSEVENTBRIDGE
     */
    'config'?: BaseTriggerEventProcessorsAWSEVENTBRIDGEConfig;
}
/**
 *
 * @export
 * @interface BaseTriggerEventProcessorsAWSEVENTBRIDGEConfig
 */
export interface BaseTriggerEventProcessorsAWSEVENTBRIDGEConfig {
    /**
     * An AWS Account ID.
     * @type {any}
     * @memberof BaseTriggerEventProcessorsAWSEVENTBRIDGEConfig
     */
    'account_id'?: any;
    /**
     * An AWS region.
     * @type {any}
     * @memberof BaseTriggerEventProcessorsAWSEVENTBRIDGEConfig
     */
    'region'?: any;
    /**
     * If `true`, event objects are serialized using EJSON.
     * @type {any}
     * @memberof BaseTriggerEventProcessorsAWSEVENTBRIDGEConfig
     */
    'extended_json_enabled'?: any;
}
/**
 *
 * @export
 * @interface BaseTriggerEventProcessorsFUNCTION
 */
export interface BaseTriggerEventProcessorsFUNCTION {
    /**
     *
     * @type {BaseTriggerEventProcessorsFUNCTIONConfig}
     * @memberof BaseTriggerEventProcessorsFUNCTION
     */
    'config'?: BaseTriggerEventProcessorsFUNCTIONConfig;
}
/**
 *
 * @export
 * @interface BaseTriggerEventProcessorsFUNCTIONConfig
 */
export interface BaseTriggerEventProcessorsFUNCTIONConfig {
    /**
     * The ID of the function that the trigger calls when it fires.  This value is the same as the root-level `function_id`. You can either define the value here or in `function_id`. The App Services backend duplicates the value to the configuration location where you did not define it.  For example, if you define `event_processors.FUNCTION.function_id`, the backend duplicates it to `function_id`.
     * @type {any}
     * @memberof BaseTriggerEventProcessorsFUNCTIONConfig
     */
    'function_id'?: any;
    /**
     * The name of the function that the trigger calls when it fires, i.e. the function described by `function_id`.  This value is the same as the root-level `function_name`. You can either define the value here or in `function_name`. The App Services backend duplicates the value to the configuration location where you did not define it.  For example, if you define `event_processors.FUNCTION.function_name`, the backend duplicates it to `function_name`.
     * @type {any}
     * @memberof BaseTriggerEventProcessorsFUNCTIONConfig
     */
    'function_name'?: any;
}
/**
 *
 * @export
 * @interface BasicError
 */
export interface BasicError {
    /**
     *
     * @type {any}
     * @memberof BasicError
     */
    'error'?: any;
}
/**
 *
 * @export
 * @interface BilledMemory
 */
export interface BilledMemory {
    /**
     * The total billable memory used by the request.
     * @type {any}
     * @memberof BilledMemory
     */
    'mem_time_usage'?: any;
}
/**
 *
 * @export
 * @interface BuildInfo
 */
export interface BuildInfo {
    /**
     * Human-readable version information about the mongod instance. This string will take the format `<major>.<minor>.<patch>`.
     * @type {any}
     * @memberof BuildInfo
     */
    'version'?: any;
    /**
     * The commit identifier that identifies the state of the code use to build the mongod.
     * @type {any}
     * @memberof BuildInfo
     */
    'gitVersion'?: any;
    /**
     * An array that conveys version information about the mongod instance. See version for a more readable version of this string.
     * @type {any}
     * @memberof BuildInfo
     */
    'versionArray'?: any;
    /**
     * A string that reports the JavaScript engine used in the mongod instance. By default, this is `mozjs` after version `3.2`, and previously `V8`.
     * @type {any}
     * @memberof BuildInfo
     */
    'javascriptEngine'?: any;
    /**
     * A number that reflects the target processor architecture of the mongod binary.
     * @type {any}
     * @memberof BuildInfo
     */
    'bits'?: any;
    /**
     * A boolean that reflects whether or not the `mongod` instance was built with debugging options.
     * @type {any}
     * @memberof BuildInfo
     */
    'debug'?: any;
    /**
     * A number that reports the [Maximum BSON Document Size](https://www.mongodb.com/docs/manual/reference/limits#std-label-limit-bson-document-size)
     * @type {any}
     * @memberof BuildInfo
     */
    'maxBsonObjectSize'?: any;
}
/**
 *
 * @export
 * @interface ClientLog
 */
export interface ClientLog {
    /**
     * The user account ID of the user that initiated the logged operation.
     * @type {any}
     * @memberof ClientLog
     */
    'user_id'?: any;
    /**
     * The IP address that the logged operation originated from.
     * @type {any}
     * @memberof ClientLog
     */
    'remote_ip_address'?: any;
    /**
     * The HTTP status code returned in the operation response.
     * @type {any}
     * @memberof ClientLog
     */
    'status'?: any;
    /**
     * If a runtime error occurred in the logged operation, this is a message that describes the issue.
     * @type {any}
     * @memberof ClientLog
     */
    'error'?: any;
    /**
     * If a runtime error occurred in the logged operation, this is the error\'s short code.
     * @type {any}
     * @memberof ClientLog
     */
    'error_code'?: any;
    /**
     * The name of the platform that the client was running on.
     * @type {any}
     * @memberof ClientLog
     */
    'platform'?: any;
    /**
     * The version of the platform that the client was running on.
     * @type {any}
     * @memberof ClientLog
     */
    'platform_version'?: any;
    /**
     * The name of the Realm SDK used to make the request.
     * @type {any}
     * @memberof ClientLog
     */
    'sdk_name'?: any;
    /**
     * The version number of the Realm SDK used to make the request.
     * @type {any}
     * @memberof ClientLog
     */
    'sdk_version'?: any;
}
/**
 *
 * @export
 * @interface CloudProviderRegion
 */
export interface CloudProviderRegion {
    /**
     *
     * @type {any}
     * @memberof CloudProviderRegion
     */
    'id'?: any;
    /**
     * A descriptive name for the region.
     * @type {any}
     * @memberof CloudProviderRegion
     */
    'name'?: any;
    /**
     * The cloud provider that hosts the region.
     * @type {any}
     * @memberof CloudProviderRegion
     */
    'cloud_provider'?: any;
    /**
     * The country where the region is physically hosted.
     * @type {any}
     * @memberof CloudProviderRegion
     */
    'country'?: any;
    /**
     * The [deployment models](https://www.mongodb.com/docs/atlas/app-services/apps/deployment-models-and-regions/#deployment-models) that this region supports.
     * @type {any}
     * @memberof CloudProviderRegion
     */
    'deployment_models'?: any;
}
/**
 *
 * @export
 * @interface CustomResolver
 */
export interface CustomResolver {
    /**
     * The custom resolver\'s unique ID.
     * @type {any}
     * @memberof CustomResolver
     */
    '_id': any;
    /**
     * The resolver function\'s unique ID.
     * @type {any}
     * @memberof CustomResolver
     */
    'function_id': any;
    /**
     * The name of the resolver\'s parent type. This can be `\"Query\"`, `\"Mutation\"`, or the name of a generated type if this is a computed property.
     * @type {any}
     * @memberof CustomResolver
     */
    'on_type': any;
    /**
     * The name of the custom resolver field that appears in the GraphQL schema.
     * @type {any}
     * @memberof CustomResolver
     */
    'field_name': any;
    /**
     * The type of the custom resolver\'s `input` parameter. This can be a scalar, the name of an existing generated type, or a custom JSON schema object. If undefined, the resolver does not accept an input.
     * @type {any}
     * @memberof CustomResolver
     */
    'input_type'?: any | null;
    /**
     * The kind of input type the custom resolver uses. This value must agree with the value of `input_type`:  - A scalar input type must use `\"scalar\"` or `\"scalar-list\"` - A generated input type must use `\"generated\"` or `\"generated-list\"` - A custom input type must use `\"custom\"`  If undefined, the resolver does not accept an input.
     * @type {any}
     * @memberof CustomResolver
     */
    'input_type_format'?: CustomResolverInputTypeFormatEnum;
    /**
     * The type of the value returned by the custom resolver. This can be a scalar, the name of an existing generated type, or a custom JSON schema object.  If undefined, the resolver returns a `DefaultPayload` object:  ```graphql type DefaultPayload {   status: String! } ```
     * @type {any}
     * @memberof CustomResolver
     */
    'payload_type'?: any | null;
    /**
     * The kind of payload type the custom resolver uses. This value must agree with the value of `payload_type`:  - A scalar payload type must use `\"scalar\"` or `\"scalar-list\"` - A generated payload type must use `\"generated\"` or `\"generated-list\"` - A custom payload type must use `\"custom\"`  If undefined, the resolver returns a `DefaultPayload` object.
     * @type {any}
     * @memberof CustomResolver
     */
    'payload_type_format'?: CustomResolverPayloadTypeFormatEnum;
}
export declare const CustomResolverInputTypeFormatEnum: {
    readonly Scalar: "scalar";
    readonly ScalarList: "scalar-list";
    readonly Generated: "generated";
    readonly GeneratedList: "generated-list";
    readonly Custom: "custom";
};
export type CustomResolverInputTypeFormatEnum = typeof CustomResolverInputTypeFormatEnum[keyof typeof CustomResolverInputTypeFormatEnum];
export declare const CustomResolverPayloadTypeFormatEnum: {
    readonly Scalar: "scalar";
    readonly ScalarList: "scalar-list";
    readonly Generated: "generated";
    readonly GeneratedList: "generated-list";
    readonly Custom: "custom";
};
export type CustomResolverPayloadTypeFormatEnum = typeof CustomResolverPayloadTypeFormatEnum[keyof typeof CustomResolverPayloadTypeFormatEnum];
/**
 *
 * @export
 * @interface CustomUserDataConfig
 */
export interface CustomUserDataConfig {
    /**
     * The `_id` value of the linked MongoDB data source that contains custom user data.  See [Get a Data Source](#operation/adminGetService).
     * @type {any}
     * @memberof CustomUserDataConfig
     */
    'mongo_service_id'?: any;
    /**
     * The name of the database that contains custom user data.
     * @type {any}
     * @memberof CustomUserDataConfig
     */
    'database_name'?: any;
    /**
     * The name of the collection that contains custom user data.
     * @type {any}
     * @memberof CustomUserDataConfig
     */
    'collection_name'?: any;
    /**
     * The name of a field that appears in every custom user data document and that contains the user account ID of each document\'s corresponding user.
     * @type {any}
     * @memberof CustomUserDataConfig
     */
    'user_id_field'?: any;
    /**
     * The `_id` value of a [user creation function](https://www.mongodb.com/docs/atlas/app-services/users/enable-custom-user-data/#std-label-user-creation-function) that runs whenever a new user registers.
     * @type {any}
     * @memberof CustomUserDataConfig
     */
    'on_user_creation_function_id'?: any;
    /**
     * If `true`, custom user data is enabled.
     * @type {any}
     * @memberof CustomUserDataConfig
     */
    'enabled'?: any;
}
/**
 *
 * @export
 * @interface DataApiConfig
 */
export interface DataApiConfig {
    /**
     *
     * @type {any}
     * @memberof DataApiConfig
     */
    'disabled'?: any;
    /**
     *
     * @type {any}
     * @memberof DataApiConfig
     */
    'versions'?: any;
    /**
     * The default [data format](https://mongodb.com/docs/atlas/app-services/data-api/#data-formats) returned by Data API endpoints.
     * @type {EndpointDataFormat}
     * @memberof DataApiConfig
     */
    'return_type'?: EndpointDataFormat;
    /**
     *
     * @type {any}
     * @memberof DataApiConfig
     */
    'create_user_on_auth'?: any;
    /**
     * An application user\'s account ID. If defined, endpoints will always run as the specified user.
     * @type {any}
     * @memberof DataApiConfig
     */
    'run_as_user_id'?: any;
    /**
     * Stringified source code for a function that returns an application user\'s account ID. If defined, endpoints execute the function on every request and run as the user with the ID returned from the function.
     * @type {any}
     * @memberof DataApiConfig
     */
    'run_as_user_id_script_source'?: any;
    /**
     *
     * @type {any}
     * @memberof DataApiConfig
     */
    'validation_method'?: DataApiConfigValidationMethodEnum;
    /**
     * If `validation_method` is set to `\"SECRET_AS_QUERY_PARAM\"` or `\"VERIFY_PAYLOAD\"`, this is the `name` of the [Secret](https://www.mongodb.com/docs/atlas/app-services/values-and-secrets/) that authorizes requests.
     * @type {any}
     * @memberof DataApiConfig
     */
    'secret_name'?: any;
    /**
     * A JSON expression that evaluates to `true` if an endpoint is allowed to run in response to an incoming request.
     * @type {any}
     * @memberof DataApiConfig
     */
    'can_evaluate'?: any;
}
export declare const DataApiConfigValidationMethodEnum: {
    readonly NoValidation: "NO_VALIDATION";
    readonly SecretAsQueryParam: "SECRET_AS_QUERY_PARAM";
    readonly VerifyPayload: "VERIFY_PAYLOAD";
};
export type DataApiConfigValidationMethodEnum = typeof DataApiConfigValidationMethodEnum[keyof typeof DataApiConfigValidationMethodEnum];
/**
 * A supported version of the Data API.
 * @export
 * @interface DataApiVersion
 */
export interface DataApiVersion {
}
/**
 * A data access rule that define defines fallback user roles and query filters for collection\'s that don\'t have more specific permissions defined.
 * @export
 * @interface DefaultRule
 */
export interface DefaultRule {
    /**
     * The default rule\'s unique ObjectId identifier.
     * @type {any}
     * @memberof DefaultRule
     */
    '_id'?: any;
    /**
     * An ordered list of default user roles.
     * @type {any}
     * @memberof DefaultRule
     */
    'roles'?: any;
    /**
     * A list of default [query filters](https://www.mongodb.com/docs/atlas/app-services/reference/config/data_sources/#filters).
     * @type {any}
     * @memberof DefaultRule
     */
    'filters'?: any;
}
/**
 *
 * @export
 * @interface DependenciesSummary
 */
export interface DependenciesSummary {
    /**
     * The dependency collection\'s unique internal ID.
     * @type {any}
     * @memberof DependenciesSummary
     */
    '_id'?: any;
    /**
     * The application\'s deployment region.
     * @type {any}
     * @memberof DependenciesSummary
     */
    'location'?: any;
    /**
     * The unique `_id` value of the MongoDB Cloud user that uploaded the dependency collection.
     * @type {any}
     * @memberof DependenciesSummary
     */
    'user_id'?: any;
    /**
     * The time at which the dependencies were uploaded in [Unix time](https://en.wikipedia.org/wiki/Unix_time) (number of seconds since January 1, 1970 at 00:00 UTC).
     * @type {any}
     * @memberof DependenciesSummary
     */
    'last_modified'?: any;
    /**
     * An array of documents that each describe a dependency uploaded to the application.
     * @type {any}
     * @memberof DependenciesSummary
     */
    'dependencies_list'?: any;
}
/**
 *
 * @export
 * @interface Dependency
 */
export interface Dependency {
    /**
     * The name of the uploaded dependency.
     * @type {any}
     * @memberof Dependency
     */
    'name'?: any;
    /**
     * The version of the uploaded dependency.
     * @type {any}
     * @memberof Dependency
     */
    'version'?: any;
}
/**
 *
 * @export
 * @interface Deployment
 */
export interface Deployment {
    /**
     * The unique ID of the deployment.
     * @type {any}
     * @memberof Deployment
     */
    '_id'?: any;
    /**
     * The name of the deployment. By default, this is the same value as ``_id``.
     * @type {any}
     * @memberof Deployment
     */
    'name'?: any;
    /**
     * The unique `_id` value of the Atlas App Services App.
     * @type {any}
     * @memberof Deployment
     */
    'app_id'?: any;
    /**
     * The unique `_id` value of the deployment draft associated with the deployment, if applicable.
     * @type {any}
     * @memberof Deployment
     */
    'draft_id'?: any;
    /**
     * The unique `_id` value of the MongoDB Cloud user that deployed the draft.
     * @type {any}
     * @memberof Deployment
     */
    'user_id'?: any;
    /**
     * The time at which the deployment was made. Represented as the number of seconds since January 1, 1970.
     * @type {any}
     * @memberof Deployment
     */
    'deployed_at'?: any;
    /**
     * The deployment method used to create the deployment.
     * @type {any}
     * @memberof Deployment
     */
    'origin'?: any;
    /**
     * The commit hash of the deployment (Automatic GitHub Deployment)
     * @type {any}
     * @memberof Deployment
     */
    'commit'?: any;
    /**
     * A message that indicates whether or not the deployment was successful.
     * @type {any}
     * @memberof Deployment
     */
    'status'?: any;
    /**
     * The error message of the error that caused the deployment to fail, if applicable.
     * @type {any}
     * @memberof Deployment
     */
    'status_error_message'?: any;
    /**
     * A link to the diff of changes in the deployment
     * @type {any}
     * @memberof Deployment
     */
    'diff_url'?: any;
    /**
     *
     * @type {DeploymentLocation}
     * @memberof Deployment
     */
    'remote_location'?: DeploymentLocation;
}
/**
 * A configuration file that controls your app\'s deployment behavior.
 * @export
 * @interface DeploymentConfig
 */
export interface DeploymentConfig {
    /**
     * If `true`, every change made in the Admin UI deploys automatically on save. If `false`, changes are grouped into a deployment draft that you deploy separately.
     * @type {any}
     * @memberof DeploymentConfig
     */
    'ui_drafts_disabled': any;
    /**
     *
     * @type {DeploymentConfigAutomaticDeployment}
     * @memberof DeploymentConfig
     */
    'automatic_deployment': DeploymentConfigAutomaticDeployment;
    /**
     * The time this configuration was last modified represented by the number of seconds since the UNIX epoch.
     * @type {any}
     * @memberof DeploymentConfig
     */
    'last_modified'?: any;
}
/**
 * Configuration for automatic deployment methods
 * @export
 * @interface DeploymentConfigAutomaticDeployment
 */
export interface DeploymentConfigAutomaticDeployment {
    /**
     * If `true`, the app automatically deploys using the method defined for `provider`.
     * @type {any}
     * @memberof DeploymentConfigAutomaticDeployment
     */
    'enabled'?: any;
    /**
     * The type of automatic deployment.
     * @type {any}
     * @memberof DeploymentConfigAutomaticDeployment
     */
    'provider'?: DeploymentConfigAutomaticDeploymentProviderEnum;
    /**
     * The unique ID values of automatic deployment provider installations. For example, the `id` value of a [GitHub app installation](https://docs.github.com/en/rest/apps/installations).
     * @type {any}
     * @memberof DeploymentConfigAutomaticDeployment
     */
    'installation_ids'?: any;
}
export declare const DeploymentConfigAutomaticDeploymentProviderEnum: {
    readonly Github: "github";
};
export type DeploymentConfigAutomaticDeploymentProviderEnum = typeof DeploymentConfigAutomaticDeploymentProviderEnum[keyof typeof DeploymentConfigAutomaticDeploymentProviderEnum];
/**
 *
 * @export
 * @interface DeploymentDraft
 */
export interface DeploymentDraft {
    /**
     * The unique ID of the draft.
     * @type {any}
     * @memberof DeploymentDraft
     */
    '_id'?: any;
    /**
     * The unique `_id` value of the MongoDB Cloud user that created the draft.
     * @type {any}
     * @memberof DeploymentDraft
     */
    'user_id'?: any;
    /**
     * A specific, existing application.
     * @type {any}
     * @memberof DeploymentDraft
     */
    'app'?: any;
}
/**
 * An identifier of the location where an app server is physically deployed to, regardless of the cloud provider that hosts the app.
 * @export
 * @interface DeploymentLocation
 */
export interface DeploymentLocation {
}
/**
 *
 * @export
 * @interface DeploymentMigration
 */
export interface DeploymentMigration {
    /**
     *
     * @type {any}
     * @memberof DeploymentMigration
     */
    'status'?: DeploymentMigrationStatusEnum;
    /**
     * A description of the current migration status.
     * @type {any}
     * @memberof DeploymentMigration
     */
    'message'?: any;
    /**
     * A timestamp of the most recent update to the deployment migration.
     * @type {any}
     * @memberof DeploymentMigration
     */
    'updated_at'?: any;
    /**
     * The App\'s deployment model and cloud provider region at the start of the migration
     * @type {AppDeploymentSettings}
     * @memberof DeploymentMigration
     */
    'from'?: AppDeploymentSettings;
    /**
     * The migration\'s target deployment model and cloud provider region. At the end of a successful migration, the App uses these deployment settings instead of the settings described by `from`.
     * @type {AppDeploymentSettings}
     * @memberof DeploymentMigration
     */
    'to'?: AppDeploymentSettings;
}
export declare const DeploymentMigrationStatusEnum: {
    readonly Started: "started";
    readonly Downtime: "downtime";
    readonly EnablingEventSubscriptions: "enabling_event_subscriptions";
    readonly Cleanup: "cleanup";
    readonly Successful: "successful";
    readonly Failed: "failed";
};
export type DeploymentMigrationStatusEnum = typeof DeploymentMigrationStatusEnum[keyof typeof DeploymentMigrationStatusEnum];
/**
 * An application [deployment model](https://www.mongodb.com/docs/atlas/app-services/apps/deployment-models-and-regions/#deployment-models).
 * @export
 * @interface DeploymentModel
 */
export interface DeploymentModel {
}
/**
 *
 * @export
 * @interface Diff
 */
export interface Diff {
    /**
     * A list where each item is the line-by-line diff for a specific configuration file.
     * @type {any}
     * @memberof Diff
     */
    'diffs'?: any;
    /**
     *
     * @type {DiffHostingFilesDiff}
     * @memberof Diff
     */
    'hosting_files_diff'?: DiffHostingFilesDiff;
}
/**
 * The filenames of hosted files that have been added, removed, or modified.
 * @export
 * @interface DiffHostingFilesDiff
 */
export interface DiffHostingFilesDiff {
    /**
     *
     * @type {any}
     * @memberof DiffHostingFilesDiff
     */
    'added'?: any;
    /**
     *
     * @type {any}
     * @memberof DiffHostingFilesDiff
     */
    'deleted'?: any;
    /**
     *
     * @type {any}
     * @memberof DiffHostingFilesDiff
     */
    'modified'?: any;
}
/**
 *
 * @export
 * @interface EmailConfirmationAutomatic
 */
export interface EmailConfirmationAutomatic {
    /**
     * If `true`, automatically confirm new user accounts without additional verification.
     * @type {any}
     * @memberof EmailConfirmationAutomatic
     */
    'autoConfirm'?: any;
}
/**
 *
 * @export
 * @interface EmailConfirmationBuiltIn
 */
export interface EmailConfirmationBuiltIn {
    /**
     * If `true`, automatically confirm new user accounts without additional verification. For built-in email account confirmation, set this value to `false`.
     * @type {any}
     * @memberof EmailConfirmationBuiltIn
     */
    'autoConfirm'?: any;
    /**
     * The URL included in the email sent to new users as part of the built-in confirmation flow. The email also adds a unique confirmation `token` and `tokenId` as query parameters.  This URL should handle user confirmation by passing the confirmation token to a Realm SDK\'s `confirmUser` function or to the Admin API [Confirm a Pending Email/Password User](#tag/email/operation/adminConfirmPendingUser) endpoint.
     * @type {any}
     * @memberof EmailConfirmationBuiltIn
     */
    'emailConfirmationUrl'?: any;
    /**
     * The subject line of the email sent to new users as part of the built-in confirmation flow.
     * @type {any}
     * @memberof EmailConfirmationBuiltIn
     */
    'confirmEmailSubject'?: any;
}
/**
 *
 * @export
 * @interface EmailConfirmationCustomFunction
 */
export interface EmailConfirmationCustomFunction {
    /**
     * If `true`, automatically confirm new user accounts without additional verification. For custom function account confirmation, set this value to `false`.
     * @type {any}
     * @memberof EmailConfirmationCustomFunction
     */
    'autoConfirm'?: any;
    /**
     * If `true`, new email/password user account registrations use a custom function that you define to handle the confirmation process.
     * @type {any}
     * @memberof EmailConfirmationCustomFunction
     */
    'runConfirmationFunction'?: any;
    /**
     * The name of the custom function that handles the confirmation process.
     * @type {any}
     * @memberof EmailConfirmationCustomFunction
     */
    'confirmationFunctionName'?: any;
}
/**
 *
 * @export
 * @interface Endpoint
 */
export interface Endpoint {
    /**
     *
     * @type {any}
     * @memberof Endpoint
     */
    'route'?: any;
    /**
     *
     * @type {any}
     * @memberof Endpoint
     */
    'http_method'?: EndpointHttpMethodEnum;
    /**
     *
     * @type {any}
     * @memberof Endpoint
     */
    'function_id': any;
    /**
     *
     * @type {any}
     * @memberof Endpoint
     */
    'validation_method'?: EndpointValidationMethodEnum;
    /**
     * If `validation_method` is set to `\"SECRET_AS_QUERY_PARAM\"` or `\"VERIFY_PAYLOAD\"`, this is the `_id` of the [Secret](https://www.mongodb.com/docs/atlas/app-services/values-and-secrets/) that authorizes requests.
     * @type {any}
     * @memberof Endpoint
     */
    'secret_id'?: any;
    /**
     * The default [data format](https://mongodb.com/docs/atlas/app-services/data-api/#data-formats) returned by custom HTTPS endpoints.
     * @type {EndpointDataFormat}
     * @memberof Endpoint
     */
    'return_type'?: EndpointDataFormat;
    /**
     *
     * @type {any}
     * @memberof Endpoint
     */
    'respond_result'?: any;
    /**
     *
     * @type {any}
     * @memberof Endpoint
     */
    'fetch_custom_user_data'?: any;
    /**
     *
     * @type {any}
     * @memberof Endpoint
     */
    'create_user_on_auth'?: any;
    /**
     *
     * @type {any}
     * @memberof Endpoint
     */
    'disabled'?: any;
}
export declare const EndpointHttpMethodEnum: {
    readonly Get: "GET";
    readonly Post: "POST";
    readonly Put: "PUT";
    readonly Patch: "PATCH";
    readonly Delete: "DELETE";
    readonly Star: "*";
};
export type EndpointHttpMethodEnum = typeof EndpointHttpMethodEnum[keyof typeof EndpointHttpMethodEnum];
export declare const EndpointValidationMethodEnum: {
    readonly NoValidation: "NO_VALIDATION";
    readonly SecretAsQueryParam: "SECRET_AS_QUERY_PARAM";
    readonly VerifyPayload: "VERIFY_PAYLOAD";
};
export type EndpointValidationMethodEnum = typeof EndpointValidationMethodEnum[keyof typeof EndpointValidationMethodEnum];
/**
 * A [data format](https://mongodb.com/docs/atlas/app-services/data-api/#data-formats) supported by the Data API & custom endpoints.
 * @export
 * @interface EndpointDataFormat
 */
export interface EndpointDataFormat {
}
/**
 *
 * @export
 * @interface EnvironmentValueDescription
 */
export interface EnvironmentValueDescription {
    /**
     * The environment value\'s internal ID
     * @type {any}
     * @memberof EnvironmentValueDescription
     */
    '_id'?: any;
    /**
     * The environment value name
     * @type {any}
     * @memberof EnvironmentValueDescription
     */
    'name'?: any;
    /**
     * The time this configuration was last modified represented by the number of seconds since the UNIX epoch.
     * @type {any}
     * @memberof EnvironmentValueDescription
     */
    'last_modified'?: any;
}
/**
 * Read and write permissions for a field.
 * @export
 * @interface FieldLevelPermissions
 */
export interface FieldLevelPermissions {
    /**
     * A [rule expression](https://mongodb.com/docs/atlas/app-services/rules/expressions/).
     * @type {any}
     * @memberof FieldLevelPermissions
     */
    'read': any | null;
    /**
     * A [rule expression](https://mongodb.com/docs/atlas/app-services/rules/expressions/).
     * @type {any}
     * @memberof FieldLevelPermissions
     */
    'write': any | null;
}
/**
 * A filter that conditionally modifies incoming query operations before they run.
 * @export
 * @interface Filter
 */
export interface Filter {
    /**
     * The filter\'s unique ObjectId identifier.
     * @type {any}
     * @memberof Filter
     */
    '_id'?: any;
    /**
     * The filter\'s name.
     * @type {any}
     * @memberof Filter
     */
    'name'?: any;
    /**
     * A [rule expression](https://mongodb.com/docs/atlas/app-services/rules/expressions/).
     * @type {any}
     * @memberof Filter
     */
    'apply_when'?: any | null;
    /**
     * A MongoDB query object.
     * @type {any}
     * @memberof Filter
     */
    'query'?: any;
    /**
     * A MongoDB projection object.
     * @type {{ [key: string]: any; }}
     * @memberof Filter
     */
    'projection'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface Function
 */
export interface Function {
    /**
     *
     * @type {any}
     * @memberof Function
     */
    '_id'?: any;
    /**
     * A JSON expression that evaluates to `true` if the Function is allowed to run in response to an incoming request.
     * @type {any}
     * @memberof Function
     */
    'can_evaluate'?: any;
    /**
     * A unique name for the Function.
     * @type {any}
     * @memberof Function
     */
    'name'?: any;
    /**
     * If `true`, the function is hidden from client applications. You can still call a private function from JSON expressions and other functions, including incoming webhooks and triggers.
     * @type {any}
     * @memberof Function
     */
    'private'?: any;
    /**
     * The stringified source code for the function. The code must be valid ES6.
     * @type {any}
     * @memberof Function
     */
    'source'?: any;
}
/**
 *
 * @export
 * @interface FunctionCall
 */
export interface FunctionCall {
    /**
     * The global region where the function was executed.
     * @type {any}
     * @memberof FunctionCall
     */
    'function_call_location'?: any;
    /**
     * The cloud provider deployment region where the function was executed.
     * @type {any}
     * @memberof FunctionCall
     */
    'function_call_provider_region'?: any;
    /**
     *
     * @type {any}
     * @memberof FunctionCall
     */
    'function_call'?: any;
    /**
     *
     * @type {any}
     * @memberof FunctionCall
     */
    'function_id'?: any;
    /**
     *
     * @type {any}
     * @memberof FunctionCall
     */
    'function_name'?: any;
}
/**
 *
 * @export
 * @interface GcpDeploymentRegion
 */
export interface GcpDeploymentRegion {
}
/**
 *
 * @export
 * @interface GraphQLConfig
 */
export interface GraphQLConfig {
    /**
     * If `true`, generated schema type names use common English pluralization whenever possible.  If `false`, or if a natural pluralization cannot be determined, then plural types use the singular type name with an `\"s\"` appended to the end.  **You cannot change this value after you create your App. This value is `true` for all new Apps.**
     * @type {any}
     * @memberof GraphQLConfig
     */
    'use_natural_pluralization'?: any;
    /**
     * If `true`, the GraphQL API blocks [introspection queries](https://graphql.org/learn/introspection/) from clients.
     * @type {any}
     * @memberof GraphQLConfig
     */
    'disable_schema_introspection'?: any;
}
/**
 *
 * @export
 * @interface GraphQLValidationAction
 */
export interface GraphQLValidationAction {
}
/**
 *
 * @export
 * @interface GraphQLValidationLevel
 */
export interface GraphQLValidationLevel {
}
/**
 *
 * @export
 * @interface GraphQLValidationSettings
 */
export interface GraphQLValidationSettings {
    /**
     *
     * @type {GraphQLValidationAction}
     * @memberof GraphQLValidationSettings
     */
    'read_validation_action'?: GraphQLValidationAction;
    /**
     *
     * @type {GraphQLValidationLevel}
     * @memberof GraphQLValidationSettings
     */
    'read_validation_level'?: GraphQLValidationLevel;
    /**
     *
     * @type {GraphQLValidationAction}
     * @memberof GraphQLValidationSettings
     */
    'write_validation_action'?: GraphQLValidationAction;
    /**
     *
     * @type {GraphQLValidationLevel}
     * @memberof GraphQLValidationSettings
     */
    'write_validation_level'?: GraphQLValidationLevel;
}
/**
 *
 * @export
 * @interface HostedAssetMetadata
 */
export interface HostedAssetMetadata {
    /**
     * The unique App ID of the Atlas App Services App that is hosting the file.
     * @type {any}
     * @memberof HostedAssetMetadata
     */
    'appId'?: any;
    /**
     * The time at which the hosted asset was last modified in [Unix time](https://en.wikipedia.org/wiki/Unix_time) (number of seconds since January 1, 1970 at 00:00 UTC).
     * @type {any}
     * @memberof HostedAssetMetadata
     */
    'last_modified'?: any;
    /**
     * The full URL of the hosted asset.
     * @type {any}
     * @memberof HostedAssetMetadata
     */
    'url'?: any;
    /**
     * The resource path of the hosted asset
     * @type {any}
     * @memberof HostedAssetMetadata
     */
    'path'?: any;
    /**
     * The size of the hosted asset in bytes
     * @type {any}
     * @memberof HostedAssetMetadata
     */
    'size'?: any;
    /**
     * An array of documents that each describe a [metadata attribute](https://www.mongodb.com/docs/realm/hosting/file-metadata-attributes) that applies to the asset.
     * @type {any}
     * @memberof HostedAssetMetadata
     */
    'attrs'?: any;
    /**
     * The MD5 checksum hash for the hosted asset
     * @type {any}
     * @memberof HostedAssetMetadata
     */
    'hash'?: any;
}
/**
 *
 * @export
 * @interface HostingConfiguration
 */
export interface HostingConfiguration {
    /**
     *
     * @type {any}
     * @memberof HostingConfiguration
     */
    'enabled'?: any;
    /**
     *
     * @type {any}
     * @memberof HostingConfiguration
     */
    'status'?: HostingConfigurationStatusEnum;
    /**
     *
     * @type {HostingConfigurationDefaultDomain}
     * @memberof HostingConfiguration
     */
    'default_domain'?: HostingConfigurationDefaultDomain;
}
export declare const HostingConfigurationStatusEnum: {
    readonly SetupOk: "setup_ok";
    readonly ChangeInProgress: "change_in_progress";
    readonly ChangeFailed: "change_failed";
    readonly ChangeFailedFatal: "change_failed_fatal";
};
export type HostingConfigurationStatusEnum = typeof HostingConfigurationStatusEnum[keyof typeof HostingConfigurationStatusEnum];
/**
 *
 * @export
 * @interface HostingConfigurationDefaultDomain
 */
export interface HostingConfigurationDefaultDomain {
    /**
     *
     * @type {any}
     * @memberof HostingConfigurationDefaultDomain
     */
    'provider_type'?: any;
    /**
     *
     * @type {HostingConfigurationDefaultDomainConfig}
     * @memberof HostingConfigurationDefaultDomain
     */
    'config'?: HostingConfigurationDefaultDomainConfig;
}
/**
 *
 * @export
 * @interface HostingConfigurationDefaultDomainConfig
 */
export interface HostingConfigurationDefaultDomainConfig {
    /**
     * Default domain of hosted Atlas App Services App provided by App Services.
     * @type {any}
     * @memberof HostingConfigurationDefaultDomainConfig
     */
    'app_default_domain'?: any;
}
/**
 *
 * @export
 * @interface LogForwarder
 */
export interface LogForwarder {
    /**
     *
     * @type {any}
     * @memberof LogForwarder
     */
    '_id'?: any;
    /**
     *
     * @type {any}
     * @memberof LogForwarder
     */
    'name'?: any;
    /**
     *
     * @type {any}
     * @memberof LogForwarder
     */
    'disabled'?: any;
    /**
     *
     * @type {any}
     * @memberof LogForwarder
     */
    'log_types'?: any;
    /**
     *
     * @type {any}
     * @memberof LogForwarder
     */
    'log_statuses'?: any;
    /**
     *
     * @type {LogForwardingPolicy}
     * @memberof LogForwarder
     */
    'policy'?: LogForwardingPolicy;
    /**
     *
     * @type {LogForwardingAction}
     * @memberof LogForwarder
     */
    'action'?: LogForwardingAction;
}
/**
 *
 * @export
 * @interface LogForwardingAction
 */
export interface LogForwardingAction {
    /**
     *
     * @type {any}
     * @memberof LogForwardingAction
     */
    'type'?: LogForwardingActionTypeEnum;
    /**
     *
     * @type {any}
     * @memberof LogForwardingAction
     */
    'name'?: any;
    /**
     *
     * @type {any}
     * @memberof LogForwardingAction
     */
    'data_source'?: any;
    /**
     *
     * @type {any}
     * @memberof LogForwardingAction
     */
    'database'?: any;
    /**
     *
     * @type {any}
     * @memberof LogForwardingAction
     */
    'collection'?: any;
}
export declare const LogForwardingActionTypeEnum: {
    readonly Collection: "collection";
    readonly Function: "function";
};
export type LogForwardingActionTypeEnum = typeof LogForwardingActionTypeEnum[keyof typeof LogForwardingActionTypeEnum];
/**
 *
 * @export
 * @interface LogForwardingPolicy
 */
export interface LogForwardingPolicy {
    /**
     *
     * @type {any}
     * @memberof LogForwardingPolicy
     */
    'type'?: LogForwardingPolicyTypeEnum;
}
export declare const LogForwardingPolicyTypeEnum: {
    readonly Single: "single";
    readonly Batch: "batch";
};
export type LogForwardingPolicyTypeEnum = typeof LogForwardingPolicyTypeEnum[keyof typeof LogForwardingPolicyTypeEnum];
/**
 *
 * @export
 * @interface LogStatus
 */
export interface LogStatus {
}
/**
 *
 * @export
 * @interface LogType
 */
export interface LogType {
}
/**
 *
 * @export
 * @interface Message
 */
export interface Message {
    /**
     *
     * @type {any}
     * @memberof Message
     */
    'allowed_ips'?: any;
    /**
     *
     * @type {any}
     * @memberof Message
     */
    'appID'?: any;
    /**
     *
     * @type {any}
     * @memberof Message
     */
    'label'?: any;
    /**
     *
     * @type {any}
     * @memberof Message
     */
    'message'?: any;
    /**
     *
     * @type {any}
     * @memberof Message
     */
    'topic'?: any;
    /**
     *
     * @type {any}
     * @memberof Message
     */
    'created'?: any;
    /**
     *
     * @type {any}
     * @memberof Message
     */
    'sent'?: any;
    /**
     *
     * @type {MessageState}
     * @memberof Message
     */
    'state'?: MessageState;
}
/**
 *
 * @export
 * @interface MessageState
 */
export interface MessageState {
}
/**
 *
 * @export
 * @interface Messages
 */
export interface Messages {
    /**
     * A list of logs or other messages associated with the operation.
     * @type {any}
     * @memberof Messages
     */
    'messages'?: any;
}
/**
 *
 * @export
 * @interface MetadataAttribute
 */
export interface MetadataAttribute {
    /**
     * The [metadata attribute](https://www.mongodb.com/docs/realm/hosting/file-metadata-attributes) name.
     * @type {any}
     * @memberof MetadataAttribute
     */
    'name'?: any;
    /**
     * The [metadata attribute](https://www.mongodb.com/docs/realm/hosting/file-metadata-attributes) value.
     * @type {any}
     * @memberof MetadataAttribute
     */
    'value'?: any;
}
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * A message that describes the error.
     * @type {any}
     * @memberof ModelError
     */
    'error'?: any;
    /**
     * The error type.
     * @type {any}
     * @memberof ModelError
     */
    'error_code'?: any;
}
/**
 *
 * @export
 * @interface NewFunction
 */
export interface NewFunction {
    /**
     * A JSON expression that evaluates to `true` if the Function is allowed to run in response to an incoming request.
     * @type {any}
     * @memberof NewFunction
     */
    'can_evaluate'?: any;
    /**
     * A unique name for the Function.
     * @type {any}
     * @memberof NewFunction
     */
    'name': any;
    /**
     * If `true`, the function is hidden from client applications. You can still call a private function from JSON expressions and other functions, including incoming webhooks and triggers.
     * @type {any}
     * @memberof NewFunction
     */
    'private': any;
    /**
     * The stringified source code for the function. The code must be valid ES6.
     * @type {any}
     * @memberof NewFunction
     */
    'source': any;
    /**
     * If `true`, the function executes with full privileges, bypassing rules on all services.
     * @type {any}
     * @memberof NewFunction
     */
    'run_as_system': any;
    /**
     * An application user\'s account ID. If defined, endpoints will always  run as the specified user. Cannot be used with  `run_as_user_id_script_source`.
     * @type {any}
     * @memberof NewFunction
     */
    'run_as_user_id'?: any;
    /**
     * The stringified source code for a  [function](https://www.mongodb.com/docs/atlas/app-services/functions/#std-label-functions) that returns an application user\'s account ID. If defined, endpoints  execute the function on every request and run as the user with the  ID returned from the function. Cannot be used with `run_as_user_id`.
     * @type {any}
     * @memberof NewFunction
     */
    'run_as_user_id_script_source'?: any;
}
/**
 *
 * @export
 * @interface NewMessage
 */
export interface NewMessage {
    /**
     *
     * @type {any}
     * @memberof NewMessage
     */
    'label': any;
    /**
     *
     * @type {any}
     * @memberof NewMessage
     */
    'message': any;
    /**
     *
     * @type {any}
     * @memberof NewMessage
     */
    'topic': any;
    /**
     *
     * @type {MessageState}
     * @memberof NewMessage
     */
    'state': MessageState;
}
/**
 *
 * @export
 * @interface NewValue
 */
export interface NewValue {
    /**
     *
     * @type {any}
     * @memberof NewValue
     */
    'name': any;
    /**
     *
     * @type {any}
     * @memberof NewValue
     */
    'private': any;
    /**
     *
     * @type {any}
     * @memberof NewValue
     */
    'value': any;
}
/**
 *
 * @export
 * @interface NullTypeSchemaValidationSetting
 */
export interface NullTypeSchemaValidationSetting {
    /**
     *
     * @type {any}
     * @memberof NullTypeSchemaValidationSetting
     */
    'enabled'?: any;
}
/**
 *
 * @export
 * @interface Partition
 */
export interface Partition {
    /**
     *
     * @type {any}
     * @memberof Partition
     */
    'key'?: any;
    /**
     *
     * @type {any}
     * @memberof Partition
     */
    'type'?: any;
}
/**
 *
 * @export
 * @interface PasswordRefreshBuiltIn
 */
export interface PasswordRefreshBuiltIn {
    /**
     * The URL included in the email sent to users as part of the built-in password reset flow. The email also adds a unique password reset `token` and `tokenId` as query parameters.  This URL should handle user confirmation by passing the password reset token to a Realm SDK\'s `resetPassword` function.
     * @type {any}
     * @memberof PasswordRefreshBuiltIn
     */
    'resetPasswordUrl'?: any;
    /**
     * The subject line of the email sent to users as part of the built-in password reset flow.
     * @type {any}
     * @memberof PasswordRefreshBuiltIn
     */
    'resetPasswordSubject'?: any;
}
/**
 *
 * @export
 * @interface PasswordRefreshCustomFunction
 */
export interface PasswordRefreshCustomFunction {
    /**
     * If `true`, use a custom function that you define to handle the password reset process.
     * @type {any}
     * @memberof PasswordRefreshCustomFunction
     */
    'runResetFunction'?: any;
    /**
     * The name of the custom function that handles the password reset process.
     * @type {any}
     * @memberof PasswordRefreshCustomFunction
     */
    'resetFunctionName'?: any;
}
/**
 *
 * @export
 * @interface PbsSyncResponse
 */
export interface PbsSyncResponse {
    /**
     * The Service ID for the currently synced cluster, if there is one.
     * @type {any}
     * @memberof PbsSyncResponse
     */
    'service_id'?: any;
    /**
     * A list of valid partition keys based on the cluster\'s collection schemas.
     * @type {any}
     * @memberof PbsSyncResponse
     */
    'partition_fields'?: any;
}
/**
 *
 * @export
 * @interface PrivateEndpoint
 */
export interface PrivateEndpoint {
    /**
     *
     * @type {any}
     * @memberof PrivateEndpoint
     */
    '_id'?: any;
    /**
     * The cloud provider region that hosts the private endpoint.
     * @type {any}
     * @memberof PrivateEndpoint
     */
    'cloud_provider_region'?: any;
    /**
     * The private endpoint ID from the cloud provider.
     * @type {any}
     * @memberof PrivateEndpoint
     */
    'cloud_provider_endpoint_id'?: any;
    /**
     * An optional comment that describes the endpoint.
     * @type {any}
     * @memberof PrivateEndpoint
     */
    'comment'?: any;
}
/**
 *
 * @export
 * @interface PrivateEndpointServiceInfo
 */
export interface PrivateEndpointServiceInfo {
    /**
     *
     * @type {any}
     * @memberof PrivateEndpointServiceInfo
     */
    'cloud_provider_region'?: any;
    /**
     *
     * @type {any}
     * @memberof PrivateEndpointServiceInfo
     */
    'name'?: any;
    /**
     *
     * @type {any}
     * @memberof PrivateEndpointServiceInfo
     */
    'dns'?: any;
    /**
     *
     * @type {any}
     * @memberof PrivateEndpointServiceInfo
     */
    'service_name'?: any;
}
/**
 *
 * @export
 * @interface ProviderType
 */
export interface ProviderType {
}
/**
 *
 * @export
 * @interface RefreshTokenExpiration
 */
export interface RefreshTokenExpiration {
    /**
     * The time in seconds that a user session refresh token is valid for after it is issued. After this time, the token is expired and the user must re-authenticate.  The expiration time must be between 30 minutes and 180 days, inclusive. The default expiration time is 60 days.
     * @type {any}
     * @memberof RefreshTokenExpiration
     */
    'expiration_time_seconds'?: any;
}
/**
 * A [relationship](https://www.mongodb.com/docs/realm/schemas/relationships/) definition.
 * @export
 * @interface Relationship
 */
export interface Relationship {
    /**
     * A reference string for the foreign collection.
     * @type {any}
     * @memberof Relationship
     */
    'ref'?: any;
    /**
     * The name of the field in the foreign collection that the relationship points to.
     * @type {any}
     * @memberof Relationship
     */
    'foreign_key'?: any;
    /**
     * If `true`:  - the relationship may point to many foreign documents. - the local field must be defined as an array in the collection schema.
     * @type {any}
     * @memberof Relationship
     */
    'is_list'?: any;
}
/**
 * A data access role that assigns read and write permissions to a user for each document
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * The role\'s unique ObjectId identifier.
     * @type {any}
     * @memberof Role
     */
    '_id'?: any;
    /**
     * The role\'s name.
     * @type {any}
     * @memberof Role
     */
    'name'?: any;
    /**
     * A [rule expression](https://mongodb.com/docs/atlas/app-services/rules/expressions/).
     * @type {any}
     * @memberof Role
     */
    'apply_when'?: any | null;
    /**
     * A [rule expression](https://mongodb.com/docs/atlas/app-services/rules/expressions/).
     * @type {any}
     * @memberof Role
     */
    'write'?: any | null;
    /**
     * A [rule expression](https://mongodb.com/docs/atlas/app-services/rules/expressions/).
     * @type {any}
     * @memberof Role
     */
    'insert'?: any | null;
    /**
     * A [rule expression](https://mongodb.com/docs/atlas/app-services/rules/expressions/).
     * @type {any}
     * @memberof Role
     */
    'delete'?: any | null;
    /**
     * A [rule expression](https://mongodb.com/docs/atlas/app-services/rules/expressions/).
     * @type {any}
     * @memberof Role
     */
    'search'?: any | null;
    /**
     * An object that maps document field names to read and write permissions for the field and its children.
     * @type {{ [key: string]: any; }}
     * @memberof Role
     */
    'fields'?: {
        [key: string]: any;
    };
    /**
     * Field-level rules for any fields that are not explicitly configured in the role\'s `properties`.
     * @type {FieldLevelPermissions}
     * @memberof Role
     */
    'additional_fields'?: FieldLevelPermissions;
}
/**
 * A data access rule that defines user roles and query filters for a collection in a linked data source.
 * @export
 * @interface Rule
 */
export interface Rule {
    /**
     * The rule\'s unique ObjectId identifier.
     * @type {any}
     * @memberof Rule
     */
    '_id'?: any;
    /**
     * The name of a database in the linked data source.
     * @type {any}
     * @memberof Rule
     */
    'database': any;
    /**
     * The name of a collection in the specified `database`.
     * @type {any}
     * @memberof Rule
     */
    'collection': any;
    /**
     * A list of data access roles.
     * @type {any}
     * @memberof Rule
     */
    'roles'?: any;
    /**
     * A list of filters for incoming operations.
     * @type {any}
     * @memberof Rule
     */
    'filters'?: any;
}
/**
 *
 * @export
 * @interface RuleMetrics
 */
export interface RuleMetrics {
    /**
     *
     * @type {RuleMetricsRuleMetrics}
     * @memberof RuleMetrics
     */
    'rule_metrics'?: RuleMetricsRuleMetrics;
}
/**
 *
 * @export
 * @interface RuleMetricsRuleMetrics
 */
export interface RuleMetricsRuleMetrics {
    /**
     *
     * @type {{ [key: string]: RuleMetricsRuleMetricsNamespacesMetricsValue; }}
     * @memberof RuleMetricsRuleMetrics
     */
    'namespaces_metrics'?: {
        [key: string]: RuleMetricsRuleMetricsNamespacesMetricsValue;
    };
}
/**
 * Metrics for a specific `database.collection` namespace.
 * @export
 * @interface RuleMetricsRuleMetricsNamespacesMetricsValue
 */
export interface RuleMetricsRuleMetricsNamespacesMetricsValue {
    /**
     *
     * @type {{ [key: string]: RuleMetricsRuleMetricsNamespacesMetricsValueRolesValue; }}
     * @memberof RuleMetricsRuleMetricsNamespacesMetricsValue
     */
    'roles'?: {
        [key: string]: RuleMetricsRuleMetricsNamespacesMetricsValueRolesValue;
    };
    /**
     *
     * @type {any}
     * @memberof RuleMetricsRuleMetricsNamespacesMetricsValue
     */
    'no_matching_role'?: any;
}
/**
 * Metrics for a specific role.
 * @export
 * @interface RuleMetricsRuleMetricsNamespacesMetricsValueRolesValue
 */
export interface RuleMetricsRuleMetricsNamespacesMetricsValueRolesValue {
    /**
     *
     * @type {any}
     * @memberof RuleMetricsRuleMetricsNamespacesMetricsValueRolesValue
     */
    'matching_documents'?: any;
    /**
     *
     * @type {any}
     * @memberof RuleMetricsRuleMetricsNamespacesMetricsValueRolesValue
     */
    'evaluated_fields'?: any;
    /**
     *
     * @type {any}
     * @memberof RuleMetricsRuleMetricsNamespacesMetricsValueRolesValue
     */
    'discarded_fields'?: any;
}
/**
 * Metadata the describes which linked collection the schema applies to.
 * @export
 * @interface SchemaMetadata
 */
export interface SchemaMetadata {
    /**
     * The data source name.
     * @type {any}
     * @memberof SchemaMetadata
     */
    'data_source'?: any;
    /**
     * The database name.
     * @type {any}
     * @memberof SchemaMetadata
     */
    'database'?: any;
    /**
     * The collection name.
     * @type {any}
     * @memberof SchemaMetadata
     */
    'collection'?: any;
}
/**
 *
 * @export
 * @interface SyncDataResponse
 */
export interface SyncDataResponse {
    /**
     * The Service ID for the linked cluster.
     * @type {any}
     * @memberof SyncDataResponse
     */
    'clusterId'?: any;
    /**
     * The name of the linked cluster
     * @type {any}
     * @memberof SyncDataResponse
     */
    'clusterName'?: any;
    /**
     * The service type of the linked cluster (\"atlas\" by default)
     * @type {any}
     * @memberof SyncDataResponse
     */
    'clusterType'?: any;
    /**
     *
     * @type {SyncDataResponseFlexibleSync}
     * @memberof SyncDataResponse
     */
    'flexible_sync'?: SyncDataResponseFlexibleSync;
    /**
     * The name of the App\'s Atlas Project.
     * @type {any}
     * @memberof SyncDataResponse
     */
    'groupName'?: any;
    /**
     * The name of the App\'s Atlas Organization.
     * @type {any}
     * @memberof SyncDataResponse
     */
    'orgName'?: any;
    /**
     *
     * @type {any}
     * @memberof SyncDataResponse
     */
    'readPreference'?: SyncDataResponseReadPreferenceEnum;
    /**
     * If true, clients may [connect to the app over the MongoDB Wire Protocol](https://www.mongodb.com/docs/atlas/app-services/mongodb/wire-protocol/#connect-over-the-wire-protocol).
     * @type {any}
     * @memberof SyncDataResponse
     */
    'wireProtocolEnabled'?: any;
}
export declare const SyncDataResponseReadPreferenceEnum: {
    readonly Primary: "primary";
    readonly PrimaryPreferred: "primaryPreferred";
    readonly Secondary: "secondary";
    readonly SecondaryPreferred: "secondaryPreferred";
    readonly Nearest: "nearest";
};
export type SyncDataResponseReadPreferenceEnum = typeof SyncDataResponseReadPreferenceEnum[keyof typeof SyncDataResponseReadPreferenceEnum];
/**
 *
 * @export
 * @interface SyncDataResponseFlexibleSync
 */
export interface SyncDataResponseFlexibleSync {
    /**
     * The state of the sync service (\"enabled\", \"disabled\", or empty if Sync is not configured).
     * @type {any}
     * @memberof SyncDataResponseFlexibleSync
     */
    'state'?: any;
    /**
     * An array of  [queryable field](https://www.mongodb.com/docs/atlas/app-services/sync/configure/sync-settings/#queryable-fields)  names on **any collection**.
     * @type {any}
     * @memberof SyncDataResponseFlexibleSync
     */
    'queryable_fields_names'?: any;
    /**
     * An array of  [queryable field](https://www.mongodb.com/docs/atlas/app-services/sync/configure/sync-settings/#queryable-fields)  names on the specified collection.
     * @type {{ [key: string]: { [key: string]: any; }; }}
     * @memberof SyncDataResponseFlexibleSync
     */
    'collection_queryable_fields_names'?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * The version of the queryable field.
     * @type {any}
     * @memberof SyncDataResponseFlexibleSync
     */
    'queryable_fields_version'?: any;
    /**
     * **Deprecated**
     * @type {any}
     * @memberof SyncDataResponseFlexibleSync
     */
    'permissions'?: any;
    /**
     * The last time Sync was disabled, represented by the number of seconds since the UNIX epoch.
     * @type {any}
     * @memberof SyncDataResponseFlexibleSync
     */
    'last_disabled'?: any;
    /**
     * The number of days the client can be offline before a client  [reset](https://www.mongodb.com/docs/atlas/app-services/sync/error-handling/client-resets/)  is required.
     * @type {any}
     * @memberof SyncDataResponseFlexibleSync
     */
    'client_max_offline_days'?: any;
    /**
     * Specifies whether the  [client reset mode](https://www.mongodb.com/docs/atlas/app-services/sync/error-handling/client-resets/#recover-unsynced-changes)  is disabled. By default, client reset mode is enabled and this value is **false**.
     * @type {any}
     * @memberof SyncDataResponseFlexibleSync
     */
    'is_recovery_mode_disabled'?: any;
}
/**
 *
 * @export
 * @interface SyncSession
 */
export interface SyncSession {
    /**
     * The current subscription queries for this Device Sync session. This object maps object type names to the query for that type.
     * @type {any}
     * @memberof SyncSession
     */
    'sync_query'?: any;
    /**
     * Usage metrics for the current Device Sync session.
     * @type {any}
     * @memberof SyncSession
     */
    'sync_session_metrics'?: any;
}
/**
 * **THIRD-PARTY SERVICES ARE DEPRECATED**  See [Third-Party Services](https://www.mongodb.com/docs/atlas/app-services/reference/services/) for more information.
 * @export
 * @interface ThirdPartyService
 */
export interface ThirdPartyService {
    /**
     * A unique ID for the third-party service.
     * @type {any}
     * @memberof ThirdPartyService
     */
    '_id'?: any;
    /**
     * The third-party service name.
     * @type {any}
     * @memberof ThirdPartyService
     */
    'name'?: any;
    /**
     * The type of third party service.
     * @type {any}
     * @memberof ThirdPartyService
     */
    'type'?: ThirdPartyServiceTypeEnum;
    /**
     *
     * @type {any}
     * @memberof ThirdPartyService
     */
    'version'?: any;
}
export declare const ThirdPartyServiceTypeEnum: {
    readonly Aws: "aws";
    readonly Twilio: "twilio";
    readonly Github: "github";
    readonly Gcm: "gcm";
};
export type ThirdPartyServiceTypeEnum = typeof ThirdPartyServiceTypeEnum[keyof typeof ThirdPartyServiceTypeEnum];
/**
 * [Deprecated] A rule for a third-party service.
 * @export
 * @interface ThirdPartyServiceRule
 */
export interface ThirdPartyServiceRule {
    /**
     *
     * @type {any}
     * @memberof ThirdPartyServiceRule
     */
    'name': any;
    /**
     *
     * @type {any}
     * @memberof ThirdPartyServiceRule
     */
    'actions'?: any;
    /**
     *
     * @type {any}
     * @memberof ThirdPartyServiceRule
     */
    'when': any;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     * The unique user account ID
     * @type {any}
     * @memberof User
     */
    '_id'?: any;
    /**
     * A list of authentication provider identities associated with the user account.
     * @type {any}
     * @memberof User
     */
    'identities'?: any;
    /**
     * The user type. Most users are `normal` and represent a specific human user. Users created through the `api-key` provider have the type `server` because they are typically used for programmatic access from a server.
     * @type {any}
     * @memberof User
     */
    'type'?: UserTypeEnum;
    /**
     * The date and time that the user account was created. Represented by the number of seconds since the UNIX epoch.
     * @type {any}
     * @memberof User
     */
    'creation_date'?: any;
    /**
     * The date and time that the user account last logged in or authenticated a request. Represented by the number of seconds since the UNIX epoch.
     * @type {any}
     * @memberof User
     */
    'last_authentication_date'?: any;
    /**
     * If `true`, the user account is inactive and cannot login or interact with App Services.
     * @type {any}
     * @memberof User
     */
    'disabled'?: any;
    /**
     * Metadata that describes the user. This field combines the data for all authentication identities associated with the user. The exact field names and values depend on which authentication providers the user has authenticated with.  For example, if a user has linked an email/password account with their Google account, this object might contain their `email` as well as metadata fields from Google like `name` and `picture`.
     * @type {any}
     * @memberof User
     */
    'data'?: any;
}
export declare const UserTypeEnum: {
    readonly Normal: "normal";
    readonly Server: "server";
};
export type UserTypeEnum = typeof UserTypeEnum[keyof typeof UserTypeEnum];
/**
 * An authenticated identity from an authentication provider. This represents the user account within an individual auth provider and maps the account to external authentication systems.
 * @export
 * @interface UserIdentity
 */
export interface UserIdentity {
    /**
     *
     * @type {any}
     * @memberof UserIdentity
     */
    'id'?: any;
    /**
     *
     * @type {ProviderType}
     * @memberof UserIdentity
     */
    'provider_type'?: ProviderType;
    /**
     *
     * @type {any}
     * @memberof UserIdentity
     */
    'provider_id'?: any;
}
/**
 *
 * @export
 * @interface Value
 */
export interface Value {
    /**
     *
     * @type {any}
     * @memberof Value
     */
    '_id'?: any;
    /**
     *
     * @type {any}
     * @memberof Value
     */
    'name'?: any;
    /**
     *
     * @type {any}
     * @memberof Value
     */
    'private'?: any;
    /**
     *
     * @type {any}
     * @memberof Value
     */
    'value'?: any;
}
/**
 *
 * @export
 * @interface ValueSummary
 */
export interface ValueSummary {
    /**
     *
     * @type {any}
     * @memberof ValueSummary
     */
    '_id'?: any;
    /**
     *
     * @type {any}
     * @memberof ValueSummary
     */
    'name'?: any;
    /**
     *
     * @type {any}
     * @memberof ValueSummary
     */
    'private'?: any;
}
/**
 * AdminApi - axios parameter creator
 * @export
 */
export declare const AdminApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Obtain a session access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateSession: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a session access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteSession: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Authenticate as an App Services administrator using an Atlas programmatic API key pair. To learn more, see [Get An Admin API Session Access Token](#get-an-admin-api-session-access-token).
     * @summary Authenticate as an App Services administrator
     * @param {ProviderType} provider The authentication provider to use.
     * @param {AdminLoginRequest} adminLoginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminLogin: (provider: ProviderType, adminLoginRequest: AdminLoginRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List App Services Admin Auth Providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAdminAuthProviders: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get information about the currently logged in user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAdminProfile: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AdminApi - functional programming interface
 * @export
 */
export declare const AdminApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Obtain a session access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateSession(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminCreateSession201Response>>;
    /**
     *
     * @summary Delete a session access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteSession(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Authenticate as an App Services administrator using an Atlas programmatic API key pair. To learn more, see [Get An Admin API Session Access Token](#get-an-admin-api-session-access-token).
     * @summary Authenticate as an App Services administrator
     * @param {ProviderType} provider The authentication provider to use.
     * @param {AdminLoginRequest} adminLoginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminLogin(provider: ProviderType, adminLoginRequest: AdminLoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminLogin200Response>>;
    /**
     *
     * @summary List App Services Admin Auth Providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAdminAuthProviders(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Get information about the currently logged in user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAdminProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminUser>>;
};
/**
 * AdminApi - factory interface
 * @export
 */
export declare const AdminApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Obtain a session access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateSession(options?: any): AxiosPromise<AdminCreateSession201Response>;
    /**
     *
     * @summary Delete a session access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteSession(options?: any): AxiosPromise<void>;
    /**
     * Authenticate as an App Services administrator using an Atlas programmatic API key pair. To learn more, see [Get An Admin API Session Access Token](#get-an-admin-api-session-access-token).
     * @summary Authenticate as an App Services administrator
     * @param {ProviderType} provider The authentication provider to use.
     * @param {AdminLoginRequest} adminLoginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminLogin(provider: ProviderType, adminLoginRequest: AdminLoginRequest, options?: any): AxiosPromise<AdminLogin200Response>;
    /**
     *
     * @summary List App Services Admin Auth Providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAdminAuthProviders(options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Get information about the currently logged in user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAdminProfile(options?: any): AxiosPromise<AdminUser>;
};
/**
 * AdminApi - interface
 * @export
 * @interface AdminApi
 */
export interface AdminApiInterface {
    /**
     *
     * @summary Obtain a session access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminCreateSession(options?: AxiosRequestConfig): AxiosPromise<AdminCreateSession201Response>;
    /**
     *
     * @summary Delete a session access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminDeleteSession(options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Authenticate as an App Services administrator using an Atlas programmatic API key pair. To learn more, see [Get An Admin API Session Access Token](#get-an-admin-api-session-access-token).
     * @summary Authenticate as an App Services administrator
     * @param {ProviderType} provider The authentication provider to use.
     * @param {AdminLoginRequest} adminLoginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminLogin(provider: ProviderType, adminLoginRequest: AdminLoginRequest, options?: AxiosRequestConfig): AxiosPromise<AdminLogin200Response>;
    /**
     *
     * @summary List App Services Admin Auth Providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    getAdminAuthProviders(options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     *
     * @summary Get information about the currently logged in user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    getAdminProfile(options?: AxiosRequestConfig): AxiosPromise<AdminUser>;
}
/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export declare class AdminApi extends BaseAPI implements AdminApiInterface {
    /**
     *
     * @summary Obtain a session access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    adminCreateSession(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AdminCreateSession201Response, any>>;
    /**
     *
     * @summary Delete a session access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    adminDeleteSession(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Authenticate as an App Services administrator using an Atlas programmatic API key pair. To learn more, see [Get An Admin API Session Access Token](#get-an-admin-api-session-access-token).
     * @summary Authenticate as an App Services administrator
     * @param {ProviderType} provider The authentication provider to use.
     * @param {AdminLoginRequest} adminLoginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    adminLogin(provider: ProviderType, adminLoginRequest: AdminLoginRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AdminLogin200Response, any>>;
    /**
     *
     * @summary List App Services Admin Auth Providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getAdminAuthProviders(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Get information about the currently logged in user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getAdminProfile(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AdminUser, any>>;
}
/**
 * ApikeysApi - axios parameter creator
 * @export
 */
export declare const ApikeysApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Create a new API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminCreateApiKeyRequest} adminCreateApiKeyRequest The API key to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateApiKey: (groupId: any, appId: any, adminCreateApiKeyRequest: AdminCreateApiKeyRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Delete an API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteApiKey: (groupId: any, appId: any, apiKeyId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Disable an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Disable an API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDisableApiKey: (groupId: any, appId: any, apiKeyId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Enable an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Enable an API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminEnableApiKey: (groupId: any, appId: any, apiKeyId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve information about an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Retrieve information about an API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetApiKey: (groupId: any, appId: any, apiKeyId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List [API keys](https://www.mongodb.com/docs/realm/authentication/api-key/) associated with a Atlas App Services App.
     * @summary List API keys
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListApiKeys: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ApikeysApi - functional programming interface
 * @export
 */
export declare const ApikeysApiFp: (configuration?: Configuration) => {
    /**
     * Create a new [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Create a new API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminCreateApiKeyRequest} adminCreateApiKeyRequest The API key to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateApiKey(groupId: any, appId: any, adminCreateApiKeyRequest: AdminCreateApiKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKey>>;
    /**
     * Delete an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Delete an API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteApiKey(groupId: any, appId: any, apiKeyId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Disable an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Disable an API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDisableApiKey(groupId: any, appId: any, apiKeyId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Enable an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Enable an API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminEnableApiKey(groupId: any, appId: any, apiKeyId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve information about an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Retrieve information about an API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetApiKey(groupId: any, appId: any, apiKeyId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeyResponse>>;
    /**
     * List [API keys](https://www.mongodb.com/docs/realm/authentication/api-key/) associated with a Atlas App Services App.
     * @summary List API keys
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListApiKeys(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * ApikeysApi - factory interface
 * @export
 */
export declare const ApikeysApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Create a new API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminCreateApiKeyRequest} adminCreateApiKeyRequest The API key to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateApiKey(groupId: any, appId: any, adminCreateApiKeyRequest: AdminCreateApiKeyRequest, options?: any): AxiosPromise<ApiKey>;
    /**
     * Delete an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Delete an API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteApiKey(groupId: any, appId: any, apiKeyId: any, options?: any): AxiosPromise<void>;
    /**
     * Disable an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Disable an API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDisableApiKey(groupId: any, appId: any, apiKeyId: any, options?: any): AxiosPromise<void>;
    /**
     * Enable an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Enable an API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminEnableApiKey(groupId: any, appId: any, apiKeyId: any, options?: any): AxiosPromise<void>;
    /**
     * Retrieve information about an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Retrieve information about an API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetApiKey(groupId: any, appId: any, apiKeyId: any, options?: any): AxiosPromise<ApiKeyResponse>;
    /**
     * List [API keys](https://www.mongodb.com/docs/realm/authentication/api-key/) associated with a Atlas App Services App.
     * @summary List API keys
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListApiKeys(groupId: any, appId: any, options?: any): AxiosPromise<any>;
};
/**
 * ApikeysApi - interface
 * @export
 * @interface ApikeysApi
 */
export interface ApikeysApiInterface {
    /**
     * Create a new [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Create a new API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminCreateApiKeyRequest} adminCreateApiKeyRequest The API key to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApikeysApiInterface
     */
    adminCreateApiKey(groupId: any, appId: any, adminCreateApiKeyRequest: AdminCreateApiKeyRequest, options?: AxiosRequestConfig): AxiosPromise<ApiKey>;
    /**
     * Delete an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Delete an API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApikeysApiInterface
     */
    adminDeleteApiKey(groupId: any, appId: any, apiKeyId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Disable an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Disable an API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApikeysApiInterface
     */
    adminDisableApiKey(groupId: any, appId: any, apiKeyId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Enable an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Enable an API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApikeysApiInterface
     */
    adminEnableApiKey(groupId: any, appId: any, apiKeyId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Retrieve information about an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Retrieve information about an API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApikeysApiInterface
     */
    adminGetApiKey(groupId: any, appId: any, apiKeyId: any, options?: AxiosRequestConfig): AxiosPromise<ApiKeyResponse>;
    /**
     * List [API keys](https://www.mongodb.com/docs/realm/authentication/api-key/) associated with a Atlas App Services App.
     * @summary List API keys
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApikeysApiInterface
     */
    adminListApiKeys(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
}
/**
 * ApikeysApi - object-oriented interface
 * @export
 * @class ApikeysApi
 * @extends {BaseAPI}
 */
export declare class ApikeysApi extends BaseAPI implements ApikeysApiInterface {
    /**
     * Create a new [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Create a new API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminCreateApiKeyRequest} adminCreateApiKeyRequest The API key to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApikeysApi
     */
    adminCreateApiKey(groupId: any, appId: any, adminCreateApiKeyRequest: AdminCreateApiKeyRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ApiKey, any>>;
    /**
     * Delete an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Delete an API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApikeysApi
     */
    adminDeleteApiKey(groupId: any, appId: any, apiKeyId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Disable an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Disable an API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApikeysApi
     */
    adminDisableApiKey(groupId: any, appId: any, apiKeyId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Enable an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Enable an API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApikeysApi
     */
    adminEnableApiKey(groupId: any, appId: any, apiKeyId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Retrieve information about an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Retrieve information about an API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApikeysApi
     */
    adminGetApiKey(groupId: any, appId: any, apiKeyId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ApiKeyResponse, any>>;
    /**
     * List [API keys](https://www.mongodb.com/docs/realm/authentication/api-key/) associated with a Atlas App Services App.
     * @summary List API keys
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApikeysApi
     */
    adminListApiKeys(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
/**
 * AppsApi - axios parameter creator
 * @export
 */
export declare const AppsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a new app
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} body The application to create.
     * @param {any} [defaults] Whether or not to create a default application.
     * @param {AdminCreateApplicationProductEnum} [product] The App\&#39;s product type. Apps use the &#x60;standard&#x60; product type by default. For most apps, you do not need to specify a &#x60;product&#x60; at all, or should specify &#x60;standard&#x60;.  The &#x60;atlas&#x60; and &#x60;data-api&#x60; product types represent special, apps for [Atlas Triggers](https://docs.mongodb.com/atlas/triggers) and [Atlas Data API](https://docs.mongodb.com/atlas/api/data-api/) that you can access through the Atlas UI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateApplication: (groupId: any, body: any, defaults?: any, product?: AdminCreateApplicationProductEnum, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete an app
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteApplication: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * [Export](https://www.mongodb.com/docs/atlas/app-services/apps/export/) an application as a zip file.
     * @summary Export an app as a zip file
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [deployment] The &#x60;_id&#x60; of a specific deployment to export. If not specified, export the latest deployment.
     * @param {any} [sourceControl] If &#x60;true&#x60;, the exported directory is suitable for automatic deployment from GitHub or other source control.  Cannot be used with the &#x60;template&#x60; query parameter.
     * @param {any} [template] If &#x60;true&#x60;, the exported directory does not include any identifiers or other data that would tie the app to a specific deployment instance.  Cannot be used with the &#x60;source_control&#x60; query parameter.
     * @param {any} [version] The configuration file schema version to export. This value corresponds to &#x60;config_version&#x60; in &#x60;realm_config.json&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminExportApplication: (groupId: any, appId: any, deployment?: any, sourceControl?: any, template?: any, version?: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get an app
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetApplication: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all App Services Apps within an Atlas [project/group](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @summary List all App Services Apps in an Atlas project/group
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {AdminListApplicationsProductEnum} [product] One or more specific App Services product types. If specified, this endpoint only returns Apps of the specified product type(s).  Most apps use the &#x60;standard&#x60; product type, which this endpoint returns by default. The &#x60;atlas&#x60; and &#x60;data-api&#x60; product types represent special apps for [Atlas Triggers](https://docs.mongodb.com/atlas/triggers) and [Atlas Data API](https://docs.mongodb.com/atlas/api/data-api/) that you can access through the Atlas UI.  You can specify multiple product types as a comma-separated list:  &#x60;&#x60;&#x60; /groups/{groupId}/apps?product&#x3D;atlas,data-api &#x60;&#x60;&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListApplications: (groupId: any, product?: AdminListApplicationsProductEnum, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AppsApi - functional programming interface
 * @export
 */
export declare const AppsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a new app
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} body The application to create.
     * @param {any} [defaults] Whether or not to create a default application.
     * @param {AdminCreateApplicationProductEnum} [product] The App\&#39;s product type. Apps use the &#x60;standard&#x60; product type by default. For most apps, you do not need to specify a &#x60;product&#x60; at all, or should specify &#x60;standard&#x60;.  The &#x60;atlas&#x60; and &#x60;data-api&#x60; product types represent special, apps for [Atlas Triggers](https://docs.mongodb.com/atlas/triggers) and [Atlas Data API](https://docs.mongodb.com/atlas/api/data-api/) that you can access through the Atlas UI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateApplication(groupId: any, body: any, defaults?: any, product?: AdminCreateApplicationProductEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Delete an app
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteApplication(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * [Export](https://www.mongodb.com/docs/atlas/app-services/apps/export/) an application as a zip file.
     * @summary Export an app as a zip file
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [deployment] The &#x60;_id&#x60; of a specific deployment to export. If not specified, export the latest deployment.
     * @param {any} [sourceControl] If &#x60;true&#x60;, the exported directory is suitable for automatic deployment from GitHub or other source control.  Cannot be used with the &#x60;template&#x60; query parameter.
     * @param {any} [template] If &#x60;true&#x60;, the exported directory does not include any identifiers or other data that would tie the app to a specific deployment instance.  Cannot be used with the &#x60;source_control&#x60; query parameter.
     * @param {any} [version] The configuration file schema version to export. This value corresponds to &#x60;config_version&#x60; in &#x60;realm_config.json&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminExportApplication(groupId: any, appId: any, deployment?: any, sourceControl?: any, template?: any, version?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get an app
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetApplication(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * List all App Services Apps within an Atlas [project/group](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @summary List all App Services Apps in an Atlas project/group
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {AdminListApplicationsProductEnum} [product] One or more specific App Services product types. If specified, this endpoint only returns Apps of the specified product type(s).  Most apps use the &#x60;standard&#x60; product type, which this endpoint returns by default. The &#x60;atlas&#x60; and &#x60;data-api&#x60; product types represent special apps for [Atlas Triggers](https://docs.mongodb.com/atlas/triggers) and [Atlas Data API](https://docs.mongodb.com/atlas/api/data-api/) that you can access through the Atlas UI.  You can specify multiple product types as a comma-separated list:  &#x60;&#x60;&#x60; /groups/{groupId}/apps?product&#x3D;atlas,data-api &#x60;&#x60;&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListApplications(groupId: any, product?: AdminListApplicationsProductEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * AppsApi - factory interface
 * @export
 */
export declare const AppsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a new app
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} body The application to create.
     * @param {any} [defaults] Whether or not to create a default application.
     * @param {AdminCreateApplicationProductEnum} [product] The App\&#39;s product type. Apps use the &#x60;standard&#x60; product type by default. For most apps, you do not need to specify a &#x60;product&#x60; at all, or should specify &#x60;standard&#x60;.  The &#x60;atlas&#x60; and &#x60;data-api&#x60; product types represent special, apps for [Atlas Triggers](https://docs.mongodb.com/atlas/triggers) and [Atlas Data API](https://docs.mongodb.com/atlas/api/data-api/) that you can access through the Atlas UI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateApplication(groupId: any, body: any, defaults?: any, product?: AdminCreateApplicationProductEnum, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Delete an app
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteApplication(groupId: any, appId: any, options?: any): AxiosPromise<void>;
    /**
     * [Export](https://www.mongodb.com/docs/atlas/app-services/apps/export/) an application as a zip file.
     * @summary Export an app as a zip file
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [deployment] The &#x60;_id&#x60; of a specific deployment to export. If not specified, export the latest deployment.
     * @param {any} [sourceControl] If &#x60;true&#x60;, the exported directory is suitable for automatic deployment from GitHub or other source control.  Cannot be used with the &#x60;template&#x60; query parameter.
     * @param {any} [template] If &#x60;true&#x60;, the exported directory does not include any identifiers or other data that would tie the app to a specific deployment instance.  Cannot be used with the &#x60;source_control&#x60; query parameter.
     * @param {any} [version] The configuration file schema version to export. This value corresponds to &#x60;config_version&#x60; in &#x60;realm_config.json&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminExportApplication(groupId: any, appId: any, deployment?: any, sourceControl?: any, template?: any, version?: any, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Get an app
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetApplication(groupId: any, appId: any, options?: any): AxiosPromise<any>;
    /**
     * List all App Services Apps within an Atlas [project/group](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @summary List all App Services Apps in an Atlas project/group
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {AdminListApplicationsProductEnum} [product] One or more specific App Services product types. If specified, this endpoint only returns Apps of the specified product type(s).  Most apps use the &#x60;standard&#x60; product type, which this endpoint returns by default. The &#x60;atlas&#x60; and &#x60;data-api&#x60; product types represent special apps for [Atlas Triggers](https://docs.mongodb.com/atlas/triggers) and [Atlas Data API](https://docs.mongodb.com/atlas/api/data-api/) that you can access through the Atlas UI.  You can specify multiple product types as a comma-separated list:  &#x60;&#x60;&#x60; /groups/{groupId}/apps?product&#x3D;atlas,data-api &#x60;&#x60;&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListApplications(groupId: any, product?: AdminListApplicationsProductEnum, options?: any): AxiosPromise<any>;
};
/**
 * AppsApi - interface
 * @export
 * @interface AppsApi
 */
export interface AppsApiInterface {
    /**
     *
     * @summary Create a new app
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} body The application to create.
     * @param {any} [defaults] Whether or not to create a default application.
     * @param {AdminCreateApplicationProductEnum} [product] The App\&#39;s product type. Apps use the &#x60;standard&#x60; product type by default. For most apps, you do not need to specify a &#x60;product&#x60; at all, or should specify &#x60;standard&#x60;.  The &#x60;atlas&#x60; and &#x60;data-api&#x60; product types represent special, apps for [Atlas Triggers](https://docs.mongodb.com/atlas/triggers) and [Atlas Data API](https://docs.mongodb.com/atlas/api/data-api/) that you can access through the Atlas UI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    adminCreateApplication(groupId: any, body: any, defaults?: any, product?: AdminCreateApplicationProductEnum, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     *
     * @summary Delete an app
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    adminDeleteApplication(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * [Export](https://www.mongodb.com/docs/atlas/app-services/apps/export/) an application as a zip file.
     * @summary Export an app as a zip file
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [deployment] The &#x60;_id&#x60; of a specific deployment to export. If not specified, export the latest deployment.
     * @param {any} [sourceControl] If &#x60;true&#x60;, the exported directory is suitable for automatic deployment from GitHub or other source control.  Cannot be used with the &#x60;template&#x60; query parameter.
     * @param {any} [template] If &#x60;true&#x60;, the exported directory does not include any identifiers or other data that would tie the app to a specific deployment instance.  Cannot be used with the &#x60;source_control&#x60; query parameter.
     * @param {any} [version] The configuration file schema version to export. This value corresponds to &#x60;config_version&#x60; in &#x60;realm_config.json&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    adminExportApplication(groupId: any, appId: any, deployment?: any, sourceControl?: any, template?: any, version?: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get an app
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    adminGetApplication(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * List all App Services Apps within an Atlas [project/group](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @summary List all App Services Apps in an Atlas project/group
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {AdminListApplicationsProductEnum} [product] One or more specific App Services product types. If specified, this endpoint only returns Apps of the specified product type(s).  Most apps use the &#x60;standard&#x60; product type, which this endpoint returns by default. The &#x60;atlas&#x60; and &#x60;data-api&#x60; product types represent special apps for [Atlas Triggers](https://docs.mongodb.com/atlas/triggers) and [Atlas Data API](https://docs.mongodb.com/atlas/api/data-api/) that you can access through the Atlas UI.  You can specify multiple product types as a comma-separated list:  &#x60;&#x60;&#x60; /groups/{groupId}/apps?product&#x3D;atlas,data-api &#x60;&#x60;&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    adminListApplications(groupId: any, product?: AdminListApplicationsProductEnum, options?: AxiosRequestConfig): AxiosPromise<any>;
}
/**
 * AppsApi - object-oriented interface
 * @export
 * @class AppsApi
 * @extends {BaseAPI}
 */
export declare class AppsApi extends BaseAPI implements AppsApiInterface {
    /**
     *
     * @summary Create a new app
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} body The application to create.
     * @param {any} [defaults] Whether or not to create a default application.
     * @param {AdminCreateApplicationProductEnum} [product] The App\&#39;s product type. Apps use the &#x60;standard&#x60; product type by default. For most apps, you do not need to specify a &#x60;product&#x60; at all, or should specify &#x60;standard&#x60;.  The &#x60;atlas&#x60; and &#x60;data-api&#x60; product types represent special, apps for [Atlas Triggers](https://docs.mongodb.com/atlas/triggers) and [Atlas Data API](https://docs.mongodb.com/atlas/api/data-api/) that you can access through the Atlas UI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApi
     */
    adminCreateApplication(groupId: any, body: any, defaults?: any, product?: AdminCreateApplicationProductEnum, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Delete an app
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApi
     */
    adminDeleteApplication(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * [Export](https://www.mongodb.com/docs/atlas/app-services/apps/export/) an application as a zip file.
     * @summary Export an app as a zip file
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [deployment] The &#x60;_id&#x60; of a specific deployment to export. If not specified, export the latest deployment.
     * @param {any} [sourceControl] If &#x60;true&#x60;, the exported directory is suitable for automatic deployment from GitHub or other source control.  Cannot be used with the &#x60;template&#x60; query parameter.
     * @param {any} [template] If &#x60;true&#x60;, the exported directory does not include any identifiers or other data that would tie the app to a specific deployment instance.  Cannot be used with the &#x60;source_control&#x60; query parameter.
     * @param {any} [version] The configuration file schema version to export. This value corresponds to &#x60;config_version&#x60; in &#x60;realm_config.json&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApi
     */
    adminExportApplication(groupId: any, appId: any, deployment?: any, sourceControl?: any, template?: any, version?: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get an app
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApi
     */
    adminGetApplication(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * List all App Services Apps within an Atlas [project/group](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @summary List all App Services Apps in an Atlas project/group
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {AdminListApplicationsProductEnum} [product] One or more specific App Services product types. If specified, this endpoint only returns Apps of the specified product type(s).  Most apps use the &#x60;standard&#x60; product type, which this endpoint returns by default. The &#x60;atlas&#x60; and &#x60;data-api&#x60; product types represent special apps for [Atlas Triggers](https://docs.mongodb.com/atlas/triggers) and [Atlas Data API](https://docs.mongodb.com/atlas/api/data-api/) that you can access through the Atlas UI.  You can specify multiple product types as a comma-separated list:  &#x60;&#x60;&#x60; /groups/{groupId}/apps?product&#x3D;atlas,data-api &#x60;&#x60;&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApi
     */
    adminListApplications(groupId: any, product?: AdminListApplicationsProductEnum, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
/**
 * @export
 */
export declare const AdminCreateApplicationProductEnum: {
    readonly Standard: "standard";
    readonly Atlas: "atlas";
    readonly DataApi: "data-api";
};
export type AdminCreateApplicationProductEnum = typeof AdminCreateApplicationProductEnum[keyof typeof AdminCreateApplicationProductEnum];
/**
 * @export
 */
export declare const AdminListApplicationsProductEnum: {
    readonly Standard: "standard";
    readonly Atlas: "atlas";
    readonly DataApi: "data-api";
};
export type AdminListApplicationsProductEnum = typeof AdminListApplicationsProductEnum[keyof typeof AdminListApplicationsProductEnum];
/**
 * AuthprovidersApi - axios parameter creator
 * @export
 */
export declare const AuthprovidersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Create an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateAuthProvider: (groupId: any, appId: any, body: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Delete an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteAuthProvider: (groupId: any, appId: any, providerId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Disable an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Disable an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDisableAuthProvider: (groupId: any, appId: any, providerId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Enable an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Enable an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminEnableAuthProvider: (groupId: any, appId: any, providerId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve information about one of an application\'s [authentication providers](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Retrieve information about authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetAuthProvider: (groupId: any, appId: any, providerId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List [authentication providers](https://www.mongodb.com/docs/realm/authentication/) within a Atlas App Services App.
     * @summary List authentication providers in a Atlas App Services App
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListAuthProviders: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Update an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateAuthProvider: (groupId: any, appId: any, providerId: any, body: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthprovidersApi - functional programming interface
 * @export
 */
export declare const AuthprovidersApiFp: (configuration?: Configuration) => {
    /**
     * Create an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Create an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateAuthProvider(groupId: any, appId: any, body: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Delete an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Delete an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteAuthProvider(groupId: any, appId: any, providerId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Disable an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Disable an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDisableAuthProvider(groupId: any, appId: any, providerId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Enable an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Enable an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminEnableAuthProvider(groupId: any, appId: any, providerId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve information about one of an application\'s [authentication providers](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Retrieve information about authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetAuthProvider(groupId: any, appId: any, providerId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * List [authentication providers](https://www.mongodb.com/docs/realm/authentication/) within a Atlas App Services App.
     * @summary List authentication providers in a Atlas App Services App
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListAuthProviders(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Update an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Update an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateAuthProvider(groupId: any, appId: any, providerId: any, body: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * AuthprovidersApi - factory interface
 * @export
 */
export declare const AuthprovidersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Create an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateAuthProvider(groupId: any, appId: any, body: any, options?: any): AxiosPromise<any>;
    /**
     * Delete an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Delete an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteAuthProvider(groupId: any, appId: any, providerId: any, options?: any): AxiosPromise<void>;
    /**
     * Disable an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Disable an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDisableAuthProvider(groupId: any, appId: any, providerId: any, options?: any): AxiosPromise<void>;
    /**
     * Enable an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Enable an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminEnableAuthProvider(groupId: any, appId: any, providerId: any, options?: any): AxiosPromise<void>;
    /**
     * Retrieve information about one of an application\'s [authentication providers](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Retrieve information about authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetAuthProvider(groupId: any, appId: any, providerId: any, options?: any): AxiosPromise<any>;
    /**
     * List [authentication providers](https://www.mongodb.com/docs/realm/authentication/) within a Atlas App Services App.
     * @summary List authentication providers in a Atlas App Services App
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListAuthProviders(groupId: any, appId: any, options?: any): AxiosPromise<any>;
    /**
     * Update an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Update an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateAuthProvider(groupId: any, appId: any, providerId: any, body: any, options?: any): AxiosPromise<void>;
};
/**
 * AuthprovidersApi - interface
 * @export
 * @interface AuthprovidersApi
 */
export interface AuthprovidersApiInterface {
    /**
     * Create an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Create an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthprovidersApiInterface
     */
    adminCreateAuthProvider(groupId: any, appId: any, body: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Delete an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Delete an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthprovidersApiInterface
     */
    adminDeleteAuthProvider(groupId: any, appId: any, providerId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Disable an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Disable an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthprovidersApiInterface
     */
    adminDisableAuthProvider(groupId: any, appId: any, providerId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Enable an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Enable an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthprovidersApiInterface
     */
    adminEnableAuthProvider(groupId: any, appId: any, providerId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Retrieve information about one of an application\'s [authentication providers](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Retrieve information about authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthprovidersApiInterface
     */
    adminGetAuthProvider(groupId: any, appId: any, providerId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * List [authentication providers](https://www.mongodb.com/docs/realm/authentication/) within a Atlas App Services App.
     * @summary List authentication providers in a Atlas App Services App
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthprovidersApiInterface
     */
    adminListAuthProviders(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Update an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Update an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthprovidersApiInterface
     */
    adminUpdateAuthProvider(groupId: any, appId: any, providerId: any, body: any, options?: AxiosRequestConfig): AxiosPromise<void>;
}
/**
 * AuthprovidersApi - object-oriented interface
 * @export
 * @class AuthprovidersApi
 * @extends {BaseAPI}
 */
export declare class AuthprovidersApi extends BaseAPI implements AuthprovidersApiInterface {
    /**
     * Create an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Create an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthprovidersApi
     */
    adminCreateAuthProvider(groupId: any, appId: any, body: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Delete an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Delete an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthprovidersApi
     */
    adminDeleteAuthProvider(groupId: any, appId: any, providerId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Disable an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Disable an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthprovidersApi
     */
    adminDisableAuthProvider(groupId: any, appId: any, providerId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Enable an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Enable an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthprovidersApi
     */
    adminEnableAuthProvider(groupId: any, appId: any, providerId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Retrieve information about one of an application\'s [authentication providers](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Retrieve information about authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthprovidersApi
     */
    adminGetAuthProvider(groupId: any, appId: any, providerId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * List [authentication providers](https://www.mongodb.com/docs/realm/authentication/) within a Atlas App Services App.
     * @summary List authentication providers in a Atlas App Services App
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthprovidersApi
     */
    adminListAuthProviders(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Update an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Update an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthprovidersApi
     */
    adminUpdateAuthProvider(groupId: any, appId: any, providerId: any, body: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * BillingApi - axios parameter creator
 * @export
 */
export declare const BillingApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * List the request, compute, sync, data transfer, and memory usage of a specific app in a given period for [billing](https://www.mongodb.com/docs/realm/billing) purposes.
     * @summary List app billing usage
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [start] The ISO 8601 date and time of the start of the query period. Default is 00:00:00 UTC on the first day of the current month.
     * @param {any} [end] The ISO 8601 date and time of the end of the query period. Default is 23:59:59 UTC on the the last day of the current month.
     * @param {AdminAppMeasurementsGranularityEnum} [granularity] Specifies the granularity of the query period, either P31D (31 day) or PT1H (1 hour). Default is P31D.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminAppMeasurements: (groupId: any, appId: any, start?: any, end?: any, granularity?: AdminAppMeasurementsGranularityEnum, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List the request, compute, sync, and data transfer usage in a given period for [billing](https://www.mongodb.com/docs/realm/billing) purposes.
     * @summary List group billing usage in a given period
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} [start] The ISO 8601 date and time of the start of the query period. Default is 00:00:00 UTC on the first day of the current month.
     * @param {any} [end] The ISO 8601 date and time of the end of the query period. Default is 23:59:59 UTC on the the last day of the current month.
     * @param {AdminMeasurementsGranularityEnum} [granularity] Specifies the granularity of the query period, either P31D (31 day) or PT1H (1 hour). Default is P31D.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminMeasurements: (groupId: any, start?: any, end?: any, granularity?: AdminMeasurementsGranularityEnum, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BillingApi - functional programming interface
 * @export
 */
export declare const BillingApiFp: (configuration?: Configuration) => {
    /**
     * List the request, compute, sync, data transfer, and memory usage of a specific app in a given period for [billing](https://www.mongodb.com/docs/realm/billing) purposes.
     * @summary List app billing usage
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [start] The ISO 8601 date and time of the start of the query period. Default is 00:00:00 UTC on the first day of the current month.
     * @param {any} [end] The ISO 8601 date and time of the end of the query period. Default is 23:59:59 UTC on the the last day of the current month.
     * @param {AdminAppMeasurementsGranularityEnum} [granularity] Specifies the granularity of the query period, either P31D (31 day) or PT1H (1 hour). Default is P31D.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminAppMeasurements(groupId: any, appId: any, start?: any, end?: any, granularity?: AdminAppMeasurementsGranularityEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminAppMeasurements200Response>>;
    /**
     * List the request, compute, sync, and data transfer usage in a given period for [billing](https://www.mongodb.com/docs/realm/billing) purposes.
     * @summary List group billing usage in a given period
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} [start] The ISO 8601 date and time of the start of the query period. Default is 00:00:00 UTC on the first day of the current month.
     * @param {any} [end] The ISO 8601 date and time of the end of the query period. Default is 23:59:59 UTC on the the last day of the current month.
     * @param {AdminMeasurementsGranularityEnum} [granularity] Specifies the granularity of the query period, either P31D (31 day) or PT1H (1 hour). Default is P31D.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminMeasurements(groupId: any, start?: any, end?: any, granularity?: AdminMeasurementsGranularityEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminMeasurements200Response>>;
};
/**
 * BillingApi - factory interface
 * @export
 */
export declare const BillingApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * List the request, compute, sync, data transfer, and memory usage of a specific app in a given period for [billing](https://www.mongodb.com/docs/realm/billing) purposes.
     * @summary List app billing usage
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [start] The ISO 8601 date and time of the start of the query period. Default is 00:00:00 UTC on the first day of the current month.
     * @param {any} [end] The ISO 8601 date and time of the end of the query period. Default is 23:59:59 UTC on the the last day of the current month.
     * @param {AdminAppMeasurementsGranularityEnum} [granularity] Specifies the granularity of the query period, either P31D (31 day) or PT1H (1 hour). Default is P31D.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminAppMeasurements(groupId: any, appId: any, start?: any, end?: any, granularity?: AdminAppMeasurementsGranularityEnum, options?: any): AxiosPromise<AdminAppMeasurements200Response>;
    /**
     * List the request, compute, sync, and data transfer usage in a given period for [billing](https://www.mongodb.com/docs/realm/billing) purposes.
     * @summary List group billing usage in a given period
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} [start] The ISO 8601 date and time of the start of the query period. Default is 00:00:00 UTC on the first day of the current month.
     * @param {any} [end] The ISO 8601 date and time of the end of the query period. Default is 23:59:59 UTC on the the last day of the current month.
     * @param {AdminMeasurementsGranularityEnum} [granularity] Specifies the granularity of the query period, either P31D (31 day) or PT1H (1 hour). Default is P31D.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminMeasurements(groupId: any, start?: any, end?: any, granularity?: AdminMeasurementsGranularityEnum, options?: any): AxiosPromise<AdminMeasurements200Response>;
};
/**
 * BillingApi - interface
 * @export
 * @interface BillingApi
 */
export interface BillingApiInterface {
    /**
     * List the request, compute, sync, data transfer, and memory usage of a specific app in a given period for [billing](https://www.mongodb.com/docs/realm/billing) purposes.
     * @summary List app billing usage
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [start] The ISO 8601 date and time of the start of the query period. Default is 00:00:00 UTC on the first day of the current month.
     * @param {any} [end] The ISO 8601 date and time of the end of the query period. Default is 23:59:59 UTC on the the last day of the current month.
     * @param {AdminAppMeasurementsGranularityEnum} [granularity] Specifies the granularity of the query period, either P31D (31 day) or PT1H (1 hour). Default is P31D.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    adminAppMeasurements(groupId: any, appId: any, start?: any, end?: any, granularity?: AdminAppMeasurementsGranularityEnum, options?: AxiosRequestConfig): AxiosPromise<AdminAppMeasurements200Response>;
    /**
     * List the request, compute, sync, and data transfer usage in a given period for [billing](https://www.mongodb.com/docs/realm/billing) purposes.
     * @summary List group billing usage in a given period
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} [start] The ISO 8601 date and time of the start of the query period. Default is 00:00:00 UTC on the first day of the current month.
     * @param {any} [end] The ISO 8601 date and time of the end of the query period. Default is 23:59:59 UTC on the the last day of the current month.
     * @param {AdminMeasurementsGranularityEnum} [granularity] Specifies the granularity of the query period, either P31D (31 day) or PT1H (1 hour). Default is P31D.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    adminMeasurements(groupId: any, start?: any, end?: any, granularity?: AdminMeasurementsGranularityEnum, options?: AxiosRequestConfig): AxiosPromise<AdminMeasurements200Response>;
}
/**
 * BillingApi - object-oriented interface
 * @export
 * @class BillingApi
 * @extends {BaseAPI}
 */
export declare class BillingApi extends BaseAPI implements BillingApiInterface {
    /**
     * List the request, compute, sync, data transfer, and memory usage of a specific app in a given period for [billing](https://www.mongodb.com/docs/realm/billing) purposes.
     * @summary List app billing usage
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [start] The ISO 8601 date and time of the start of the query period. Default is 00:00:00 UTC on the first day of the current month.
     * @param {any} [end] The ISO 8601 date and time of the end of the query period. Default is 23:59:59 UTC on the the last day of the current month.
     * @param {AdminAppMeasurementsGranularityEnum} [granularity] Specifies the granularity of the query period, either P31D (31 day) or PT1H (1 hour). Default is P31D.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    adminAppMeasurements(groupId: any, appId: any, start?: any, end?: any, granularity?: AdminAppMeasurementsGranularityEnum, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AdminAppMeasurements200Response, any>>;
    /**
     * List the request, compute, sync, and data transfer usage in a given period for [billing](https://www.mongodb.com/docs/realm/billing) purposes.
     * @summary List group billing usage in a given period
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} [start] The ISO 8601 date and time of the start of the query period. Default is 00:00:00 UTC on the first day of the current month.
     * @param {any} [end] The ISO 8601 date and time of the end of the query period. Default is 23:59:59 UTC on the the last day of the current month.
     * @param {AdminMeasurementsGranularityEnum} [granularity] Specifies the granularity of the query period, either P31D (31 day) or PT1H (1 hour). Default is P31D.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    adminMeasurements(groupId: any, start?: any, end?: any, granularity?: AdminMeasurementsGranularityEnum, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AdminMeasurements200Response, any>>;
}
/**
 * @export
 */
export declare const AdminAppMeasurementsGranularityEnum: {
    readonly P31D: "P31D";
    readonly Pt1H: "PT1H";
};
export type AdminAppMeasurementsGranularityEnum = typeof AdminAppMeasurementsGranularityEnum[keyof typeof AdminAppMeasurementsGranularityEnum];
/**
 * @export
 */
export declare const AdminMeasurementsGranularityEnum: {
    readonly P31D: "P31D";
    readonly Pt1H: "PT1H";
};
export type AdminMeasurementsGranularityEnum = typeof AdminMeasurementsGranularityEnum[keyof typeof AdminMeasurementsGranularityEnum];
/**
 * CustomUserDataApi - axios parameter creator
 * @export
 */
export declare const CustomUserDataApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get the [Custom User Data](https://www.mongodb.com/docs/atlas/app-services/users/enable-custom-user-data/) configuration for an Atlas App Services App.
     * @summary Get the Custom User Data Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetCustomUserDataConfig: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Modify the [Custom User Data](https://www.mongodb.com/docs/atlas/app-services/users/enable-custom-user-data/) configuration for an Atlas App Services App.
     * @summary Configure Custom User Data
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {CustomUserDataConfig} [customUserDataConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminSetCustomUserDataConfig: (groupId: any, appId: any, customUserDataConfig?: CustomUserDataConfig, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CustomUserDataApi - functional programming interface
 * @export
 */
export declare const CustomUserDataApiFp: (configuration?: Configuration) => {
    /**
     * Get the [Custom User Data](https://www.mongodb.com/docs/atlas/app-services/users/enable-custom-user-data/) configuration for an Atlas App Services App.
     * @summary Get the Custom User Data Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetCustomUserDataConfig(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomUserDataConfig>>;
    /**
     * Modify the [Custom User Data](https://www.mongodb.com/docs/atlas/app-services/users/enable-custom-user-data/) configuration for an Atlas App Services App.
     * @summary Configure Custom User Data
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {CustomUserDataConfig} [customUserDataConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminSetCustomUserDataConfig(groupId: any, appId: any, customUserDataConfig?: CustomUserDataConfig, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * CustomUserDataApi - factory interface
 * @export
 */
export declare const CustomUserDataApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get the [Custom User Data](https://www.mongodb.com/docs/atlas/app-services/users/enable-custom-user-data/) configuration for an Atlas App Services App.
     * @summary Get the Custom User Data Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetCustomUserDataConfig(groupId: any, appId: any, options?: any): AxiosPromise<CustomUserDataConfig>;
    /**
     * Modify the [Custom User Data](https://www.mongodb.com/docs/atlas/app-services/users/enable-custom-user-data/) configuration for an Atlas App Services App.
     * @summary Configure Custom User Data
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {CustomUserDataConfig} [customUserDataConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminSetCustomUserDataConfig(groupId: any, appId: any, customUserDataConfig?: CustomUserDataConfig, options?: any): AxiosPromise<void>;
};
/**
 * CustomUserDataApi - interface
 * @export
 * @interface CustomUserDataApi
 */
export interface CustomUserDataApiInterface {
    /**
     * Get the [Custom User Data](https://www.mongodb.com/docs/atlas/app-services/users/enable-custom-user-data/) configuration for an Atlas App Services App.
     * @summary Get the Custom User Data Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomUserDataApiInterface
     */
    adminGetCustomUserDataConfig(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<CustomUserDataConfig>;
    /**
     * Modify the [Custom User Data](https://www.mongodb.com/docs/atlas/app-services/users/enable-custom-user-data/) configuration for an Atlas App Services App.
     * @summary Configure Custom User Data
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {CustomUserDataConfig} [customUserDataConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomUserDataApiInterface
     */
    adminSetCustomUserDataConfig(groupId: any, appId: any, customUserDataConfig?: CustomUserDataConfig, options?: AxiosRequestConfig): AxiosPromise<void>;
}
/**
 * CustomUserDataApi - object-oriented interface
 * @export
 * @class CustomUserDataApi
 * @extends {BaseAPI}
 */
export declare class CustomUserDataApi extends BaseAPI implements CustomUserDataApiInterface {
    /**
     * Get the [Custom User Data](https://www.mongodb.com/docs/atlas/app-services/users/enable-custom-user-data/) configuration for an Atlas App Services App.
     * @summary Get the Custom User Data Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomUserDataApi
     */
    adminGetCustomUserDataConfig(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomUserDataConfig, any>>;
    /**
     * Modify the [Custom User Data](https://www.mongodb.com/docs/atlas/app-services/users/enable-custom-user-data/) configuration for an Atlas App Services App.
     * @summary Configure Custom User Data
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {CustomUserDataConfig} [customUserDataConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomUserDataApi
     */
    adminSetCustomUserDataConfig(groupId: any, appId: any, customUserDataConfig?: CustomUserDataConfig, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * DataApiApi - axios parameter creator
 * @export
 */
export declare const DataApiApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create your app\'s [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
     * @summary Enable the Data API
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {DataApiConfig} dataApiConfig A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints#std-label-appconfig-data-api-endpoints) for the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateDataApiConfig: (groupId: any, appId: any, dataApiConfig: DataApiConfig, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get your app\'s [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
     * @summary Get the Data API Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetDataApiConfig: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all possible Data API versions.
     * @summary List Data API versions
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetDataApiVersions: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update your app\'s [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
     * @summary Modify the Data API
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {DataApiConfig} dataApiConfig A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints#std-label-appconfig-data-api-endpoints) for the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminModifyDataApiConfig: (groupId: any, appId: any, dataApiConfig: DataApiConfig, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DataApiApi - functional programming interface
 * @export
 */
export declare const DataApiApiFp: (configuration?: Configuration) => {
    /**
     * Create your app\'s [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
     * @summary Enable the Data API
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {DataApiConfig} dataApiConfig A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints#std-label-appconfig-data-api-endpoints) for the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateDataApiConfig(groupId: any, appId: any, dataApiConfig: DataApiConfig, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataApiConfig>>;
    /**
     * Get your app\'s [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
     * @summary Get the Data API Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetDataApiConfig(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataApiConfig>>;
    /**
     * List all possible Data API versions.
     * @summary List Data API versions
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetDataApiVersions(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Update your app\'s [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
     * @summary Modify the Data API
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {DataApiConfig} dataApiConfig A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints#std-label-appconfig-data-api-endpoints) for the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminModifyDataApiConfig(groupId: any, appId: any, dataApiConfig: DataApiConfig, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * DataApiApi - factory interface
 * @export
 */
export declare const DataApiApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create your app\'s [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
     * @summary Enable the Data API
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {DataApiConfig} dataApiConfig A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints#std-label-appconfig-data-api-endpoints) for the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateDataApiConfig(groupId: any, appId: any, dataApiConfig: DataApiConfig, options?: any): AxiosPromise<DataApiConfig>;
    /**
     * Get your app\'s [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
     * @summary Get the Data API Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetDataApiConfig(groupId: any, appId: any, options?: any): AxiosPromise<DataApiConfig>;
    /**
     * List all possible Data API versions.
     * @summary List Data API versions
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetDataApiVersions(groupId: any, appId: any, options?: any): AxiosPromise<any>;
    /**
     * Update your app\'s [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
     * @summary Modify the Data API
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {DataApiConfig} dataApiConfig A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints#std-label-appconfig-data-api-endpoints) for the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminModifyDataApiConfig(groupId: any, appId: any, dataApiConfig: DataApiConfig, options?: any): AxiosPromise<void>;
};
/**
 * DataApiApi - interface
 * @export
 * @interface DataApiApi
 */
export interface DataApiApiInterface {
    /**
     * Create your app\'s [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
     * @summary Enable the Data API
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {DataApiConfig} dataApiConfig A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints#std-label-appconfig-data-api-endpoints) for the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiApiInterface
     */
    adminCreateDataApiConfig(groupId: any, appId: any, dataApiConfig: DataApiConfig, options?: AxiosRequestConfig): AxiosPromise<DataApiConfig>;
    /**
     * Get your app\'s [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
     * @summary Get the Data API Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiApiInterface
     */
    adminGetDataApiConfig(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<DataApiConfig>;
    /**
     * List all possible Data API versions.
     * @summary List Data API versions
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiApiInterface
     */
    adminGetDataApiVersions(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Update your app\'s [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
     * @summary Modify the Data API
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {DataApiConfig} dataApiConfig A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints#std-label-appconfig-data-api-endpoints) for the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiApiInterface
     */
    adminModifyDataApiConfig(groupId: any, appId: any, dataApiConfig: DataApiConfig, options?: AxiosRequestConfig): AxiosPromise<void>;
}
/**
 * DataApiApi - object-oriented interface
 * @export
 * @class DataApiApi
 * @extends {BaseAPI}
 */
export declare class DataApiApi extends BaseAPI implements DataApiApiInterface {
    /**
     * Create your app\'s [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
     * @summary Enable the Data API
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {DataApiConfig} dataApiConfig A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints#std-label-appconfig-data-api-endpoints) for the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiApi
     */
    adminCreateDataApiConfig(groupId: any, appId: any, dataApiConfig: DataApiConfig, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DataApiConfig, any>>;
    /**
     * Get your app\'s [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
     * @summary Get the Data API Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiApi
     */
    adminGetDataApiConfig(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DataApiConfig, any>>;
    /**
     * List all possible Data API versions.
     * @summary List Data API versions
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiApi
     */
    adminGetDataApiVersions(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Update your app\'s [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
     * @summary Modify the Data API
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {DataApiConfig} dataApiConfig A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints#std-label-appconfig-data-api-endpoints) for the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiApi
     */
    adminModifyDataApiConfig(groupId: any, appId: any, dataApiConfig: DataApiConfig, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * DependenciesApi - axios parameter creator
 * @export
 */
export declare const DependenciesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * List [external dependencies](https://www.mongodb.com/docs/realm/functions/dependencies/) uploaded to the Atlas App Services App.
     * @summary List external dependencies
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetAllDependencies: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DependenciesApi - functional programming interface
 * @export
 */
export declare const DependenciesApiFp: (configuration?: Configuration) => {
    /**
     * List [external dependencies](https://www.mongodb.com/docs/realm/functions/dependencies/) uploaded to the Atlas App Services App.
     * @summary List external dependencies
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetAllDependencies(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DependenciesSummary>>;
};
/**
 * DependenciesApi - factory interface
 * @export
 */
export declare const DependenciesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * List [external dependencies](https://www.mongodb.com/docs/realm/functions/dependencies/) uploaded to the Atlas App Services App.
     * @summary List external dependencies
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetAllDependencies(groupId: any, appId: any, options?: any): AxiosPromise<DependenciesSummary>;
};
/**
 * DependenciesApi - interface
 * @export
 * @interface DependenciesApi
 */
export interface DependenciesApiInterface {
    /**
     * List [external dependencies](https://www.mongodb.com/docs/realm/functions/dependencies/) uploaded to the Atlas App Services App.
     * @summary List external dependencies
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DependenciesApiInterface
     */
    adminGetAllDependencies(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<DependenciesSummary>;
}
/**
 * DependenciesApi - object-oriented interface
 * @export
 * @class DependenciesApi
 * @extends {BaseAPI}
 */
export declare class DependenciesApi extends BaseAPI implements DependenciesApiInterface {
    /**
     * List [external dependencies](https://www.mongodb.com/docs/realm/functions/dependencies/) uploaded to the Atlas App Services App.
     * @summary List external dependencies
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DependenciesApi
     */
    adminGetAllDependencies(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DependenciesSummary, any>>;
}
/**
 * DeployApi - axios parameter creator
 * @export
 */
export declare const DeployApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Modify an App\'s deployment configuration to customize how the App deploys changes.
     * @summary Configure Deployment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {DeploymentConfig} [deploymentConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminConfigureDeployment: (groupId: any, appId: any, deploymentConfig?: DeploymentConfig, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new application deployment draft, if none exists.
     * @summary Create a Deployment Draft
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateDeploymentDraft: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Start a new deployment migration.
     * @summary Create a Deployment Migration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AppDeploymentSettings} appDeploymentSettings The deployment model and cloud provider region that the App should migrate to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateDeploymentMigration: (groupId: any, appId: any, appDeploymentSettings: AppDeploymentSettings, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deploy the specified application deployment draft.
     * @summary Deploy a deployment draft
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} draftId The unique &#x60;_id&#x60; value of a draft.
     * @param {AdminDeployDraftRequest} [adminDeployDraftRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeployDraft: (groupId: any, appId: any, draftId: any, adminDeployDraftRequest?: AdminDeployDraftRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return a diff between the currently deployed application and the specified draft.
     * @summary Diff a draft with the current deployment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} draftId The unique &#x60;_id&#x60; value of a draft.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeployDraftDiff: (groupId: any, appId: any, draftId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Discard the specified application deployment draft.
     * @summary Discard the specified deployment draft
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} draftId The unique &#x60;_id&#x60; value of a draft.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDiscardDraft: (groupId: any, appId: any, draftId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get information about a recent deployment of the application.
     * @summary Get a deployment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} deploymentId The &#x60;_id&#x60; value of an application deployment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetDeployment: (groupId: any, appId: any, deploymentId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * See information about how your App deploys changes.
     * @summary Get the Deployment Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetDeploymentConfig: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get metadata and status for the current deployment migration, if one exists.
     * @summary Get a Deployment Migration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetDeploymentMigration: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return a list of all supported cloud regions in which you can deploy an Atlas App.
     * @summary List all available Atlas App cloud regions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListAppRegions: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return the current application deployment draft, if applicable.
     * @summary Get Current Deployment Draft
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListDeploymentDrafts: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return the 25 most recent application deployments.
     * @summary List recent deployments
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListDeployments: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Redeploy a previously-deployed version of an App.
     * @summary Redeploy a Deployment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} deploymentId The &#x60;_id&#x60; value of an application deployment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRedeployDeployment: (groupId: any, appId: any, deploymentId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DeployApi - functional programming interface
 * @export
 */
export declare const DeployApiFp: (configuration?: Configuration) => {
    /**
     * Modify an App\'s deployment configuration to customize how the App deploys changes.
     * @summary Configure Deployment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {DeploymentConfig} [deploymentConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminConfigureDeployment(groupId: any, appId: any, deploymentConfig?: DeploymentConfig, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Create a new application deployment draft, if none exists.
     * @summary Create a Deployment Draft
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateDeploymentDraft(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentDraft>>;
    /**
     * Start a new deployment migration.
     * @summary Create a Deployment Migration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AppDeploymentSettings} appDeploymentSettings The deployment model and cloud provider region that the App should migrate to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateDeploymentMigration(groupId: any, appId: any, appDeploymentSettings: AppDeploymentSettings, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Deploy the specified application deployment draft.
     * @summary Deploy a deployment draft
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} draftId The unique &#x60;_id&#x60; value of a draft.
     * @param {AdminDeployDraftRequest} [adminDeployDraftRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeployDraft(groupId: any, appId: any, draftId: any, adminDeployDraftRequest?: AdminDeployDraftRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Deployment>>;
    /**
     * Return a diff between the currently deployed application and the specified draft.
     * @summary Diff a draft with the current deployment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} draftId The unique &#x60;_id&#x60; value of a draft.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeployDraftDiff(groupId: any, appId: any, draftId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Diff>>;
    /**
     * Discard the specified application deployment draft.
     * @summary Discard the specified deployment draft
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} draftId The unique &#x60;_id&#x60; value of a draft.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDiscardDraft(groupId: any, appId: any, draftId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get information about a recent deployment of the application.
     * @summary Get a deployment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} deploymentId The &#x60;_id&#x60; value of an application deployment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetDeployment(groupId: any, appId: any, deploymentId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Deployment>>;
    /**
     * See information about how your App deploys changes.
     * @summary Get the Deployment Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetDeploymentConfig(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentConfig>>;
    /**
     * Get metadata and status for the current deployment migration, if one exists.
     * @summary Get a Deployment Migration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetDeploymentMigration(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentMigration>>;
    /**
     * Return a list of all supported cloud regions in which you can deploy an Atlas App.
     * @summary List all available Atlas App cloud regions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListAppRegions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Return the current application deployment draft, if applicable.
     * @summary Get Current Deployment Draft
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListDeploymentDrafts(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentDraft>>;
    /**
     * Return the 25 most recent application deployments.
     * @summary List recent deployments
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListDeployments(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Redeploy a previously-deployed version of an App.
     * @summary Redeploy a Deployment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} deploymentId The &#x60;_id&#x60; value of an application deployment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRedeployDeployment(groupId: any, appId: any, deploymentId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * DeployApi - factory interface
 * @export
 */
export declare const DeployApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Modify an App\'s deployment configuration to customize how the App deploys changes.
     * @summary Configure Deployment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {DeploymentConfig} [deploymentConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminConfigureDeployment(groupId: any, appId: any, deploymentConfig?: DeploymentConfig, options?: any): AxiosPromise<void>;
    /**
     * Create a new application deployment draft, if none exists.
     * @summary Create a Deployment Draft
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateDeploymentDraft(groupId: any, appId: any, options?: any): AxiosPromise<DeploymentDraft>;
    /**
     * Start a new deployment migration.
     * @summary Create a Deployment Migration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AppDeploymentSettings} appDeploymentSettings The deployment model and cloud provider region that the App should migrate to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateDeploymentMigration(groupId: any, appId: any, appDeploymentSettings: AppDeploymentSettings, options?: any): AxiosPromise<void>;
    /**
     * Deploy the specified application deployment draft.
     * @summary Deploy a deployment draft
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} draftId The unique &#x60;_id&#x60; value of a draft.
     * @param {AdminDeployDraftRequest} [adminDeployDraftRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeployDraft(groupId: any, appId: any, draftId: any, adminDeployDraftRequest?: AdminDeployDraftRequest, options?: any): AxiosPromise<Deployment>;
    /**
     * Return a diff between the currently deployed application and the specified draft.
     * @summary Diff a draft with the current deployment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} draftId The unique &#x60;_id&#x60; value of a draft.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeployDraftDiff(groupId: any, appId: any, draftId: any, options?: any): AxiosPromise<Diff>;
    /**
     * Discard the specified application deployment draft.
     * @summary Discard the specified deployment draft
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} draftId The unique &#x60;_id&#x60; value of a draft.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDiscardDraft(groupId: any, appId: any, draftId: any, options?: any): AxiosPromise<void>;
    /**
     * Get information about a recent deployment of the application.
     * @summary Get a deployment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} deploymentId The &#x60;_id&#x60; value of an application deployment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetDeployment(groupId: any, appId: any, deploymentId: any, options?: any): AxiosPromise<Deployment>;
    /**
     * See information about how your App deploys changes.
     * @summary Get the Deployment Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetDeploymentConfig(groupId: any, appId: any, options?: any): AxiosPromise<DeploymentConfig>;
    /**
     * Get metadata and status for the current deployment migration, if one exists.
     * @summary Get a Deployment Migration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetDeploymentMigration(groupId: any, appId: any, options?: any): AxiosPromise<DeploymentMigration>;
    /**
     * Return a list of all supported cloud regions in which you can deploy an Atlas App.
     * @summary List all available Atlas App cloud regions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListAppRegions(options?: any): AxiosPromise<any>;
    /**
     * Return the current application deployment draft, if applicable.
     * @summary Get Current Deployment Draft
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListDeploymentDrafts(groupId: any, appId: any, options?: any): AxiosPromise<DeploymentDraft>;
    /**
     * Return the 25 most recent application deployments.
     * @summary List recent deployments
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListDeployments(groupId: any, appId: any, options?: any): AxiosPromise<any>;
    /**
     * Redeploy a previously-deployed version of an App.
     * @summary Redeploy a Deployment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} deploymentId The &#x60;_id&#x60; value of an application deployment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRedeployDeployment(groupId: any, appId: any, deploymentId: any, options?: any): AxiosPromise<void>;
};
/**
 * DeployApi - interface
 * @export
 * @interface DeployApi
 */
export interface DeployApiInterface {
    /**
     * Modify an App\'s deployment configuration to customize how the App deploys changes.
     * @summary Configure Deployment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {DeploymentConfig} [deploymentConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApiInterface
     */
    adminConfigureDeployment(groupId: any, appId: any, deploymentConfig?: DeploymentConfig, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Create a new application deployment draft, if none exists.
     * @summary Create a Deployment Draft
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApiInterface
     */
    adminCreateDeploymentDraft(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<DeploymentDraft>;
    /**
     * Start a new deployment migration.
     * @summary Create a Deployment Migration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AppDeploymentSettings} appDeploymentSettings The deployment model and cloud provider region that the App should migrate to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApiInterface
     */
    adminCreateDeploymentMigration(groupId: any, appId: any, appDeploymentSettings: AppDeploymentSettings, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Deploy the specified application deployment draft.
     * @summary Deploy a deployment draft
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} draftId The unique &#x60;_id&#x60; value of a draft.
     * @param {AdminDeployDraftRequest} [adminDeployDraftRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApiInterface
     */
    adminDeployDraft(groupId: any, appId: any, draftId: any, adminDeployDraftRequest?: AdminDeployDraftRequest, options?: AxiosRequestConfig): AxiosPromise<Deployment>;
    /**
     * Return a diff between the currently deployed application and the specified draft.
     * @summary Diff a draft with the current deployment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} draftId The unique &#x60;_id&#x60; value of a draft.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApiInterface
     */
    adminDeployDraftDiff(groupId: any, appId: any, draftId: any, options?: AxiosRequestConfig): AxiosPromise<Diff>;
    /**
     * Discard the specified application deployment draft.
     * @summary Discard the specified deployment draft
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} draftId The unique &#x60;_id&#x60; value of a draft.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApiInterface
     */
    adminDiscardDraft(groupId: any, appId: any, draftId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get information about a recent deployment of the application.
     * @summary Get a deployment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} deploymentId The &#x60;_id&#x60; value of an application deployment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApiInterface
     */
    adminGetDeployment(groupId: any, appId: any, deploymentId: any, options?: AxiosRequestConfig): AxiosPromise<Deployment>;
    /**
     * See information about how your App deploys changes.
     * @summary Get the Deployment Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApiInterface
     */
    adminGetDeploymentConfig(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<DeploymentConfig>;
    /**
     * Get metadata and status for the current deployment migration, if one exists.
     * @summary Get a Deployment Migration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApiInterface
     */
    adminGetDeploymentMigration(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<DeploymentMigration>;
    /**
     * Return a list of all supported cloud regions in which you can deploy an Atlas App.
     * @summary List all available Atlas App cloud regions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApiInterface
     */
    adminListAppRegions(options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Return the current application deployment draft, if applicable.
     * @summary Get Current Deployment Draft
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApiInterface
     */
    adminListDeploymentDrafts(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<DeploymentDraft>;
    /**
     * Return the 25 most recent application deployments.
     * @summary List recent deployments
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApiInterface
     */
    adminListDeployments(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Redeploy a previously-deployed version of an App.
     * @summary Redeploy a Deployment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} deploymentId The &#x60;_id&#x60; value of an application deployment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApiInterface
     */
    adminRedeployDeployment(groupId: any, appId: any, deploymentId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
}
/**
 * DeployApi - object-oriented interface
 * @export
 * @class DeployApi
 * @extends {BaseAPI}
 */
export declare class DeployApi extends BaseAPI implements DeployApiInterface {
    /**
     * Modify an App\'s deployment configuration to customize how the App deploys changes.
     * @summary Configure Deployment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {DeploymentConfig} [deploymentConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    adminConfigureDeployment(groupId: any, appId: any, deploymentConfig?: DeploymentConfig, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Create a new application deployment draft, if none exists.
     * @summary Create a Deployment Draft
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    adminCreateDeploymentDraft(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeploymentDraft, any>>;
    /**
     * Start a new deployment migration.
     * @summary Create a Deployment Migration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AppDeploymentSettings} appDeploymentSettings The deployment model and cloud provider region that the App should migrate to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    adminCreateDeploymentMigration(groupId: any, appId: any, appDeploymentSettings: AppDeploymentSettings, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Deploy the specified application deployment draft.
     * @summary Deploy a deployment draft
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} draftId The unique &#x60;_id&#x60; value of a draft.
     * @param {AdminDeployDraftRequest} [adminDeployDraftRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    adminDeployDraft(groupId: any, appId: any, draftId: any, adminDeployDraftRequest?: AdminDeployDraftRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Deployment, any>>;
    /**
     * Return a diff between the currently deployed application and the specified draft.
     * @summary Diff a draft with the current deployment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} draftId The unique &#x60;_id&#x60; value of a draft.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    adminDeployDraftDiff(groupId: any, appId: any, draftId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Diff, any>>;
    /**
     * Discard the specified application deployment draft.
     * @summary Discard the specified deployment draft
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} draftId The unique &#x60;_id&#x60; value of a draft.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    adminDiscardDraft(groupId: any, appId: any, draftId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get information about a recent deployment of the application.
     * @summary Get a deployment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} deploymentId The &#x60;_id&#x60; value of an application deployment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    adminGetDeployment(groupId: any, appId: any, deploymentId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Deployment, any>>;
    /**
     * See information about how your App deploys changes.
     * @summary Get the Deployment Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    adminGetDeploymentConfig(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeploymentConfig, any>>;
    /**
     * Get metadata and status for the current deployment migration, if one exists.
     * @summary Get a Deployment Migration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    adminGetDeploymentMigration(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeploymentMigration, any>>;
    /**
     * Return a list of all supported cloud regions in which you can deploy an Atlas App.
     * @summary List all available Atlas App cloud regions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    adminListAppRegions(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Return the current application deployment draft, if applicable.
     * @summary Get Current Deployment Draft
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    adminListDeploymentDrafts(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeploymentDraft, any>>;
    /**
     * Return the 25 most recent application deployments.
     * @summary List recent deployments
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    adminListDeployments(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Redeploy a previously-deployed version of an App.
     * @summary Redeploy a Deployment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} deploymentId The &#x60;_id&#x60; value of an application deployment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    adminRedeployDeployment(groupId: any, appId: any, deploymentId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * EmailApi - axios parameter creator
 * @export
 */
export declare const EmailApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Confirm a pending [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Confirm a pending user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} email Email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminConfirmPendingUser: (groupId: any, appId: any, email: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Reruns a pending user\'s [confirmation workflow](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Rerun a user confirmation workflow
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} email Email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRerunPendingUserConfirmation: (groupId: any, appId: any, email: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Send a [confirmation email](https://www.mongodb.com/docs/realm/authentication/email-password/).
     * @summary Send a confirmation email
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} email Email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminSendConfirmationEmail: (groupId: any, appId: any, email: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EmailApi - functional programming interface
 * @export
 */
export declare const EmailApiFp: (configuration?: Configuration) => {
    /**
     * Confirm a pending [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Confirm a pending user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} email Email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminConfirmPendingUser(groupId: any, appId: any, email: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Reruns a pending user\'s [confirmation workflow](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Rerun a user confirmation workflow
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} email Email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRerunPendingUserConfirmation(groupId: any, appId: any, email: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Send a [confirmation email](https://www.mongodb.com/docs/realm/authentication/email-password/).
     * @summary Send a confirmation email
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} email Email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminSendConfirmationEmail(groupId: any, appId: any, email: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * EmailApi - factory interface
 * @export
 */
export declare const EmailApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Confirm a pending [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Confirm a pending user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} email Email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminConfirmPendingUser(groupId: any, appId: any, email: any, options?: any): AxiosPromise<void>;
    /**
     * Reruns a pending user\'s [confirmation workflow](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Rerun a user confirmation workflow
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} email Email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRerunPendingUserConfirmation(groupId: any, appId: any, email: any, options?: any): AxiosPromise<void>;
    /**
     * Send a [confirmation email](https://www.mongodb.com/docs/realm/authentication/email-password/).
     * @summary Send a confirmation email
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} email Email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminSendConfirmationEmail(groupId: any, appId: any, email: any, options?: any): AxiosPromise<void>;
};
/**
 * EmailApi - interface
 * @export
 * @interface EmailApi
 */
export interface EmailApiInterface {
    /**
     * Confirm a pending [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Confirm a pending user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} email Email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApiInterface
     */
    adminConfirmPendingUser(groupId: any, appId: any, email: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Reruns a pending user\'s [confirmation workflow](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Rerun a user confirmation workflow
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} email Email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApiInterface
     */
    adminRerunPendingUserConfirmation(groupId: any, appId: any, email: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Send a [confirmation email](https://www.mongodb.com/docs/realm/authentication/email-password/).
     * @summary Send a confirmation email
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} email Email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApiInterface
     */
    adminSendConfirmationEmail(groupId: any, appId: any, email: any, options?: AxiosRequestConfig): AxiosPromise<void>;
}
/**
 * EmailApi - object-oriented interface
 * @export
 * @class EmailApi
 * @extends {BaseAPI}
 */
export declare class EmailApi extends BaseAPI implements EmailApiInterface {
    /**
     * Confirm a pending [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Confirm a pending user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} email Email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    adminConfirmPendingUser(groupId: any, appId: any, email: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Reruns a pending user\'s [confirmation workflow](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Rerun a user confirmation workflow
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} email Email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    adminRerunPendingUserConfirmation(groupId: any, appId: any, email: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Send a [confirmation email](https://www.mongodb.com/docs/realm/authentication/email-password/).
     * @summary Send a confirmation email
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} email Email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    adminSendConfirmationEmail(groupId: any, appId: any, email: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * EndpointsApi - axios parameter creator
 * @export
 */
export declare const EndpointsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new [endpoint](https://www.mongodb.com/docs/realm/endpoints/).
     * @summary Create an endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {Endpoint} endpoint A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints/) for the new endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateEndpoint: (groupId: any, appId: any, endpoint: Endpoint, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete an endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} endpointId The unique &#x60;_id&#x60; value of an endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteEndpoint: (groupId: any, appId: any, endpointId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all [endpoint](https://www.mongodb.com/docs/realm/endpoints/) configurations.
     * @summary Get all endpoints
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetAllEndpoints: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a specific [endpoint](https://www.mongodb.com/docs/realm/endpoints/)\'s configuration.
     * @summary Get an endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} endpointId The unique &#x60;_id&#x60; value of an endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetEndpoint: (groupId: any, appId: any, endpointId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Modify an existing [endpoint](https://www.mongodb.com/docs/realm/endpoints/) configuration.
     * @summary Modify an endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} endpointId The unique &#x60;_id&#x60; value of an endpoint
     * @param {Endpoint} endpoint A valid, updated [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints/) for the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminModifyEndpoint: (groupId: any, appId: any, endpointId: any, endpoint: Endpoint, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EndpointsApi - functional programming interface
 * @export
 */
export declare const EndpointsApiFp: (configuration?: Configuration) => {
    /**
     * Create a new [endpoint](https://www.mongodb.com/docs/realm/endpoints/).
     * @summary Create an endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {Endpoint} endpoint A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints/) for the new endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateEndpoint(groupId: any, appId: any, endpoint: Endpoint, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Delete an endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} endpointId The unique &#x60;_id&#x60; value of an endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteEndpoint(groupId: any, appId: any, endpointId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Get all [endpoint](https://www.mongodb.com/docs/realm/endpoints/) configurations.
     * @summary Get all endpoints
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetAllEndpoints(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Get a specific [endpoint](https://www.mongodb.com/docs/realm/endpoints/)\'s configuration.
     * @summary Get an endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} endpointId The unique &#x60;_id&#x60; value of an endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetEndpoint(groupId: any, appId: any, endpointId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Modify an existing [endpoint](https://www.mongodb.com/docs/realm/endpoints/) configuration.
     * @summary Modify an endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} endpointId The unique &#x60;_id&#x60; value of an endpoint
     * @param {Endpoint} endpoint A valid, updated [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints/) for the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminModifyEndpoint(groupId: any, appId: any, endpointId: any, endpoint: Endpoint, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * EndpointsApi - factory interface
 * @export
 */
export declare const EndpointsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new [endpoint](https://www.mongodb.com/docs/realm/endpoints/).
     * @summary Create an endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {Endpoint} endpoint A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints/) for the new endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateEndpoint(groupId: any, appId: any, endpoint: Endpoint, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Delete an endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} endpointId The unique &#x60;_id&#x60; value of an endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteEndpoint(groupId: any, appId: any, endpointId: any, options?: any): AxiosPromise<any>;
    /**
     * Get all [endpoint](https://www.mongodb.com/docs/realm/endpoints/) configurations.
     * @summary Get all endpoints
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetAllEndpoints(groupId: any, appId: any, options?: any): AxiosPromise<any>;
    /**
     * Get a specific [endpoint](https://www.mongodb.com/docs/realm/endpoints/)\'s configuration.
     * @summary Get an endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} endpointId The unique &#x60;_id&#x60; value of an endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetEndpoint(groupId: any, appId: any, endpointId: any, options?: any): AxiosPromise<any>;
    /**
     * Modify an existing [endpoint](https://www.mongodb.com/docs/realm/endpoints/) configuration.
     * @summary Modify an endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} endpointId The unique &#x60;_id&#x60; value of an endpoint
     * @param {Endpoint} endpoint A valid, updated [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints/) for the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminModifyEndpoint(groupId: any, appId: any, endpointId: any, endpoint: Endpoint, options?: any): AxiosPromise<any>;
};
/**
 * EndpointsApi - interface
 * @export
 * @interface EndpointsApi
 */
export interface EndpointsApiInterface {
    /**
     * Create a new [endpoint](https://www.mongodb.com/docs/realm/endpoints/).
     * @summary Create an endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {Endpoint} endpoint A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints/) for the new endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApiInterface
     */
    adminCreateEndpoint(groupId: any, appId: any, endpoint: Endpoint, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     *
     * @summary Delete an endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} endpointId The unique &#x60;_id&#x60; value of an endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApiInterface
     */
    adminDeleteEndpoint(groupId: any, appId: any, endpointId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Get all [endpoint](https://www.mongodb.com/docs/realm/endpoints/) configurations.
     * @summary Get all endpoints
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApiInterface
     */
    adminGetAllEndpoints(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Get a specific [endpoint](https://www.mongodb.com/docs/realm/endpoints/)\'s configuration.
     * @summary Get an endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} endpointId The unique &#x60;_id&#x60; value of an endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApiInterface
     */
    adminGetEndpoint(groupId: any, appId: any, endpointId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Modify an existing [endpoint](https://www.mongodb.com/docs/realm/endpoints/) configuration.
     * @summary Modify an endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} endpointId The unique &#x60;_id&#x60; value of an endpoint
     * @param {Endpoint} endpoint A valid, updated [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints/) for the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApiInterface
     */
    adminModifyEndpoint(groupId: any, appId: any, endpointId: any, endpoint: Endpoint, options?: AxiosRequestConfig): AxiosPromise<any>;
}
/**
 * EndpointsApi - object-oriented interface
 * @export
 * @class EndpointsApi
 * @extends {BaseAPI}
 */
export declare class EndpointsApi extends BaseAPI implements EndpointsApiInterface {
    /**
     * Create a new [endpoint](https://www.mongodb.com/docs/realm/endpoints/).
     * @summary Create an endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {Endpoint} endpoint A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints/) for the new endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    adminCreateEndpoint(groupId: any, appId: any, endpoint: Endpoint, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Delete an endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} endpointId The unique &#x60;_id&#x60; value of an endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    adminDeleteEndpoint(groupId: any, appId: any, endpointId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Get all [endpoint](https://www.mongodb.com/docs/realm/endpoints/) configurations.
     * @summary Get all endpoints
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    adminGetAllEndpoints(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Get a specific [endpoint](https://www.mongodb.com/docs/realm/endpoints/)\'s configuration.
     * @summary Get an endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} endpointId The unique &#x60;_id&#x60; value of an endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    adminGetEndpoint(groupId: any, appId: any, endpointId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Modify an existing [endpoint](https://www.mongodb.com/docs/realm/endpoints/) configuration.
     * @summary Modify an endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} endpointId The unique &#x60;_id&#x60; value of an endpoint
     * @param {Endpoint} endpoint A valid, updated [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints/) for the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    adminModifyEndpoint(groupId: any, appId: any, endpointId: any, endpoint: Endpoint, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
/**
 * EnvironmentsApi - axios parameter creator
 * @export
 */
export declare const EnvironmentsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Define a new environment value.
     * @summary Create an Environment Value
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateEnvironmentValue: (groupId: any, appId: any, body?: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete an existing environment value
     * @summary Delete an Environment Value
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} environmentValueId The &#x60;_id&#x60; value of an environment value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteEnvironmentValue: (groupId: any, appId: any, environmentValueId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get details about a specific environment value
     * @summary Get an Environment Value
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} environmentValueId The &#x60;_id&#x60; value of an environment value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetEnvironmentValue: (groupId: any, appId: any, environmentValueId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get basic information about all environment values in the App. Results do not include the environment-specific `values`. For details on a specific environment, call [Get an Environment Value](#tag/environments/operation/adminGetEnvironmentValue).
     * @summary List All Environment Values
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListEnvironmentValues: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Modify an existing environment value
     * @summary Modify an Environment Value
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} environmentValueId The &#x60;_id&#x60; value of an environment value.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminModifyEnvironmentValue: (groupId: any, appId: any, environmentValueId: any, body?: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Set the App\'s active environment
     * @summary Set the App Environment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminSetEnvironmentRequest} [adminSetEnvironmentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminSetEnvironment: (groupId: any, appId: any, adminSetEnvironmentRequest?: AdminSetEnvironmentRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EnvironmentsApi - functional programming interface
 * @export
 */
export declare const EnvironmentsApiFp: (configuration?: Configuration) => {
    /**
     * Define a new environment value.
     * @summary Create an Environment Value
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateEnvironmentValue(groupId: any, appId: any, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentValueDescription>>;
    /**
     * Delete an existing environment value
     * @summary Delete an Environment Value
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} environmentValueId The &#x60;_id&#x60; value of an environment value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteEnvironmentValue(groupId: any, appId: any, environmentValueId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get details about a specific environment value
     * @summary Get an Environment Value
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} environmentValueId The &#x60;_id&#x60; value of an environment value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetEnvironmentValue(groupId: any, appId: any, environmentValueId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Get basic information about all environment values in the App. Results do not include the environment-specific `values`. For details on a specific environment, call [Get an Environment Value](#tag/environments/operation/adminGetEnvironmentValue).
     * @summary List All Environment Values
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListEnvironmentValues(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Modify an existing environment value
     * @summary Modify an Environment Value
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} environmentValueId The &#x60;_id&#x60; value of an environment value.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminModifyEnvironmentValue(groupId: any, appId: any, environmentValueId: any, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentValueDescription>>;
    /**
     * Set the App\'s active environment
     * @summary Set the App Environment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminSetEnvironmentRequest} [adminSetEnvironmentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminSetEnvironment(groupId: any, appId: any, adminSetEnvironmentRequest?: AdminSetEnvironmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * EnvironmentsApi - factory interface
 * @export
 */
export declare const EnvironmentsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Define a new environment value.
     * @summary Create an Environment Value
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateEnvironmentValue(groupId: any, appId: any, body?: any, options?: any): AxiosPromise<EnvironmentValueDescription>;
    /**
     * Delete an existing environment value
     * @summary Delete an Environment Value
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} environmentValueId The &#x60;_id&#x60; value of an environment value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteEnvironmentValue(groupId: any, appId: any, environmentValueId: any, options?: any): AxiosPromise<void>;
    /**
     * Get details about a specific environment value
     * @summary Get an Environment Value
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} environmentValueId The &#x60;_id&#x60; value of an environment value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetEnvironmentValue(groupId: any, appId: any, environmentValueId: any, options?: any): AxiosPromise<any>;
    /**
     * Get basic information about all environment values in the App. Results do not include the environment-specific `values`. For details on a specific environment, call [Get an Environment Value](#tag/environments/operation/adminGetEnvironmentValue).
     * @summary List All Environment Values
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListEnvironmentValues(groupId: any, appId: any, options?: any): AxiosPromise<any>;
    /**
     * Modify an existing environment value
     * @summary Modify an Environment Value
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} environmentValueId The &#x60;_id&#x60; value of an environment value.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminModifyEnvironmentValue(groupId: any, appId: any, environmentValueId: any, body?: any, options?: any): AxiosPromise<EnvironmentValueDescription>;
    /**
     * Set the App\'s active environment
     * @summary Set the App Environment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminSetEnvironmentRequest} [adminSetEnvironmentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminSetEnvironment(groupId: any, appId: any, adminSetEnvironmentRequest?: AdminSetEnvironmentRequest, options?: any): AxiosPromise<any>;
};
/**
 * EnvironmentsApi - interface
 * @export
 * @interface EnvironmentsApi
 */
export interface EnvironmentsApiInterface {
    /**
     * Define a new environment value.
     * @summary Create an Environment Value
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApiInterface
     */
    adminCreateEnvironmentValue(groupId: any, appId: any, body?: any, options?: AxiosRequestConfig): AxiosPromise<EnvironmentValueDescription>;
    /**
     * Delete an existing environment value
     * @summary Delete an Environment Value
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} environmentValueId The &#x60;_id&#x60; value of an environment value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApiInterface
     */
    adminDeleteEnvironmentValue(groupId: any, appId: any, environmentValueId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get details about a specific environment value
     * @summary Get an Environment Value
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} environmentValueId The &#x60;_id&#x60; value of an environment value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApiInterface
     */
    adminGetEnvironmentValue(groupId: any, appId: any, environmentValueId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Get basic information about all environment values in the App. Results do not include the environment-specific `values`. For details on a specific environment, call [Get an Environment Value](#tag/environments/operation/adminGetEnvironmentValue).
     * @summary List All Environment Values
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApiInterface
     */
    adminListEnvironmentValues(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Modify an existing environment value
     * @summary Modify an Environment Value
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} environmentValueId The &#x60;_id&#x60; value of an environment value.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApiInterface
     */
    adminModifyEnvironmentValue(groupId: any, appId: any, environmentValueId: any, body?: any, options?: AxiosRequestConfig): AxiosPromise<EnvironmentValueDescription>;
    /**
     * Set the App\'s active environment
     * @summary Set the App Environment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminSetEnvironmentRequest} [adminSetEnvironmentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApiInterface
     */
    adminSetEnvironment(groupId: any, appId: any, adminSetEnvironmentRequest?: AdminSetEnvironmentRequest, options?: AxiosRequestConfig): AxiosPromise<any>;
}
/**
 * EnvironmentsApi - object-oriented interface
 * @export
 * @class EnvironmentsApi
 * @extends {BaseAPI}
 */
export declare class EnvironmentsApi extends BaseAPI implements EnvironmentsApiInterface {
    /**
     * Define a new environment value.
     * @summary Create an Environment Value
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    adminCreateEnvironmentValue(groupId: any, appId: any, body?: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EnvironmentValueDescription, any>>;
    /**
     * Delete an existing environment value
     * @summary Delete an Environment Value
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} environmentValueId The &#x60;_id&#x60; value of an environment value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    adminDeleteEnvironmentValue(groupId: any, appId: any, environmentValueId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get details about a specific environment value
     * @summary Get an Environment Value
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} environmentValueId The &#x60;_id&#x60; value of an environment value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    adminGetEnvironmentValue(groupId: any, appId: any, environmentValueId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Get basic information about all environment values in the App. Results do not include the environment-specific `values`. For details on a specific environment, call [Get an Environment Value](#tag/environments/operation/adminGetEnvironmentValue).
     * @summary List All Environment Values
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    adminListEnvironmentValues(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Modify an existing environment value
     * @summary Modify an Environment Value
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} environmentValueId The &#x60;_id&#x60; value of an environment value.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    adminModifyEnvironmentValue(groupId: any, appId: any, environmentValueId: any, body?: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EnvironmentValueDescription, any>>;
    /**
     * Set the App\'s active environment
     * @summary Set the App Environment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminSetEnvironmentRequest} [adminSetEnvironmentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    adminSetEnvironment(groupId: any, appId: any, adminSetEnvironmentRequest?: AdminSetEnvironmentRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
/**
 * EventSubscriptionsApi - axios parameter creator
 * @export
 */
export declare const EventSubscriptionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Return information about an event subscription.
     * @summary Get an Event Subscription
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} eventSubscriptionId The unique &#x60;_id&#x60; value of an event subscription.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetEventSubscription: (groupId: any, appId: any, eventSubscriptionId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return information about the most recent execution of an event subscription.
     * @summary Get the Latest Event Subscription Execution
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} eventSubscriptionId The unique &#x60;_id&#x60; value of an event subscription.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetLatestEventSubscriptionExecution: (groupId: any, appId: any, eventSubscriptionId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all event subscriptions.
     * @summary List Event Subscriptions
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminListEventSubscriptionsTypeEnum} [type] The type of event subscription to return.  - &#x60;DATABASE&#x60;: Return Database Triggers - &#x60;AUTHENTICATION&#x60;: Return Authentication Triggers - &#x60;SCHEDULED&#x60;: Return Scheduled Triggers - &#x60;SYNCTRANSLATOR&#x60;: Return Device Sync translators
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListEventSubscriptions: (groupId: any, appId: any, type?: AdminListEventSubscriptionsTypeEnum, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EventSubscriptionsApi - functional programming interface
 * @export
 */
export declare const EventSubscriptionsApiFp: (configuration?: Configuration) => {
    /**
     * Return information about an event subscription.
     * @summary Get an Event Subscription
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} eventSubscriptionId The unique &#x60;_id&#x60; value of an event subscription.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetEventSubscription(groupId: any, appId: any, eventSubscriptionId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Return information about the most recent execution of an event subscription.
     * @summary Get the Latest Event Subscription Execution
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} eventSubscriptionId The unique &#x60;_id&#x60; value of an event subscription.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetLatestEventSubscriptionExecution(groupId: any, appId: any, eventSubscriptionId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminGetLatestEventSubscriptionExecution200Response>>;
    /**
     * Get all event subscriptions.
     * @summary List Event Subscriptions
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminListEventSubscriptionsTypeEnum} [type] The type of event subscription to return.  - &#x60;DATABASE&#x60;: Return Database Triggers - &#x60;AUTHENTICATION&#x60;: Return Authentication Triggers - &#x60;SCHEDULED&#x60;: Return Scheduled Triggers - &#x60;SYNCTRANSLATOR&#x60;: Return Device Sync translators
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListEventSubscriptions(groupId: any, appId: any, type?: AdminListEventSubscriptionsTypeEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * EventSubscriptionsApi - factory interface
 * @export
 */
export declare const EventSubscriptionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Return information about an event subscription.
     * @summary Get an Event Subscription
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} eventSubscriptionId The unique &#x60;_id&#x60; value of an event subscription.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetEventSubscription(groupId: any, appId: any, eventSubscriptionId: any, options?: any): AxiosPromise<any>;
    /**
     * Return information about the most recent execution of an event subscription.
     * @summary Get the Latest Event Subscription Execution
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} eventSubscriptionId The unique &#x60;_id&#x60; value of an event subscription.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetLatestEventSubscriptionExecution(groupId: any, appId: any, eventSubscriptionId: any, options?: any): AxiosPromise<AdminGetLatestEventSubscriptionExecution200Response>;
    /**
     * Get all event subscriptions.
     * @summary List Event Subscriptions
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminListEventSubscriptionsTypeEnum} [type] The type of event subscription to return.  - &#x60;DATABASE&#x60;: Return Database Triggers - &#x60;AUTHENTICATION&#x60;: Return Authentication Triggers - &#x60;SCHEDULED&#x60;: Return Scheduled Triggers - &#x60;SYNCTRANSLATOR&#x60;: Return Device Sync translators
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListEventSubscriptions(groupId: any, appId: any, type?: AdminListEventSubscriptionsTypeEnum, options?: any): AxiosPromise<any>;
};
/**
 * EventSubscriptionsApi - interface
 * @export
 * @interface EventSubscriptionsApi
 */
export interface EventSubscriptionsApiInterface {
    /**
     * Return information about an event subscription.
     * @summary Get an Event Subscription
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} eventSubscriptionId The unique &#x60;_id&#x60; value of an event subscription.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionsApiInterface
     */
    adminGetEventSubscription(groupId: any, appId: any, eventSubscriptionId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Return information about the most recent execution of an event subscription.
     * @summary Get the Latest Event Subscription Execution
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} eventSubscriptionId The unique &#x60;_id&#x60; value of an event subscription.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionsApiInterface
     */
    adminGetLatestEventSubscriptionExecution(groupId: any, appId: any, eventSubscriptionId: any, options?: AxiosRequestConfig): AxiosPromise<AdminGetLatestEventSubscriptionExecution200Response>;
    /**
     * Get all event subscriptions.
     * @summary List Event Subscriptions
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminListEventSubscriptionsTypeEnum} [type] The type of event subscription to return.  - &#x60;DATABASE&#x60;: Return Database Triggers - &#x60;AUTHENTICATION&#x60;: Return Authentication Triggers - &#x60;SCHEDULED&#x60;: Return Scheduled Triggers - &#x60;SYNCTRANSLATOR&#x60;: Return Device Sync translators
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionsApiInterface
     */
    adminListEventSubscriptions(groupId: any, appId: any, type?: AdminListEventSubscriptionsTypeEnum, options?: AxiosRequestConfig): AxiosPromise<any>;
}
/**
 * EventSubscriptionsApi - object-oriented interface
 * @export
 * @class EventSubscriptionsApi
 * @extends {BaseAPI}
 */
export declare class EventSubscriptionsApi extends BaseAPI implements EventSubscriptionsApiInterface {
    /**
     * Return information about an event subscription.
     * @summary Get an Event Subscription
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} eventSubscriptionId The unique &#x60;_id&#x60; value of an event subscription.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionsApi
     */
    adminGetEventSubscription(groupId: any, appId: any, eventSubscriptionId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Return information about the most recent execution of an event subscription.
     * @summary Get the Latest Event Subscription Execution
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} eventSubscriptionId The unique &#x60;_id&#x60; value of an event subscription.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionsApi
     */
    adminGetLatestEventSubscriptionExecution(groupId: any, appId: any, eventSubscriptionId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AdminGetLatestEventSubscriptionExecution200Response, any>>;
    /**
     * Get all event subscriptions.
     * @summary List Event Subscriptions
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminListEventSubscriptionsTypeEnum} [type] The type of event subscription to return.  - &#x60;DATABASE&#x60;: Return Database Triggers - &#x60;AUTHENTICATION&#x60;: Return Authentication Triggers - &#x60;SCHEDULED&#x60;: Return Scheduled Triggers - &#x60;SYNCTRANSLATOR&#x60;: Return Device Sync translators
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionsApi
     */
    adminListEventSubscriptions(groupId: any, appId: any, type?: AdminListEventSubscriptionsTypeEnum, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
/**
 * @export
 */
export declare const AdminListEventSubscriptionsTypeEnum: {
    readonly Database: "DATABASE";
    readonly Authentication: "AUTHENTICATION";
    readonly Scheduled: "SCHEDULED";
    readonly Synctranslator: "SYNCTRANSLATOR";
};
export type AdminListEventSubscriptionsTypeEnum = typeof AdminListEventSubscriptionsTypeEnum[keyof typeof AdminListEventSubscriptionsTypeEnum];
/**
 * FunctionsApi - axios parameter creator
 * @export
 */
export declare const FunctionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary Create a new Function
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {NewFunction} newFunction The function to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateFunction: (groupId: any, appId: any, newFunction: NewFunction, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary Delete a Function
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} functionId The unique &#x60;_id&#x60; value of a function.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteFunction: (groupId: any, appId: any, functionId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Execute a [function](https://www.mongodb.com/docs/realm/functions#std-label-functions) for testing.
     * @summary Execute a function
     * @param {any} userId The user as which to execute the function. Either &#x60;user_id&#x60; or &#x60;run_as_system&#x60; is required. You cannot specify both.
     * @param {any} runAsSystem Determine whether or not to run as system user. Either &#x60;run_as_system&#x60; or &#x60;user_id&#x60; is required. You cannot specify both.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminExecuteFunctionRequest} adminExecuteFunctionRequest The function to execute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminExecuteFunction: (userId: any, runAsSystem: any, groupId: any, appId: any, adminExecuteFunctionRequest: AdminExecuteFunctionRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Execute a [function](https://www.mongodb.com/docs/realm/functions#std-label-functions)\'s source code for testing.
     * @summary Execute a function\'s source code for testing
     * @param {any} userId The user as which to execute the function. Either &#x60;user_id&#x60; or &#x60;run_as_system&#x60; is required. You cannot specify both.
     * @param {any} runAsSystem Determine whether or not to run as system user. Either &#x60;run_as_system&#x60; or &#x60;user_id&#x60; is required. You cannot specify both.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminExecuteFunctionSourceRequest} adminExecuteFunctionSourceRequest The source to execute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminExecuteFunctionSource: (userId: any, runAsSystem: any, groupId: any, appId: any, adminExecuteFunctionSourceRequest: AdminExecuteFunctionSourceRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary Retrieve a Function
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} functionId The unique &#x60;_id&#x60; value of a function.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetFunction: (groupId: any, appId: any, functionId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List [Functions](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary List Functions
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListFunctions: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary Update a Function
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} functionId The unique &#x60;_id&#x60; value of a function.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateFunction: (groupId: any, appId: any, functionId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FunctionsApi - functional programming interface
 * @export
 */
export declare const FunctionsApiFp: (configuration?: Configuration) => {
    /**
     * Create a new [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary Create a new Function
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {NewFunction} newFunction The function to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateFunction(groupId: any, appId: any, newFunction: NewFunction, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminCreateFunction201Response>>;
    /**
     * Delete a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary Delete a Function
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} functionId The unique &#x60;_id&#x60; value of a function.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteFunction(groupId: any, appId: any, functionId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Execute a [function](https://www.mongodb.com/docs/realm/functions#std-label-functions) for testing.
     * @summary Execute a function
     * @param {any} userId The user as which to execute the function. Either &#x60;user_id&#x60; or &#x60;run_as_system&#x60; is required. You cannot specify both.
     * @param {any} runAsSystem Determine whether or not to run as system user. Either &#x60;run_as_system&#x60; or &#x60;user_id&#x60; is required. You cannot specify both.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminExecuteFunctionRequest} adminExecuteFunctionRequest The function to execute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminExecuteFunction(userId: any, runAsSystem: any, groupId: any, appId: any, adminExecuteFunctionRequest: AdminExecuteFunctionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminExecuteFunction200Response>>;
    /**
     * Execute a [function](https://www.mongodb.com/docs/realm/functions#std-label-functions)\'s source code for testing.
     * @summary Execute a function\'s source code for testing
     * @param {any} userId The user as which to execute the function. Either &#x60;user_id&#x60; or &#x60;run_as_system&#x60; is required. You cannot specify both.
     * @param {any} runAsSystem Determine whether or not to run as system user. Either &#x60;run_as_system&#x60; or &#x60;user_id&#x60; is required. You cannot specify both.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminExecuteFunctionSourceRequest} adminExecuteFunctionSourceRequest The source to execute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminExecuteFunctionSource(userId: any, runAsSystem: any, groupId: any, appId: any, adminExecuteFunctionSourceRequest: AdminExecuteFunctionSourceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminExecuteFunction200Response>>;
    /**
     * Retrieve a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary Retrieve a Function
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} functionId The unique &#x60;_id&#x60; value of a function.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetFunction(groupId: any, appId: any, functionId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Function>>;
    /**
     * List [Functions](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary List Functions
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListFunctions(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Update a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary Update a Function
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} functionId The unique &#x60;_id&#x60; value of a function.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateFunction(groupId: any, appId: any, functionId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewFunction>>;
};
/**
 * FunctionsApi - factory interface
 * @export
 */
export declare const FunctionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary Create a new Function
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {NewFunction} newFunction The function to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateFunction(groupId: any, appId: any, newFunction: NewFunction, options?: any): AxiosPromise<AdminCreateFunction201Response>;
    /**
     * Delete a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary Delete a Function
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} functionId The unique &#x60;_id&#x60; value of a function.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteFunction(groupId: any, appId: any, functionId: any, options?: any): AxiosPromise<void>;
    /**
     * Execute a [function](https://www.mongodb.com/docs/realm/functions#std-label-functions) for testing.
     * @summary Execute a function
     * @param {any} userId The user as which to execute the function. Either &#x60;user_id&#x60; or &#x60;run_as_system&#x60; is required. You cannot specify both.
     * @param {any} runAsSystem Determine whether or not to run as system user. Either &#x60;run_as_system&#x60; or &#x60;user_id&#x60; is required. You cannot specify both.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminExecuteFunctionRequest} adminExecuteFunctionRequest The function to execute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminExecuteFunction(userId: any, runAsSystem: any, groupId: any, appId: any, adminExecuteFunctionRequest: AdminExecuteFunctionRequest, options?: any): AxiosPromise<AdminExecuteFunction200Response>;
    /**
     * Execute a [function](https://www.mongodb.com/docs/realm/functions#std-label-functions)\'s source code for testing.
     * @summary Execute a function\'s source code for testing
     * @param {any} userId The user as which to execute the function. Either &#x60;user_id&#x60; or &#x60;run_as_system&#x60; is required. You cannot specify both.
     * @param {any} runAsSystem Determine whether or not to run as system user. Either &#x60;run_as_system&#x60; or &#x60;user_id&#x60; is required. You cannot specify both.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminExecuteFunctionSourceRequest} adminExecuteFunctionSourceRequest The source to execute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminExecuteFunctionSource(userId: any, runAsSystem: any, groupId: any, appId: any, adminExecuteFunctionSourceRequest: AdminExecuteFunctionSourceRequest, options?: any): AxiosPromise<AdminExecuteFunction200Response>;
    /**
     * Retrieve a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary Retrieve a Function
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} functionId The unique &#x60;_id&#x60; value of a function.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetFunction(groupId: any, appId: any, functionId: any, options?: any): AxiosPromise<Function>;
    /**
     * List [Functions](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary List Functions
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListFunctions(groupId: any, appId: any, options?: any): AxiosPromise<any>;
    /**
     * Update a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary Update a Function
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} functionId The unique &#x60;_id&#x60; value of a function.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateFunction(groupId: any, appId: any, functionId: any, options?: any): AxiosPromise<NewFunction>;
};
/**
 * FunctionsApi - interface
 * @export
 * @interface FunctionsApi
 */
export interface FunctionsApiInterface {
    /**
     * Create a new [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary Create a new Function
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {NewFunction} newFunction The function to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiInterface
     */
    adminCreateFunction(groupId: any, appId: any, newFunction: NewFunction, options?: AxiosRequestConfig): AxiosPromise<AdminCreateFunction201Response>;
    /**
     * Delete a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary Delete a Function
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} functionId The unique &#x60;_id&#x60; value of a function.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiInterface
     */
    adminDeleteFunction(groupId: any, appId: any, functionId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Execute a [function](https://www.mongodb.com/docs/realm/functions#std-label-functions) for testing.
     * @summary Execute a function
     * @param {any} userId The user as which to execute the function. Either &#x60;user_id&#x60; or &#x60;run_as_system&#x60; is required. You cannot specify both.
     * @param {any} runAsSystem Determine whether or not to run as system user. Either &#x60;run_as_system&#x60; or &#x60;user_id&#x60; is required. You cannot specify both.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminExecuteFunctionRequest} adminExecuteFunctionRequest The function to execute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiInterface
     */
    adminExecuteFunction(userId: any, runAsSystem: any, groupId: any, appId: any, adminExecuteFunctionRequest: AdminExecuteFunctionRequest, options?: AxiosRequestConfig): AxiosPromise<AdminExecuteFunction200Response>;
    /**
     * Execute a [function](https://www.mongodb.com/docs/realm/functions#std-label-functions)\'s source code for testing.
     * @summary Execute a function\'s source code for testing
     * @param {any} userId The user as which to execute the function. Either &#x60;user_id&#x60; or &#x60;run_as_system&#x60; is required. You cannot specify both.
     * @param {any} runAsSystem Determine whether or not to run as system user. Either &#x60;run_as_system&#x60; or &#x60;user_id&#x60; is required. You cannot specify both.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminExecuteFunctionSourceRequest} adminExecuteFunctionSourceRequest The source to execute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiInterface
     */
    adminExecuteFunctionSource(userId: any, runAsSystem: any, groupId: any, appId: any, adminExecuteFunctionSourceRequest: AdminExecuteFunctionSourceRequest, options?: AxiosRequestConfig): AxiosPromise<AdminExecuteFunction200Response>;
    /**
     * Retrieve a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary Retrieve a Function
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} functionId The unique &#x60;_id&#x60; value of a function.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiInterface
     */
    adminGetFunction(groupId: any, appId: any, functionId: any, options?: AxiosRequestConfig): AxiosPromise<Function>;
    /**
     * List [Functions](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary List Functions
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiInterface
     */
    adminListFunctions(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Update a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary Update a Function
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} functionId The unique &#x60;_id&#x60; value of a function.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiInterface
     */
    adminUpdateFunction(groupId: any, appId: any, functionId: any, options?: AxiosRequestConfig): AxiosPromise<NewFunction>;
}
/**
 * FunctionsApi - object-oriented interface
 * @export
 * @class FunctionsApi
 * @extends {BaseAPI}
 */
export declare class FunctionsApi extends BaseAPI implements FunctionsApiInterface {
    /**
     * Create a new [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary Create a new Function
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {NewFunction} newFunction The function to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApi
     */
    adminCreateFunction(groupId: any, appId: any, newFunction: NewFunction, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AdminCreateFunction201Response, any>>;
    /**
     * Delete a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary Delete a Function
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} functionId The unique &#x60;_id&#x60; value of a function.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApi
     */
    adminDeleteFunction(groupId: any, appId: any, functionId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Execute a [function](https://www.mongodb.com/docs/realm/functions#std-label-functions) for testing.
     * @summary Execute a function
     * @param {any} userId The user as which to execute the function. Either &#x60;user_id&#x60; or &#x60;run_as_system&#x60; is required. You cannot specify both.
     * @param {any} runAsSystem Determine whether or not to run as system user. Either &#x60;run_as_system&#x60; or &#x60;user_id&#x60; is required. You cannot specify both.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminExecuteFunctionRequest} adminExecuteFunctionRequest The function to execute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApi
     */
    adminExecuteFunction(userId: any, runAsSystem: any, groupId: any, appId: any, adminExecuteFunctionRequest: AdminExecuteFunctionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AdminExecuteFunction200Response, any>>;
    /**
     * Execute a [function](https://www.mongodb.com/docs/realm/functions#std-label-functions)\'s source code for testing.
     * @summary Execute a function\'s source code for testing
     * @param {any} userId The user as which to execute the function. Either &#x60;user_id&#x60; or &#x60;run_as_system&#x60; is required. You cannot specify both.
     * @param {any} runAsSystem Determine whether or not to run as system user. Either &#x60;run_as_system&#x60; or &#x60;user_id&#x60; is required. You cannot specify both.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminExecuteFunctionSourceRequest} adminExecuteFunctionSourceRequest The source to execute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApi
     */
    adminExecuteFunctionSource(userId: any, runAsSystem: any, groupId: any, appId: any, adminExecuteFunctionSourceRequest: AdminExecuteFunctionSourceRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AdminExecuteFunction200Response, any>>;
    /**
     * Retrieve a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary Retrieve a Function
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} functionId The unique &#x60;_id&#x60; value of a function.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApi
     */
    adminGetFunction(groupId: any, appId: any, functionId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Function, any>>;
    /**
     * List [Functions](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary List Functions
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApi
     */
    adminListFunctions(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Update a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary Update a Function
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} functionId The unique &#x60;_id&#x60; value of a function.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApi
     */
    adminUpdateFunction(groupId: any, appId: any, functionId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NewFunction, any>>;
}
/**
 * GraphqlApi - axios parameter creator
 * @export
 */
export declare const GraphqlApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/).
     * @summary Create a custom resolver
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {CustomResolver} customResolver A valid [custom resolver configuration](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-custom-resolver) object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateCustomResolver: (groupId: any, appId: any, customResolver: CustomResolver, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete an existing [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
     * @summary Delete a custom resolver
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} customResolverId The unique &#x60;_id&#x60; value of a custom resolver.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteCustomResolver: (groupId: any, appId: any, customResolverId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configurations from your app\'s GraphQL API.
     * @summary Get all custom resolvers
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetAllCustomResolvers: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a specific [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
     * @summary Get a custom resolver
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} customResolverId The unique &#x60;_id&#x60; value of a custom resolver.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetCustomResolver: (groupId: any, appId: any, customResolverId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get your app\'s [GraphQL API](https://www.mongodb.com/docs/atlas/app-services/graphql/) configuration.
     * @summary Get GraphQL API Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetGraphQLConfig: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the current validation level and action for reads and writes.
     * @summary Get validation settings
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetGraphQLValidationSettings: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Modify an existing [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
     * @summary Modify a custom resolver
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} customResolverId The unique &#x60;_id&#x60; value of a custom resolver.
     * @param {CustomResolver} customResolver A valid, updated [custom resolver configuration](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-custom-resolver) object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminModifyCustomResolver: (groupId: any, appId: any, customResolverId: any, customResolver: CustomResolver, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Run a query or mutation as a system user that bypasses authentication and data access rules. You can access metadata about your API, including its schema, with an [introspection](https://graphql.org/learn/introspection/) query.
     * @summary Run a query or mutation
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminRunGraphQLOperationRequest} [adminRunGraphQLOperationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRunGraphQLOperation: (groupId: any, appId: any, adminRunGraphQLOperationRequest?: AdminRunGraphQLOperationRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Set the validation level and action for reads and writes.
     * @summary Modify validation settings
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {GraphQLValidationSettings} graphQLValidationSettings The updated validation levels and actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminSetGraphQLValidationSettings: (groupId: any, appId: any, graphQLValidationSettings: GraphQLValidationSettings, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update your app\'s [GraphQL API](https://www.mongodb.com/docs/atlas/app-services/graphql/) configuration.
     * @summary Update GraphQL API Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {GraphQLConfig} graphQLConfig A valid [GraphQL API configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-graphql).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateGraphQLConfig: (groupId: any, appId: any, graphQLConfig: GraphQLConfig, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * GraphqlApi - functional programming interface
 * @export
 */
export declare const GraphqlApiFp: (configuration?: Configuration) => {
    /**
     * Create a new [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/).
     * @summary Create a custom resolver
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {CustomResolver} customResolver A valid [custom resolver configuration](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-custom-resolver) object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateCustomResolver(groupId: any, appId: any, customResolver: CustomResolver, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomResolver>>;
    /**
     * Delete an existing [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
     * @summary Delete a custom resolver
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} customResolverId The unique &#x60;_id&#x60; value of a custom resolver.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteCustomResolver(groupId: any, appId: any, customResolverId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get all [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configurations from your app\'s GraphQL API.
     * @summary Get all custom resolvers
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetAllCustomResolvers(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Get a specific [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
     * @summary Get a custom resolver
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} customResolverId The unique &#x60;_id&#x60; value of a custom resolver.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetCustomResolver(groupId: any, appId: any, customResolverId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomResolver>>;
    /**
     * Get your app\'s [GraphQL API](https://www.mongodb.com/docs/atlas/app-services/graphql/) configuration.
     * @summary Get GraphQL API Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetGraphQLConfig(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphQLConfig>>;
    /**
     * Get the current validation level and action for reads and writes.
     * @summary Get validation settings
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetGraphQLValidationSettings(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphQLValidationSettings>>;
    /**
     * Modify an existing [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
     * @summary Modify a custom resolver
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} customResolverId The unique &#x60;_id&#x60; value of a custom resolver.
     * @param {CustomResolver} customResolver A valid, updated [custom resolver configuration](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-custom-resolver) object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminModifyCustomResolver(groupId: any, appId: any, customResolverId: any, customResolver: CustomResolver, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Run a query or mutation as a system user that bypasses authentication and data access rules. You can access metadata about your API, including its schema, with an [introspection](https://graphql.org/learn/introspection/) query.
     * @summary Run a query or mutation
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminRunGraphQLOperationRequest} [adminRunGraphQLOperationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRunGraphQLOperation(groupId: any, appId: any, adminRunGraphQLOperationRequest?: AdminRunGraphQLOperationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminRunGraphQLOperation200Response>>;
    /**
     * Set the validation level and action for reads and writes.
     * @summary Modify validation settings
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {GraphQLValidationSettings} graphQLValidationSettings The updated validation levels and actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminSetGraphQLValidationSettings(groupId: any, appId: any, graphQLValidationSettings: GraphQLValidationSettings, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Update your app\'s [GraphQL API](https://www.mongodb.com/docs/atlas/app-services/graphql/) configuration.
     * @summary Update GraphQL API Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {GraphQLConfig} graphQLConfig A valid [GraphQL API configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-graphql).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateGraphQLConfig(groupId: any, appId: any, graphQLConfig: GraphQLConfig, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * GraphqlApi - factory interface
 * @export
 */
export declare const GraphqlApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/).
     * @summary Create a custom resolver
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {CustomResolver} customResolver A valid [custom resolver configuration](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-custom-resolver) object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateCustomResolver(groupId: any, appId: any, customResolver: CustomResolver, options?: any): AxiosPromise<CustomResolver>;
    /**
     * Delete an existing [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
     * @summary Delete a custom resolver
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} customResolverId The unique &#x60;_id&#x60; value of a custom resolver.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteCustomResolver(groupId: any, appId: any, customResolverId: any, options?: any): AxiosPromise<void>;
    /**
     * Get all [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configurations from your app\'s GraphQL API.
     * @summary Get all custom resolvers
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetAllCustomResolvers(groupId: any, appId: any, options?: any): AxiosPromise<any>;
    /**
     * Get a specific [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
     * @summary Get a custom resolver
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} customResolverId The unique &#x60;_id&#x60; value of a custom resolver.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetCustomResolver(groupId: any, appId: any, customResolverId: any, options?: any): AxiosPromise<CustomResolver>;
    /**
     * Get your app\'s [GraphQL API](https://www.mongodb.com/docs/atlas/app-services/graphql/) configuration.
     * @summary Get GraphQL API Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetGraphQLConfig(groupId: any, appId: any, options?: any): AxiosPromise<GraphQLConfig>;
    /**
     * Get the current validation level and action for reads and writes.
     * @summary Get validation settings
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetGraphQLValidationSettings(groupId: any, appId: any, options?: any): AxiosPromise<GraphQLValidationSettings>;
    /**
     * Modify an existing [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
     * @summary Modify a custom resolver
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} customResolverId The unique &#x60;_id&#x60; value of a custom resolver.
     * @param {CustomResolver} customResolver A valid, updated [custom resolver configuration](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-custom-resolver) object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminModifyCustomResolver(groupId: any, appId: any, customResolverId: any, customResolver: CustomResolver, options?: any): AxiosPromise<void>;
    /**
     * Run a query or mutation as a system user that bypasses authentication and data access rules. You can access metadata about your API, including its schema, with an [introspection](https://graphql.org/learn/introspection/) query.
     * @summary Run a query or mutation
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminRunGraphQLOperationRequest} [adminRunGraphQLOperationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRunGraphQLOperation(groupId: any, appId: any, adminRunGraphQLOperationRequest?: AdminRunGraphQLOperationRequest, options?: any): AxiosPromise<AdminRunGraphQLOperation200Response>;
    /**
     * Set the validation level and action for reads and writes.
     * @summary Modify validation settings
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {GraphQLValidationSettings} graphQLValidationSettings The updated validation levels and actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminSetGraphQLValidationSettings(groupId: any, appId: any, graphQLValidationSettings: GraphQLValidationSettings, options?: any): AxiosPromise<void>;
    /**
     * Update your app\'s [GraphQL API](https://www.mongodb.com/docs/atlas/app-services/graphql/) configuration.
     * @summary Update GraphQL API Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {GraphQLConfig} graphQLConfig A valid [GraphQL API configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-graphql).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateGraphQLConfig(groupId: any, appId: any, graphQLConfig: GraphQLConfig, options?: any): AxiosPromise<void>;
};
/**
 * GraphqlApi - interface
 * @export
 * @interface GraphqlApi
 */
export interface GraphqlApiInterface {
    /**
     * Create a new [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/).
     * @summary Create a custom resolver
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {CustomResolver} customResolver A valid [custom resolver configuration](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-custom-resolver) object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApiInterface
     */
    adminCreateCustomResolver(groupId: any, appId: any, customResolver: CustomResolver, options?: AxiosRequestConfig): AxiosPromise<CustomResolver>;
    /**
     * Delete an existing [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
     * @summary Delete a custom resolver
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} customResolverId The unique &#x60;_id&#x60; value of a custom resolver.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApiInterface
     */
    adminDeleteCustomResolver(groupId: any, appId: any, customResolverId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get all [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configurations from your app\'s GraphQL API.
     * @summary Get all custom resolvers
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApiInterface
     */
    adminGetAllCustomResolvers(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Get a specific [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
     * @summary Get a custom resolver
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} customResolverId The unique &#x60;_id&#x60; value of a custom resolver.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApiInterface
     */
    adminGetCustomResolver(groupId: any, appId: any, customResolverId: any, options?: AxiosRequestConfig): AxiosPromise<CustomResolver>;
    /**
     * Get your app\'s [GraphQL API](https://www.mongodb.com/docs/atlas/app-services/graphql/) configuration.
     * @summary Get GraphQL API Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApiInterface
     */
    adminGetGraphQLConfig(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<GraphQLConfig>;
    /**
     * Get the current validation level and action for reads and writes.
     * @summary Get validation settings
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApiInterface
     */
    adminGetGraphQLValidationSettings(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<GraphQLValidationSettings>;
    /**
     * Modify an existing [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
     * @summary Modify a custom resolver
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} customResolverId The unique &#x60;_id&#x60; value of a custom resolver.
     * @param {CustomResolver} customResolver A valid, updated [custom resolver configuration](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-custom-resolver) object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApiInterface
     */
    adminModifyCustomResolver(groupId: any, appId: any, customResolverId: any, customResolver: CustomResolver, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Run a query or mutation as a system user that bypasses authentication and data access rules. You can access metadata about your API, including its schema, with an [introspection](https://graphql.org/learn/introspection/) query.
     * @summary Run a query or mutation
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminRunGraphQLOperationRequest} [adminRunGraphQLOperationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApiInterface
     */
    adminRunGraphQLOperation(groupId: any, appId: any, adminRunGraphQLOperationRequest?: AdminRunGraphQLOperationRequest, options?: AxiosRequestConfig): AxiosPromise<AdminRunGraphQLOperation200Response>;
    /**
     * Set the validation level and action for reads and writes.
     * @summary Modify validation settings
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {GraphQLValidationSettings} graphQLValidationSettings The updated validation levels and actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApiInterface
     */
    adminSetGraphQLValidationSettings(groupId: any, appId: any, graphQLValidationSettings: GraphQLValidationSettings, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Update your app\'s [GraphQL API](https://www.mongodb.com/docs/atlas/app-services/graphql/) configuration.
     * @summary Update GraphQL API Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {GraphQLConfig} graphQLConfig A valid [GraphQL API configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-graphql).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApiInterface
     */
    adminUpdateGraphQLConfig(groupId: any, appId: any, graphQLConfig: GraphQLConfig, options?: AxiosRequestConfig): AxiosPromise<void>;
}
/**
 * GraphqlApi - object-oriented interface
 * @export
 * @class GraphqlApi
 * @extends {BaseAPI}
 */
export declare class GraphqlApi extends BaseAPI implements GraphqlApiInterface {
    /**
     * Create a new [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/).
     * @summary Create a custom resolver
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {CustomResolver} customResolver A valid [custom resolver configuration](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-custom-resolver) object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApi
     */
    adminCreateCustomResolver(groupId: any, appId: any, customResolver: CustomResolver, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomResolver, any>>;
    /**
     * Delete an existing [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
     * @summary Delete a custom resolver
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} customResolverId The unique &#x60;_id&#x60; value of a custom resolver.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApi
     */
    adminDeleteCustomResolver(groupId: any, appId: any, customResolverId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get all [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configurations from your app\'s GraphQL API.
     * @summary Get all custom resolvers
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApi
     */
    adminGetAllCustomResolvers(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Get a specific [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
     * @summary Get a custom resolver
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} customResolverId The unique &#x60;_id&#x60; value of a custom resolver.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApi
     */
    adminGetCustomResolver(groupId: any, appId: any, customResolverId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomResolver, any>>;
    /**
     * Get your app\'s [GraphQL API](https://www.mongodb.com/docs/atlas/app-services/graphql/) configuration.
     * @summary Get GraphQL API Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApi
     */
    adminGetGraphQLConfig(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GraphQLConfig, any>>;
    /**
     * Get the current validation level and action for reads and writes.
     * @summary Get validation settings
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApi
     */
    adminGetGraphQLValidationSettings(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GraphQLValidationSettings, any>>;
    /**
     * Modify an existing [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
     * @summary Modify a custom resolver
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} customResolverId The unique &#x60;_id&#x60; value of a custom resolver.
     * @param {CustomResolver} customResolver A valid, updated [custom resolver configuration](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-custom-resolver) object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApi
     */
    adminModifyCustomResolver(groupId: any, appId: any, customResolverId: any, customResolver: CustomResolver, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Run a query or mutation as a system user that bypasses authentication and data access rules. You can access metadata about your API, including its schema, with an [introspection](https://graphql.org/learn/introspection/) query.
     * @summary Run a query or mutation
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminRunGraphQLOperationRequest} [adminRunGraphQLOperationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApi
     */
    adminRunGraphQLOperation(groupId: any, appId: any, adminRunGraphQLOperationRequest?: AdminRunGraphQLOperationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AdminRunGraphQLOperation200Response, any>>;
    /**
     * Set the validation level and action for reads and writes.
     * @summary Modify validation settings
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {GraphQLValidationSettings} graphQLValidationSettings The updated validation levels and actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApi
     */
    adminSetGraphQLValidationSettings(groupId: any, appId: any, graphQLValidationSettings: GraphQLValidationSettings, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update your app\'s [GraphQL API](https://www.mongodb.com/docs/atlas/app-services/graphql/) configuration.
     * @summary Update GraphQL API Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {GraphQLConfig} graphQLConfig A valid [GraphQL API configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-graphql).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApi
     */
    adminUpdateGraphQLConfig(groupId: any, appId: any, graphQLConfig: GraphQLConfig, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * HostingApi - axios parameter creator
 * @export
 */
export declare const HostingApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Enable or disable App Services Hosting for your app. Changes to hosting can take up to 15 minutes to take effect. This endpoint does not notify you when the changes have taken effect, only that the change operation was successfully received by the server.  You can see if the hosting enablement/disablement is complete by calling the [Get Hosting Configuration](#operation/adminGetHostingConfig) endpoint.
     * @summary Enable/Disable Hosting
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminEnableDisableHostingRequest} [adminEnableDisableHostingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminEnableDisableHosting: (groupId: any, appId: any, adminEnableDisableHostingRequest?: AdminEnableDisableHostingRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all hosted assets
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetAllHostedAssets: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve metadata for a specific hosted asset
     * @param {any} path The resource path of a hosted asset.
     * @param {any} [prefix] Return only those assets where the resource path begins with the specified prefix.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetHostedAsset: (path: any, prefix?: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the current hosting configuration. Hosting is active if the response includes `status: \"setup_ok\"`.
     * @summary Get Hosting Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetHostingConfig: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Move or copy a hosted asset to a new resource path.
     * @summary Move or copy a hosted asset
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminMoveCopyHostedAssetRequest} adminMoveCopyHostedAssetRequest The hosted asset file and its metadata. (Must use &#x60;Content-Type: multipart/mixed&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminMoveCopyHostedAsset: (groupId: any, appId: any, adminMoveCopyHostedAssetRequest: AdminMoveCopyHostedAssetRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update the metadata attributes of a hosted asset at a specific resource path.
     * @summary Update the metadata attributes of a hosted asset
     * @param {any} path The resource path of a hosted asset.
     * @param {AdminUpdateHostedAssetRequest} adminUpdateHostedAssetRequest The new metadata attributes for the hosted asset. These attributes replace all existing attributes for the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateHostedAsset: (path: any, adminUpdateHostedAssetRequest: AdminUpdateHostedAssetRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Upload or replace a hosted asset at a specific resource path.
     * @summary Upload or replace a hosted asset
     * @param {any} path The resource path of a hosted asset.
     * @param {AdminUploadHostedAssetRequest} adminUploadHostedAssetRequest The hosted asset file and its metadata. (Must use &#x60;Content-Type: multipart/mixed&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUploadHostedAsset: (path: any, adminUploadHostedAssetRequest: AdminUploadHostedAssetRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * HostingApi - functional programming interface
 * @export
 */
export declare const HostingApiFp: (configuration?: Configuration) => {
    /**
     * Enable or disable App Services Hosting for your app. Changes to hosting can take up to 15 minutes to take effect. This endpoint does not notify you when the changes have taken effect, only that the change operation was successfully received by the server.  You can see if the hosting enablement/disablement is complete by calling the [Get Hosting Configuration](#operation/adminGetHostingConfig) endpoint.
     * @summary Enable/Disable Hosting
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminEnableDisableHostingRequest} [adminEnableDisableHostingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminEnableDisableHosting(groupId: any, appId: any, adminEnableDisableHostingRequest?: AdminEnableDisableHostingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary List all hosted assets
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetAllHostedAssets(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Retrieve metadata for a specific hosted asset
     * @param {any} path The resource path of a hosted asset.
     * @param {any} [prefix] Return only those assets where the resource path begins with the specified prefix.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetHostedAsset(path: any, prefix?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HostedAssetMetadata>>;
    /**
     * Returns the current hosting configuration. Hosting is active if the response includes `status: \"setup_ok\"`.
     * @summary Get Hosting Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetHostingConfig(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HostingConfiguration>>;
    /**
     * Move or copy a hosted asset to a new resource path.
     * @summary Move or copy a hosted asset
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminMoveCopyHostedAssetRequest} adminMoveCopyHostedAssetRequest The hosted asset file and its metadata. (Must use &#x60;Content-Type: multipart/mixed&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminMoveCopyHostedAsset(groupId: any, appId: any, adminMoveCopyHostedAssetRequest: AdminMoveCopyHostedAssetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Update the metadata attributes of a hosted asset at a specific resource path.
     * @summary Update the metadata attributes of a hosted asset
     * @param {any} path The resource path of a hosted asset.
     * @param {AdminUpdateHostedAssetRequest} adminUpdateHostedAssetRequest The new metadata attributes for the hosted asset. These attributes replace all existing attributes for the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateHostedAsset(path: any, adminUpdateHostedAssetRequest: AdminUpdateHostedAssetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Upload or replace a hosted asset at a specific resource path.
     * @summary Upload or replace a hosted asset
     * @param {any} path The resource path of a hosted asset.
     * @param {AdminUploadHostedAssetRequest} adminUploadHostedAssetRequest The hosted asset file and its metadata. (Must use &#x60;Content-Type: multipart/mixed&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUploadHostedAsset(path: any, adminUploadHostedAssetRequest: AdminUploadHostedAssetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * HostingApi - factory interface
 * @export
 */
export declare const HostingApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Enable or disable App Services Hosting for your app. Changes to hosting can take up to 15 minutes to take effect. This endpoint does not notify you when the changes have taken effect, only that the change operation was successfully received by the server.  You can see if the hosting enablement/disablement is complete by calling the [Get Hosting Configuration](#operation/adminGetHostingConfig) endpoint.
     * @summary Enable/Disable Hosting
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminEnableDisableHostingRequest} [adminEnableDisableHostingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminEnableDisableHosting(groupId: any, appId: any, adminEnableDisableHostingRequest?: AdminEnableDisableHostingRequest, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary List all hosted assets
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetAllHostedAssets(groupId: any, appId: any, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Retrieve metadata for a specific hosted asset
     * @param {any} path The resource path of a hosted asset.
     * @param {any} [prefix] Return only those assets where the resource path begins with the specified prefix.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetHostedAsset(path: any, prefix?: any, options?: any): AxiosPromise<HostedAssetMetadata>;
    /**
     * Returns the current hosting configuration. Hosting is active if the response includes `status: \"setup_ok\"`.
     * @summary Get Hosting Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetHostingConfig(groupId: any, appId: any, options?: any): AxiosPromise<HostingConfiguration>;
    /**
     * Move or copy a hosted asset to a new resource path.
     * @summary Move or copy a hosted asset
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminMoveCopyHostedAssetRequest} adminMoveCopyHostedAssetRequest The hosted asset file and its metadata. (Must use &#x60;Content-Type: multipart/mixed&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminMoveCopyHostedAsset(groupId: any, appId: any, adminMoveCopyHostedAssetRequest: AdminMoveCopyHostedAssetRequest, options?: any): AxiosPromise<void>;
    /**
     * Update the metadata attributes of a hosted asset at a specific resource path.
     * @summary Update the metadata attributes of a hosted asset
     * @param {any} path The resource path of a hosted asset.
     * @param {AdminUpdateHostedAssetRequest} adminUpdateHostedAssetRequest The new metadata attributes for the hosted asset. These attributes replace all existing attributes for the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateHostedAsset(path: any, adminUpdateHostedAssetRequest: AdminUpdateHostedAssetRequest, options?: any): AxiosPromise<void>;
    /**
     * Upload or replace a hosted asset at a specific resource path.
     * @summary Upload or replace a hosted asset
     * @param {any} path The resource path of a hosted asset.
     * @param {AdminUploadHostedAssetRequest} adminUploadHostedAssetRequest The hosted asset file and its metadata. (Must use &#x60;Content-Type: multipart/mixed&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUploadHostedAsset(path: any, adminUploadHostedAssetRequest: AdminUploadHostedAssetRequest, options?: any): AxiosPromise<void>;
};
/**
 * HostingApi - interface
 * @export
 * @interface HostingApi
 */
export interface HostingApiInterface {
    /**
     * Enable or disable App Services Hosting for your app. Changes to hosting can take up to 15 minutes to take effect. This endpoint does not notify you when the changes have taken effect, only that the change operation was successfully received by the server.  You can see if the hosting enablement/disablement is complete by calling the [Get Hosting Configuration](#operation/adminGetHostingConfig) endpoint.
     * @summary Enable/Disable Hosting
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminEnableDisableHostingRequest} [adminEnableDisableHostingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HostingApiInterface
     */
    adminEnableDisableHosting(groupId: any, appId: any, adminEnableDisableHostingRequest?: AdminEnableDisableHostingRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary List all hosted assets
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HostingApiInterface
     */
    adminGetAllHostedAssets(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     *
     * @summary Retrieve metadata for a specific hosted asset
     * @param {any} path The resource path of a hosted asset.
     * @param {any} [prefix] Return only those assets where the resource path begins with the specified prefix.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HostingApiInterface
     */
    adminGetHostedAsset(path: any, prefix?: any, options?: AxiosRequestConfig): AxiosPromise<HostedAssetMetadata>;
    /**
     * Returns the current hosting configuration. Hosting is active if the response includes `status: \"setup_ok\"`.
     * @summary Get Hosting Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HostingApiInterface
     */
    adminGetHostingConfig(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<HostingConfiguration>;
    /**
     * Move or copy a hosted asset to a new resource path.
     * @summary Move or copy a hosted asset
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminMoveCopyHostedAssetRequest} adminMoveCopyHostedAssetRequest The hosted asset file and its metadata. (Must use &#x60;Content-Type: multipart/mixed&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HostingApiInterface
     */
    adminMoveCopyHostedAsset(groupId: any, appId: any, adminMoveCopyHostedAssetRequest: AdminMoveCopyHostedAssetRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Update the metadata attributes of a hosted asset at a specific resource path.
     * @summary Update the metadata attributes of a hosted asset
     * @param {any} path The resource path of a hosted asset.
     * @param {AdminUpdateHostedAssetRequest} adminUpdateHostedAssetRequest The new metadata attributes for the hosted asset. These attributes replace all existing attributes for the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HostingApiInterface
     */
    adminUpdateHostedAsset(path: any, adminUpdateHostedAssetRequest: AdminUpdateHostedAssetRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Upload or replace a hosted asset at a specific resource path.
     * @summary Upload or replace a hosted asset
     * @param {any} path The resource path of a hosted asset.
     * @param {AdminUploadHostedAssetRequest} adminUploadHostedAssetRequest The hosted asset file and its metadata. (Must use &#x60;Content-Type: multipart/mixed&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HostingApiInterface
     */
    adminUploadHostedAsset(path: any, adminUploadHostedAssetRequest: AdminUploadHostedAssetRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
}
/**
 * HostingApi - object-oriented interface
 * @export
 * @class HostingApi
 * @extends {BaseAPI}
 */
export declare class HostingApi extends BaseAPI implements HostingApiInterface {
    /**
     * Enable or disable App Services Hosting for your app. Changes to hosting can take up to 15 minutes to take effect. This endpoint does not notify you when the changes have taken effect, only that the change operation was successfully received by the server.  You can see if the hosting enablement/disablement is complete by calling the [Get Hosting Configuration](#operation/adminGetHostingConfig) endpoint.
     * @summary Enable/Disable Hosting
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminEnableDisableHostingRequest} [adminEnableDisableHostingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HostingApi
     */
    adminEnableDisableHosting(groupId: any, appId: any, adminEnableDisableHostingRequest?: AdminEnableDisableHostingRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary List all hosted assets
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HostingApi
     */
    adminGetAllHostedAssets(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Retrieve metadata for a specific hosted asset
     * @param {any} path The resource path of a hosted asset.
     * @param {any} [prefix] Return only those assets where the resource path begins with the specified prefix.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HostingApi
     */
    adminGetHostedAsset(path: any, prefix?: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<HostedAssetMetadata, any>>;
    /**
     * Returns the current hosting configuration. Hosting is active if the response includes `status: \"setup_ok\"`.
     * @summary Get Hosting Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HostingApi
     */
    adminGetHostingConfig(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<HostingConfiguration, any>>;
    /**
     * Move or copy a hosted asset to a new resource path.
     * @summary Move or copy a hosted asset
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminMoveCopyHostedAssetRequest} adminMoveCopyHostedAssetRequest The hosted asset file and its metadata. (Must use &#x60;Content-Type: multipart/mixed&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HostingApi
     */
    adminMoveCopyHostedAsset(groupId: any, appId: any, adminMoveCopyHostedAssetRequest: AdminMoveCopyHostedAssetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update the metadata attributes of a hosted asset at a specific resource path.
     * @summary Update the metadata attributes of a hosted asset
     * @param {any} path The resource path of a hosted asset.
     * @param {AdminUpdateHostedAssetRequest} adminUpdateHostedAssetRequest The new metadata attributes for the hosted asset. These attributes replace all existing attributes for the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HostingApi
     */
    adminUpdateHostedAsset(path: any, adminUpdateHostedAssetRequest: AdminUpdateHostedAssetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Upload or replace a hosted asset at a specific resource path.
     * @summary Upload or replace a hosted asset
     * @param {any} path The resource path of a hosted asset.
     * @param {AdminUploadHostedAssetRequest} adminUploadHostedAssetRequest The hosted asset file and its metadata. (Must use &#x60;Content-Type: multipart/mixed&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HostingApi
     */
    adminUploadHostedAsset(path: any, adminUploadHostedAssetRequest: AdminUploadHostedAssetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * LogForwardersApi - axios parameter creator
 * @export
 */
export declare const LogForwardersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {LogForwarder} body A log forwarder configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLogForwarder: (groupId: any, appId: any, body: LogForwarder, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGwarder: (groupId: any, appId: any, forwarderId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Disable a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    disableLogForwarder: (groupId: any, appId: any, forwarderId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Enable a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enableLogForwarder: (groupId: any, appId: any, forwarderId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a specific log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLogForwarder: (groupId: any, appId: any, forwarderId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List log forwarders.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLogForwarders: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {LogForwarder} body A log forwarder configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLogForwarder: (groupId: any, appId: any, forwarderId: any, body: LogForwarder, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * LogForwardersApi - functional programming interface
 * @export
 */
export declare const LogForwardersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {LogForwarder} body A log forwarder configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLogForwarder(groupId: any, appId: any, body: LogForwarder, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogForwarder>>;
    /**
     *
     * @summary Delete a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGwarder(groupId: any, appId: any, forwarderId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Disable a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    disableLogForwarder(groupId: any, appId: any, forwarderId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Enable a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enableLogForwarder(groupId: any, appId: any, forwarderId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get a specific log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLogForwarder(groupId: any, appId: any, forwarderId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogForwarder>>;
    /**
     *
     * @summary List log forwarders.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLogForwarders(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Update a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {LogForwarder} body A log forwarder configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLogForwarder(groupId: any, appId: any, forwarderId: any, body: LogForwarder, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogForwarder>>;
};
/**
 * LogForwardersApi - factory interface
 * @export
 */
export declare const LogForwardersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {LogForwarder} body A log forwarder configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLogForwarder(groupId: any, appId: any, body: LogForwarder, options?: any): AxiosPromise<LogForwarder>;
    /**
     *
     * @summary Delete a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGwarder(groupId: any, appId: any, forwarderId: any, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Disable a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    disableLogForwarder(groupId: any, appId: any, forwarderId: any, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Enable a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enableLogForwarder(groupId: any, appId: any, forwarderId: any, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Get a specific log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLogForwarder(groupId: any, appId: any, forwarderId: any, options?: any): AxiosPromise<LogForwarder>;
    /**
     *
     * @summary List log forwarders.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLogForwarders(groupId: any, appId: any, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Update a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {LogForwarder} body A log forwarder configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLogForwarder(groupId: any, appId: any, forwarderId: any, body: LogForwarder, options?: any): AxiosPromise<LogForwarder>;
};
/**
 * LogForwardersApi - interface
 * @export
 * @interface LogForwardersApi
 */
export interface LogForwardersApiInterface {
    /**
     *
     * @summary Create a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {LogForwarder} body A log forwarder configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogForwardersApiInterface
     */
    createLogForwarder(groupId: any, appId: any, body: LogForwarder, options?: AxiosRequestConfig): AxiosPromise<LogForwarder>;
    /**
     *
     * @summary Delete a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogForwardersApiInterface
     */
    deleteGwarder(groupId: any, appId: any, forwarderId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Disable a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogForwardersApiInterface
     */
    disableLogForwarder(groupId: any, appId: any, forwarderId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Enable a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogForwardersApiInterface
     */
    enableLogForwarder(groupId: any, appId: any, forwarderId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get a specific log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogForwardersApiInterface
     */
    getLogForwarder(groupId: any, appId: any, forwarderId: any, options?: AxiosRequestConfig): AxiosPromise<LogForwarder>;
    /**
     *
     * @summary List log forwarders.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogForwardersApiInterface
     */
    listLogForwarders(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     *
     * @summary Update a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {LogForwarder} body A log forwarder configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogForwardersApiInterface
     */
    updateLogForwarder(groupId: any, appId: any, forwarderId: any, body: LogForwarder, options?: AxiosRequestConfig): AxiosPromise<LogForwarder>;
}
/**
 * LogForwardersApi - object-oriented interface
 * @export
 * @class LogForwardersApi
 * @extends {BaseAPI}
 */
export declare class LogForwardersApi extends BaseAPI implements LogForwardersApiInterface {
    /**
     *
     * @summary Create a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {LogForwarder} body A log forwarder configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogForwardersApi
     */
    createLogForwarder(groupId: any, appId: any, body: LogForwarder, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LogForwarder, any>>;
    /**
     *
     * @summary Delete a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogForwardersApi
     */
    deleteGwarder(groupId: any, appId: any, forwarderId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Disable a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogForwardersApi
     */
    disableLogForwarder(groupId: any, appId: any, forwarderId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Enable a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogForwardersApi
     */
    enableLogForwarder(groupId: any, appId: any, forwarderId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get a specific log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogForwardersApi
     */
    getLogForwarder(groupId: any, appId: any, forwarderId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LogForwarder, any>>;
    /**
     *
     * @summary List log forwarders.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogForwardersApi
     */
    listLogForwarders(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Update a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {LogForwarder} body A log forwarder configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogForwardersApi
     */
    updateLogForwarder(groupId: any, appId: any, forwarderId: any, body: LogForwarder, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LogForwarder, any>>;
}
/**
 * LogsApi - axios parameter creator
 * @export
 */
export declare const LogsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieve App Services logs
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [coId] Return only log messages associated with the given request Correlation ID.
     * @param {any} [errorsOnly] The value of this field does not matter. If included in the request, this endpoint only returns error logs (even if the value is set to &#x60;false&#x60;). If this field is excluded from the request, this endpoint only returns non-error logs.
     * @param {any} [userId] Return only log messages associated with the given &#x60;user_id&#x60;.
     * @param {any} [startDate] The date and time in ISO 8601 at which to begin returning results, exclusive.
     * @param {any} [endDate] The date and time in ISO 8601 at which to cease returning results, inclusive.
     * @param {any} [skip] The offset number of matching log entries to skip before including them in the response.
     * @param {any} [limit] The maximum number of log entries to include in the response. If the query matches more than this many logs, it returns documents in ascending order by date until the limit is reached.
     * @param {AdminGetLogsTypeEnum} [type] The kind of log you would like to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetLogs: (groupId: any, appId: any, coId?: any, errorsOnly?: any, userId?: any, startDate?: any, endDate?: any, skip?: any, limit?: any, type?: AdminGetLogsTypeEnum, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * LogsApi - functional programming interface
 * @export
 */
export declare const LogsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieve App Services logs
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [coId] Return only log messages associated with the given request Correlation ID.
     * @param {any} [errorsOnly] The value of this field does not matter. If included in the request, this endpoint only returns error logs (even if the value is set to &#x60;false&#x60;). If this field is excluded from the request, this endpoint only returns non-error logs.
     * @param {any} [userId] Return only log messages associated with the given &#x60;user_id&#x60;.
     * @param {any} [startDate] The date and time in ISO 8601 at which to begin returning results, exclusive.
     * @param {any} [endDate] The date and time in ISO 8601 at which to cease returning results, inclusive.
     * @param {any} [skip] The offset number of matching log entries to skip before including them in the response.
     * @param {any} [limit] The maximum number of log entries to include in the response. If the query matches more than this many logs, it returns documents in ascending order by date until the limit is reached.
     * @param {AdminGetLogsTypeEnum} [type] The kind of log you would like to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetLogs(groupId: any, appId: any, coId?: any, errorsOnly?: any, userId?: any, startDate?: any, endDate?: any, skip?: any, limit?: any, type?: AdminGetLogsTypeEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminGetLogs200Response>>;
};
/**
 * LogsApi - factory interface
 * @export
 */
export declare const LogsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Retrieve App Services logs
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [coId] Return only log messages associated with the given request Correlation ID.
     * @param {any} [errorsOnly] The value of this field does not matter. If included in the request, this endpoint only returns error logs (even if the value is set to &#x60;false&#x60;). If this field is excluded from the request, this endpoint only returns non-error logs.
     * @param {any} [userId] Return only log messages associated with the given &#x60;user_id&#x60;.
     * @param {any} [startDate] The date and time in ISO 8601 at which to begin returning results, exclusive.
     * @param {any} [endDate] The date and time in ISO 8601 at which to cease returning results, inclusive.
     * @param {any} [skip] The offset number of matching log entries to skip before including them in the response.
     * @param {any} [limit] The maximum number of log entries to include in the response. If the query matches more than this many logs, it returns documents in ascending order by date until the limit is reached.
     * @param {AdminGetLogsTypeEnum} [type] The kind of log you would like to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetLogs(groupId: any, appId: any, coId?: any, errorsOnly?: any, userId?: any, startDate?: any, endDate?: any, skip?: any, limit?: any, type?: AdminGetLogsTypeEnum, options?: any): AxiosPromise<AdminGetLogs200Response>;
};
/**
 * LogsApi - interface
 * @export
 * @interface LogsApi
 */
export interface LogsApiInterface {
    /**
     *
     * @summary Retrieve App Services logs
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [coId] Return only log messages associated with the given request Correlation ID.
     * @param {any} [errorsOnly] The value of this field does not matter. If included in the request, this endpoint only returns error logs (even if the value is set to &#x60;false&#x60;). If this field is excluded from the request, this endpoint only returns non-error logs.
     * @param {any} [userId] Return only log messages associated with the given &#x60;user_id&#x60;.
     * @param {any} [startDate] The date and time in ISO 8601 at which to begin returning results, exclusive.
     * @param {any} [endDate] The date and time in ISO 8601 at which to cease returning results, inclusive.
     * @param {any} [skip] The offset number of matching log entries to skip before including them in the response.
     * @param {any} [limit] The maximum number of log entries to include in the response. If the query matches more than this many logs, it returns documents in ascending order by date until the limit is reached.
     * @param {AdminGetLogsTypeEnum} [type] The kind of log you would like to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogsApiInterface
     */
    adminGetLogs(groupId: any, appId: any, coId?: any, errorsOnly?: any, userId?: any, startDate?: any, endDate?: any, skip?: any, limit?: any, type?: AdminGetLogsTypeEnum, options?: AxiosRequestConfig): AxiosPromise<AdminGetLogs200Response>;
}
/**
 * LogsApi - object-oriented interface
 * @export
 * @class LogsApi
 * @extends {BaseAPI}
 */
export declare class LogsApi extends BaseAPI implements LogsApiInterface {
    /**
     *
     * @summary Retrieve App Services logs
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [coId] Return only log messages associated with the given request Correlation ID.
     * @param {any} [errorsOnly] The value of this field does not matter. If included in the request, this endpoint only returns error logs (even if the value is set to &#x60;false&#x60;). If this field is excluded from the request, this endpoint only returns non-error logs.
     * @param {any} [userId] Return only log messages associated with the given &#x60;user_id&#x60;.
     * @param {any} [startDate] The date and time in ISO 8601 at which to begin returning results, exclusive.
     * @param {any} [endDate] The date and time in ISO 8601 at which to cease returning results, inclusive.
     * @param {any} [skip] The offset number of matching log entries to skip before including them in the response.
     * @param {any} [limit] The maximum number of log entries to include in the response. If the query matches more than this many logs, it returns documents in ascending order by date until the limit is reached.
     * @param {AdminGetLogsTypeEnum} [type] The kind of log you would like to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogsApi
     */
    adminGetLogs(groupId: any, appId: any, coId?: any, errorsOnly?: any, userId?: any, startDate?: any, endDate?: any, skip?: any, limit?: any, type?: AdminGetLogsTypeEnum, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AdminGetLogs200Response, any>>;
}
/**
 * @export
 */
export declare const AdminGetLogsTypeEnum: {
    readonly TriggerFailure: "TRIGGER_FAILURE";
    readonly DbTrigger: "DB_TRIGGER";
    readonly AuthTrigger: "AUTH_TRIGGER";
    readonly ScheduledTrigger: "SCHEDULED_TRIGGER";
    readonly Function: "FUNCTION";
    readonly ServiceFunction: "SERVICE_FUNCTION";
    readonly StreamFunction: "STREAM_FUNCTION";
    readonly ServiceStreamFunction: "SERVICE_STREAM_FUNCTION";
    readonly Auth: "AUTH";
    readonly Webhook: "WEBHOOK";
    readonly Endpoint: "ENDPOINT";
    readonly Push: "PUSH";
    readonly Api: "API";
    readonly ApiKey: "API_KEY";
    readonly Graphql: "GRAPHQL";
    readonly SyncConnectionStart: "SYNC_CONNECTION_START";
    readonly SyncConnectionEnd: "SYNC_CONNECTION_END";
    readonly SyncSessionStart: "SYNC_SESSION_START";
    readonly SyncSessionEnd: "SYNC_SESSION_END";
    readonly SyncClientWrite: "SYNC_CLIENT_WRITE";
    readonly SyncError: "SYNC_ERROR";
    readonly SyncOther: "SYNC_OTHER";
    readonly SchemaAdditiveChange: "SCHEMA_ADDITIVE_CHANGE";
    readonly SchemaGeneration: "SCHEMA_GENERATION";
    readonly SchemaValidation: "SCHEMA_VALIDATION";
    readonly LogForwarder: "LOG_FORWARDER";
};
export type AdminGetLogsTypeEnum = typeof AdminGetLogsTypeEnum[keyof typeof AdminGetLogsTypeEnum];
/**
 * MetricsApi - axios parameter creator
 * @export
 */
export declare const MetricsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Retrieves a variety of metrics, including: Compute Time, Data Transfer, Sync Minutes, Requests Succeeded, Requests Failed. For a complete list of available metrics, see [App Services Metrics Reference](https://mongodb.com/docs/atlas/app-services/reference/metrics).
     * @summary Retrieve App Services metrics
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} start The ISO-8601 date and time of the start of the query period (e.g. \&quot;2022-10-27T14:01:01Z\&quot;).
     * @param {any} end The ISO-8601 date and time of the end of the query period (e.g. \&quot;2022-12-27T14:01:01Z\&quot;).
     * @param {any} granularity Specifies the granularity of the query period as an [ISO-8601 duration value](https://en.wikipedia.org/wiki/ISO_8601#Durations). Examples include \&quot;P31D\&quot; (31 day), \&quot;PT1H\&quot; (1 hour), and \&quot;PT5M\&quot; (5 minutes).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetMetrics: (groupId: any, appId: any, start: any, end: any, granularity: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * MetricsApi - functional programming interface
 * @export
 */
export declare const MetricsApiFp: (configuration?: Configuration) => {
    /**
     * Retrieves a variety of metrics, including: Compute Time, Data Transfer, Sync Minutes, Requests Succeeded, Requests Failed. For a complete list of available metrics, see [App Services Metrics Reference](https://mongodb.com/docs/atlas/app-services/reference/metrics).
     * @summary Retrieve App Services metrics
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} start The ISO-8601 date and time of the start of the query period (e.g. \&quot;2022-10-27T14:01:01Z\&quot;).
     * @param {any} end The ISO-8601 date and time of the end of the query period (e.g. \&quot;2022-12-27T14:01:01Z\&quot;).
     * @param {any} granularity Specifies the granularity of the query period as an [ISO-8601 duration value](https://en.wikipedia.org/wiki/ISO_8601#Durations). Examples include \&quot;P31D\&quot; (31 day), \&quot;PT1H\&quot; (1 hour), and \&quot;PT5M\&quot; (5 minutes).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetMetrics(groupId: any, appId: any, start: any, end: any, granularity: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminGetMetrics200Response>>;
};
/**
 * MetricsApi - factory interface
 * @export
 */
export declare const MetricsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieves a variety of metrics, including: Compute Time, Data Transfer, Sync Minutes, Requests Succeeded, Requests Failed. For a complete list of available metrics, see [App Services Metrics Reference](https://mongodb.com/docs/atlas/app-services/reference/metrics).
     * @summary Retrieve App Services metrics
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} start The ISO-8601 date and time of the start of the query period (e.g. \&quot;2022-10-27T14:01:01Z\&quot;).
     * @param {any} end The ISO-8601 date and time of the end of the query period (e.g. \&quot;2022-12-27T14:01:01Z\&quot;).
     * @param {any} granularity Specifies the granularity of the query period as an [ISO-8601 duration value](https://en.wikipedia.org/wiki/ISO_8601#Durations). Examples include \&quot;P31D\&quot; (31 day), \&quot;PT1H\&quot; (1 hour), and \&quot;PT5M\&quot; (5 minutes).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetMetrics(groupId: any, appId: any, start: any, end: any, granularity: any, options?: any): AxiosPromise<AdminGetMetrics200Response>;
};
/**
 * MetricsApi - interface
 * @export
 * @interface MetricsApi
 */
export interface MetricsApiInterface {
    /**
     * Retrieves a variety of metrics, including: Compute Time, Data Transfer, Sync Minutes, Requests Succeeded, Requests Failed. For a complete list of available metrics, see [App Services Metrics Reference](https://mongodb.com/docs/atlas/app-services/reference/metrics).
     * @summary Retrieve App Services metrics
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} start The ISO-8601 date and time of the start of the query period (e.g. \&quot;2022-10-27T14:01:01Z\&quot;).
     * @param {any} end The ISO-8601 date and time of the end of the query period (e.g. \&quot;2022-12-27T14:01:01Z\&quot;).
     * @param {any} granularity Specifies the granularity of the query period as an [ISO-8601 duration value](https://en.wikipedia.org/wiki/ISO_8601#Durations). Examples include \&quot;P31D\&quot; (31 day), \&quot;PT1H\&quot; (1 hour), and \&quot;PT5M\&quot; (5 minutes).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApiInterface
     */
    adminGetMetrics(groupId: any, appId: any, start: any, end: any, granularity: any, options?: AxiosRequestConfig): AxiosPromise<AdminGetMetrics200Response>;
}
/**
 * MetricsApi - object-oriented interface
 * @export
 * @class MetricsApi
 * @extends {BaseAPI}
 */
export declare class MetricsApi extends BaseAPI implements MetricsApiInterface {
    /**
     * Retrieves a variety of metrics, including: Compute Time, Data Transfer, Sync Minutes, Requests Succeeded, Requests Failed. For a complete list of available metrics, see [App Services Metrics Reference](https://mongodb.com/docs/atlas/app-services/reference/metrics).
     * @summary Retrieve App Services metrics
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} start The ISO-8601 date and time of the start of the query period (e.g. \&quot;2022-10-27T14:01:01Z\&quot;).
     * @param {any} end The ISO-8601 date and time of the end of the query period (e.g. \&quot;2022-12-27T14:01:01Z\&quot;).
     * @param {any} granularity Specifies the granularity of the query period as an [ISO-8601 duration value](https://en.wikipedia.org/wiki/ISO_8601#Durations). Examples include \&quot;P31D\&quot; (31 day), \&quot;PT1H\&quot; (1 hour), and \&quot;PT5M\&quot; (5 minutes).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    adminGetMetrics(groupId: any, appId: any, start: any, end: any, granularity: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AdminGetMetrics200Response, any>>;
}
/**
 * NotificationsApi - axios parameter creator
 * @export
 */
export declare const NotificationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
     * @summary Create a push notification
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {NewMessage} newMessage The notification to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateNotification: (groupId: any, appId: any, newMessage: NewMessage, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) message.
     * @summary Delete a push notification message
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteMessage: (groupId: any, appId: any, messageId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) message.
     * @summary Retrieve a push notification message
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetMessage: (groupId: any, appId: any, messageId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List [push notifications](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
     * @summary List push notifications
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {MessageState} [state] Only list notifications with the given state.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListNotifications: (groupId: any, appId: any, state?: MessageState, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Send a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
     * @summary Send a push notification
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminSendMessage: (groupId: any, appId: any, messageId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Set a [push notification\'s](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) type.
     * @summary Set a push notification\'s type
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminSetMessageType: (groupId: any, appId: any, messageId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) message.
     * @summary Update a push notification
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateMessage: (groupId: any, appId: any, messageId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * NotificationsApi - functional programming interface
 * @export
 */
export declare const NotificationsApiFp: (configuration?: Configuration) => {
    /**
     * Create a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
     * @summary Create a push notification
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {NewMessage} newMessage The notification to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateNotification(groupId: any, appId: any, newMessage: NewMessage, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) message.
     * @summary Delete a push notification message
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteMessage(groupId: any, appId: any, messageId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) message.
     * @summary Retrieve a push notification message
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetMessage(groupId: any, appId: any, messageId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>>;
    /**
     * List [push notifications](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
     * @summary List push notifications
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {MessageState} [state] Only list notifications with the given state.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListNotifications(groupId: any, appId: any, state?: MessageState, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Send a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
     * @summary Send a push notification
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminSendMessage(groupId: any, appId: any, messageId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Set a [push notification\'s](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) type.
     * @summary Set a push notification\'s type
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminSetMessageType(groupId: any, appId: any, messageId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Update a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) message.
     * @summary Update a push notification
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateMessage(groupId: any, appId: any, messageId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>>;
};
/**
 * NotificationsApi - factory interface
 * @export
 */
export declare const NotificationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
     * @summary Create a push notification
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {NewMessage} newMessage The notification to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateNotification(groupId: any, appId: any, newMessage: NewMessage, options?: any): AxiosPromise<void>;
    /**
     * Delete a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) message.
     * @summary Delete a push notification message
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteMessage(groupId: any, appId: any, messageId: any, options?: any): AxiosPromise<void>;
    /**
     * Retrieve a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) message.
     * @summary Retrieve a push notification message
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetMessage(groupId: any, appId: any, messageId: any, options?: any): AxiosPromise<Message>;
    /**
     * List [push notifications](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
     * @summary List push notifications
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {MessageState} [state] Only list notifications with the given state.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListNotifications(groupId: any, appId: any, state?: MessageState, options?: any): AxiosPromise<any>;
    /**
     * Send a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
     * @summary Send a push notification
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminSendMessage(groupId: any, appId: any, messageId: any, options?: any): AxiosPromise<void>;
    /**
     * Set a [push notification\'s](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) type.
     * @summary Set a push notification\'s type
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminSetMessageType(groupId: any, appId: any, messageId: any, options?: any): AxiosPromise<void>;
    /**
     * Update a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) message.
     * @summary Update a push notification
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateMessage(groupId: any, appId: any, messageId: any, options?: any): AxiosPromise<Message>;
};
/**
 * NotificationsApi - interface
 * @export
 * @interface NotificationsApi
 */
export interface NotificationsApiInterface {
    /**
     * Create a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
     * @summary Create a push notification
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {NewMessage} newMessage The notification to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    adminCreateNotification(groupId: any, appId: any, newMessage: NewMessage, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Delete a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) message.
     * @summary Delete a push notification message
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    adminDeleteMessage(groupId: any, appId: any, messageId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Retrieve a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) message.
     * @summary Retrieve a push notification message
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    adminGetMessage(groupId: any, appId: any, messageId: any, options?: AxiosRequestConfig): AxiosPromise<Message>;
    /**
     * List [push notifications](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
     * @summary List push notifications
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {MessageState} [state] Only list notifications with the given state.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    adminListNotifications(groupId: any, appId: any, state?: MessageState, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Send a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
     * @summary Send a push notification
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    adminSendMessage(groupId: any, appId: any, messageId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Set a [push notification\'s](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) type.
     * @summary Set a push notification\'s type
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    adminSetMessageType(groupId: any, appId: any, messageId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Update a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) message.
     * @summary Update a push notification
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    adminUpdateMessage(groupId: any, appId: any, messageId: any, options?: AxiosRequestConfig): AxiosPromise<Message>;
}
/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
export declare class NotificationsApi extends BaseAPI implements NotificationsApiInterface {
    /**
     * Create a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
     * @summary Create a push notification
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {NewMessage} newMessage The notification to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    adminCreateNotification(groupId: any, appId: any, newMessage: NewMessage, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) message.
     * @summary Delete a push notification message
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    adminDeleteMessage(groupId: any, appId: any, messageId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Retrieve a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) message.
     * @summary Retrieve a push notification message
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    adminGetMessage(groupId: any, appId: any, messageId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Message, any>>;
    /**
     * List [push notifications](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
     * @summary List push notifications
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {MessageState} [state] Only list notifications with the given state.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    adminListNotifications(groupId: any, appId: any, state?: MessageState, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Send a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
     * @summary Send a push notification
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    adminSendMessage(groupId: any, appId: any, messageId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Set a [push notification\'s](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) type.
     * @summary Set a push notification\'s type
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    adminSetMessageType(groupId: any, appId: any, messageId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) message.
     * @summary Update a push notification
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    adminUpdateMessage(groupId: any, appId: any, messageId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Message, any>>;
}
/**
 * RulesApi - axios parameter creator
 * @export
 */
export declare const RulesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) for a data source.
     * @summary Create default roles and filters
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {DefaultRule} defaultRule A default rule configuration object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateDefaultRule: (groupId: any, appId: any, serviceId: any, defaultRule: DefaultRule, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Create a rule
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} body The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateRule: (groupId: any, appId: any, serviceId: any, body: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete the [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) of a data source.
     * @summary Delete default roles and filters
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteDefaultRule: (groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Delete a rule
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} ruleId The unique &#x60;_id&#x60; value of a rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteRule: (groupId: any, appId: any, serviceId: any, ruleId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the current [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules).
     * @summary Get default roles and filters
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetDefaultRule: (groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a specific [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Get a rule
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} ruleId The unique &#x60;_id&#x60; value of a rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetRule: (groupId: any, appId: any, serviceId: any, ruleId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all [data access rules](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Get all rules
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListRules: (groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Modify the [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) of a data source.
     * @summary Update default roles and filters
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} body The updated default rule configuration object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateDefaultRule: (groupId: any, appId: any, serviceId: any, body: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Update a rule
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} ruleId The unique &#x60;_id&#x60; value of a rule.
     * @param {any} body The new state of the rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateRule: (groupId: any, appId: any, serviceId: any, ruleId: any, body: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RulesApi - functional programming interface
 * @export
 */
export declare const RulesApiFp: (configuration?: Configuration) => {
    /**
     * Create [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) for a data source.
     * @summary Create default roles and filters
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {DefaultRule} defaultRule A default rule configuration object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateDefaultRule(groupId: any, appId: any, serviceId: any, defaultRule: DefaultRule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefaultRule>>;
    /**
     * Create a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Create a rule
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} body The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateRule(groupId: any, appId: any, serviceId: any, body: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminCreateRule201Response>>;
    /**
     * Delete the [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) of a data source.
     * @summary Delete default roles and filters
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteDefaultRule(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Delete a rule
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} ruleId The unique &#x60;_id&#x60; value of a rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteRule(groupId: any, appId: any, serviceId: any, ruleId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get the current [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules).
     * @summary Get default roles and filters
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetDefaultRule(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefaultRule>>;
    /**
     * Get a specific [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Get a rule
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} ruleId The unique &#x60;_id&#x60; value of a rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetRule(groupId: any, appId: any, serviceId: any, ruleId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * List all [data access rules](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Get all rules
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListRules(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Modify the [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) of a data source.
     * @summary Update default roles and filters
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} body The updated default rule configuration object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateDefaultRule(groupId: any, appId: any, serviceId: any, body: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Update a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Update a rule
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} ruleId The unique &#x60;_id&#x60; value of a rule.
     * @param {any} body The new state of the rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateRule(groupId: any, appId: any, serviceId: any, ruleId: any, body: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * RulesApi - factory interface
 * @export
 */
export declare const RulesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) for a data source.
     * @summary Create default roles and filters
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {DefaultRule} defaultRule A default rule configuration object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateDefaultRule(groupId: any, appId: any, serviceId: any, defaultRule: DefaultRule, options?: any): AxiosPromise<DefaultRule>;
    /**
     * Create a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Create a rule
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} body The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateRule(groupId: any, appId: any, serviceId: any, body: any, options?: any): AxiosPromise<AdminCreateRule201Response>;
    /**
     * Delete the [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) of a data source.
     * @summary Delete default roles and filters
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteDefaultRule(groupId: any, appId: any, serviceId: any, options?: any): AxiosPromise<void>;
    /**
     * Delete a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Delete a rule
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} ruleId The unique &#x60;_id&#x60; value of a rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteRule(groupId: any, appId: any, serviceId: any, ruleId: any, options?: any): AxiosPromise<void>;
    /**
     * Get the current [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules).
     * @summary Get default roles and filters
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetDefaultRule(groupId: any, appId: any, serviceId: any, options?: any): AxiosPromise<DefaultRule>;
    /**
     * Get a specific [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Get a rule
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} ruleId The unique &#x60;_id&#x60; value of a rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetRule(groupId: any, appId: any, serviceId: any, ruleId: any, options?: any): AxiosPromise<any>;
    /**
     * List all [data access rules](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Get all rules
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListRules(groupId: any, appId: any, serviceId: any, options?: any): AxiosPromise<any>;
    /**
     * Modify the [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) of a data source.
     * @summary Update default roles and filters
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} body The updated default rule configuration object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateDefaultRule(groupId: any, appId: any, serviceId: any, body: any, options?: any): AxiosPromise<void>;
    /**
     * Update a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Update a rule
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} ruleId The unique &#x60;_id&#x60; value of a rule.
     * @param {any} body The new state of the rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateRule(groupId: any, appId: any, serviceId: any, ruleId: any, body: any, options?: any): AxiosPromise<void>;
};
/**
 * RulesApi - interface
 * @export
 * @interface RulesApi
 */
export interface RulesApiInterface {
    /**
     * Create [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) for a data source.
     * @summary Create default roles and filters
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {DefaultRule} defaultRule A default rule configuration object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    adminCreateDefaultRule(groupId: any, appId: any, serviceId: any, defaultRule: DefaultRule, options?: AxiosRequestConfig): AxiosPromise<DefaultRule>;
    /**
     * Create a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Create a rule
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} body The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    adminCreateRule(groupId: any, appId: any, serviceId: any, body: any, options?: AxiosRequestConfig): AxiosPromise<AdminCreateRule201Response>;
    /**
     * Delete the [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) of a data source.
     * @summary Delete default roles and filters
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    adminDeleteDefaultRule(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Delete a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Delete a rule
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} ruleId The unique &#x60;_id&#x60; value of a rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    adminDeleteRule(groupId: any, appId: any, serviceId: any, ruleId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get the current [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules).
     * @summary Get default roles and filters
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    adminGetDefaultRule(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): AxiosPromise<DefaultRule>;
    /**
     * Get a specific [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Get a rule
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} ruleId The unique &#x60;_id&#x60; value of a rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    adminGetRule(groupId: any, appId: any, serviceId: any, ruleId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * List all [data access rules](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Get all rules
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    adminListRules(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Modify the [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) of a data source.
     * @summary Update default roles and filters
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} body The updated default rule configuration object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    adminUpdateDefaultRule(groupId: any, appId: any, serviceId: any, body: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Update a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Update a rule
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} ruleId The unique &#x60;_id&#x60; value of a rule.
     * @param {any} body The new state of the rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    adminUpdateRule(groupId: any, appId: any, serviceId: any, ruleId: any, body: any, options?: AxiosRequestConfig): AxiosPromise<void>;
}
/**
 * RulesApi - object-oriented interface
 * @export
 * @class RulesApi
 * @extends {BaseAPI}
 */
export declare class RulesApi extends BaseAPI implements RulesApiInterface {
    /**
     * Create [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) for a data source.
     * @summary Create default roles and filters
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {DefaultRule} defaultRule A default rule configuration object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApi
     */
    adminCreateDefaultRule(groupId: any, appId: any, serviceId: any, defaultRule: DefaultRule, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DefaultRule, any>>;
    /**
     * Create a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Create a rule
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} body The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApi
     */
    adminCreateRule(groupId: any, appId: any, serviceId: any, body: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AdminCreateRule201Response, any>>;
    /**
     * Delete the [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) of a data source.
     * @summary Delete default roles and filters
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApi
     */
    adminDeleteDefaultRule(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Delete a rule
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} ruleId The unique &#x60;_id&#x60; value of a rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApi
     */
    adminDeleteRule(groupId: any, appId: any, serviceId: any, ruleId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get the current [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules).
     * @summary Get default roles and filters
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApi
     */
    adminGetDefaultRule(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DefaultRule, any>>;
    /**
     * Get a specific [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Get a rule
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} ruleId The unique &#x60;_id&#x60; value of a rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApi
     */
    adminGetRule(groupId: any, appId: any, serviceId: any, ruleId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * List all [data access rules](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Get all rules
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApi
     */
    adminListRules(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Modify the [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) of a data source.
     * @summary Update default roles and filters
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} body The updated default rule configuration object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApi
     */
    adminUpdateDefaultRule(groupId: any, appId: any, serviceId: any, body: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Update a rule
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} ruleId The unique &#x60;_id&#x60; value of a rule.
     * @param {any} body The new state of the rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApi
     */
    adminUpdateRule(groupId: any, appId: any, serviceId: any, ruleId: any, body: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * SchemasApi - axios parameter creator
 * @export
 */
export declare const SchemasApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Define a new [schema](https://www.mongodb.com/docs/realm/schemas) for a linked collection.
     * @summary Create a schema
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminCreateSchemaRequest} adminCreateSchemaRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateSchema: (groupId: any, appId: any, adminCreateSchemaRequest: AdminCreateSchemaRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a specific [schema](https://www.mongodb.com/docs/realm/schemas) by its `_id` value.
     * @summary Delete a schema
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} schemaId The unique &#x60;_id&#x60; value of a schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteSchema: (groupId: any, appId: any, schemaId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check if [null type schema validation](https://www.mongodb.com/docs/atlas/app-services/schemas/enforce-a-schema/#validate-null-types) is enabled.
     * @summary Get Null Type Schema Validation Setting
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetNullTypeSchemaValidationSetting: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a specific [schema](https://www.mongodb.com/docs/realm/schemas) by its `_id` value.
     * @summary Get a schema
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} schemaId The unique &#x60;_id&#x60; value of a schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetSchema: (groupId: any, appId: any, schemaId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all defined [schemas](https://www.mongodb.com/docs/realm/schemas).
     * @summary List schemas
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListSchemas: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Enable or disable [null type schema validation](https://www.mongodb.com/docs/atlas/app-services/schemas/enforce-a-schema/#validate-null-types).
     * @summary Set Null Type Schema Validation Setting
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {NullTypeSchemaValidationSetting} nullTypeSchemaValidationSetting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminSetNullTypeSchemaValidationSetting: (groupId: any, appId: any, nullTypeSchemaValidationSetting: NullTypeSchemaValidationSetting, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Replace an existing [schema](https://www.mongodb.com/docs/realm/schemas) with a new one.
     * @summary Update a schema
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} schemaId The unique &#x60;_id&#x60; value of a schema.
     * @param {AdminUpdateSchemaRequest} adminUpdateSchemaRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateSchema: (groupId: any, appId: any, schemaId: any, adminUpdateSchemaRequest: AdminUpdateSchemaRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Query a subset of documents in a collection and validate each match against a schema.
     * @summary Sample & Validate Documents
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} datasourceId The unique &#x60;_id&#x60; value of a MongoDB data source.
     * @param {AdminValidateDocumentsRequest} adminValidateDocumentsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminValidateDocuments: (groupId: any, appId: any, datasourceId: any, adminValidateDocumentsRequest: AdminValidateDocumentsRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SchemasApi - functional programming interface
 * @export
 */
export declare const SchemasApiFp: (configuration?: Configuration) => {
    /**
     * Define a new [schema](https://www.mongodb.com/docs/realm/schemas) for a linked collection.
     * @summary Create a schema
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminCreateSchemaRequest} adminCreateSchemaRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateSchema(groupId: any, appId: any, adminCreateSchemaRequest: AdminCreateSchemaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminCreateSchema200Response>>;
    /**
     * Delete a specific [schema](https://www.mongodb.com/docs/realm/schemas) by its `_id` value.
     * @summary Delete a schema
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} schemaId The unique &#x60;_id&#x60; value of a schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteSchema(groupId: any, appId: any, schemaId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Check if [null type schema validation](https://www.mongodb.com/docs/atlas/app-services/schemas/enforce-a-schema/#validate-null-types) is enabled.
     * @summary Get Null Type Schema Validation Setting
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetNullTypeSchemaValidationSetting(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NullTypeSchemaValidationSetting>>;
    /**
     * Get a specific [schema](https://www.mongodb.com/docs/realm/schemas) by its `_id` value.
     * @summary Get a schema
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} schemaId The unique &#x60;_id&#x60; value of a schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetSchema(groupId: any, appId: any, schemaId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminGetSchema200Response>>;
    /**
     * List all defined [schemas](https://www.mongodb.com/docs/realm/schemas).
     * @summary List schemas
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListSchemas(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Enable or disable [null type schema validation](https://www.mongodb.com/docs/atlas/app-services/schemas/enforce-a-schema/#validate-null-types).
     * @summary Set Null Type Schema Validation Setting
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {NullTypeSchemaValidationSetting} nullTypeSchemaValidationSetting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminSetNullTypeSchemaValidationSetting(groupId: any, appId: any, nullTypeSchemaValidationSetting: NullTypeSchemaValidationSetting, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Replace an existing [schema](https://www.mongodb.com/docs/realm/schemas) with a new one.
     * @summary Update a schema
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} schemaId The unique &#x60;_id&#x60; value of a schema.
     * @param {AdminUpdateSchemaRequest} adminUpdateSchemaRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateSchema(groupId: any, appId: any, schemaId: any, adminUpdateSchemaRequest: AdminUpdateSchemaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Query a subset of documents in a collection and validate each match against a schema.
     * @summary Sample & Validate Documents
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} datasourceId The unique &#x60;_id&#x60; value of a MongoDB data source.
     * @param {AdminValidateDocumentsRequest} adminValidateDocumentsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminValidateDocuments(groupId: any, appId: any, datasourceId: any, adminValidateDocumentsRequest: AdminValidateDocumentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminValidateDocuments200Response>>;
};
/**
 * SchemasApi - factory interface
 * @export
 */
export declare const SchemasApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Define a new [schema](https://www.mongodb.com/docs/realm/schemas) for a linked collection.
     * @summary Create a schema
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminCreateSchemaRequest} adminCreateSchemaRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateSchema(groupId: any, appId: any, adminCreateSchemaRequest: AdminCreateSchemaRequest, options?: any): AxiosPromise<AdminCreateSchema200Response>;
    /**
     * Delete a specific [schema](https://www.mongodb.com/docs/realm/schemas) by its `_id` value.
     * @summary Delete a schema
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} schemaId The unique &#x60;_id&#x60; value of a schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteSchema(groupId: any, appId: any, schemaId: any, options?: any): AxiosPromise<void>;
    /**
     * Check if [null type schema validation](https://www.mongodb.com/docs/atlas/app-services/schemas/enforce-a-schema/#validate-null-types) is enabled.
     * @summary Get Null Type Schema Validation Setting
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetNullTypeSchemaValidationSetting(groupId: any, appId: any, options?: any): AxiosPromise<NullTypeSchemaValidationSetting>;
    /**
     * Get a specific [schema](https://www.mongodb.com/docs/realm/schemas) by its `_id` value.
     * @summary Get a schema
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} schemaId The unique &#x60;_id&#x60; value of a schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetSchema(groupId: any, appId: any, schemaId: any, options?: any): AxiosPromise<AdminGetSchema200Response>;
    /**
     * List all defined [schemas](https://www.mongodb.com/docs/realm/schemas).
     * @summary List schemas
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListSchemas(groupId: any, appId: any, options?: any): AxiosPromise<any>;
    /**
     * Enable or disable [null type schema validation](https://www.mongodb.com/docs/atlas/app-services/schemas/enforce-a-schema/#validate-null-types).
     * @summary Set Null Type Schema Validation Setting
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {NullTypeSchemaValidationSetting} nullTypeSchemaValidationSetting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminSetNullTypeSchemaValidationSetting(groupId: any, appId: any, nullTypeSchemaValidationSetting: NullTypeSchemaValidationSetting, options?: any): AxiosPromise<void>;
    /**
     * Replace an existing [schema](https://www.mongodb.com/docs/realm/schemas) with a new one.
     * @summary Update a schema
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} schemaId The unique &#x60;_id&#x60; value of a schema.
     * @param {AdminUpdateSchemaRequest} adminUpdateSchemaRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateSchema(groupId: any, appId: any, schemaId: any, adminUpdateSchemaRequest: AdminUpdateSchemaRequest, options?: any): AxiosPromise<void>;
    /**
     * Query a subset of documents in a collection and validate each match against a schema.
     * @summary Sample & Validate Documents
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} datasourceId The unique &#x60;_id&#x60; value of a MongoDB data source.
     * @param {AdminValidateDocumentsRequest} adminValidateDocumentsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminValidateDocuments(groupId: any, appId: any, datasourceId: any, adminValidateDocumentsRequest: AdminValidateDocumentsRequest, options?: any): AxiosPromise<AdminValidateDocuments200Response>;
};
/**
 * SchemasApi - interface
 * @export
 * @interface SchemasApi
 */
export interface SchemasApiInterface {
    /**
     * Define a new [schema](https://www.mongodb.com/docs/realm/schemas) for a linked collection.
     * @summary Create a schema
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminCreateSchemaRequest} adminCreateSchemaRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    adminCreateSchema(groupId: any, appId: any, adminCreateSchemaRequest: AdminCreateSchemaRequest, options?: AxiosRequestConfig): AxiosPromise<AdminCreateSchema200Response>;
    /**
     * Delete a specific [schema](https://www.mongodb.com/docs/realm/schemas) by its `_id` value.
     * @summary Delete a schema
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} schemaId The unique &#x60;_id&#x60; value of a schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    adminDeleteSchema(groupId: any, appId: any, schemaId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Check if [null type schema validation](https://www.mongodb.com/docs/atlas/app-services/schemas/enforce-a-schema/#validate-null-types) is enabled.
     * @summary Get Null Type Schema Validation Setting
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    adminGetNullTypeSchemaValidationSetting(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<NullTypeSchemaValidationSetting>;
    /**
     * Get a specific [schema](https://www.mongodb.com/docs/realm/schemas) by its `_id` value.
     * @summary Get a schema
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} schemaId The unique &#x60;_id&#x60; value of a schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    adminGetSchema(groupId: any, appId: any, schemaId: any, options?: AxiosRequestConfig): AxiosPromise<AdminGetSchema200Response>;
    /**
     * List all defined [schemas](https://www.mongodb.com/docs/realm/schemas).
     * @summary List schemas
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    adminListSchemas(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Enable or disable [null type schema validation](https://www.mongodb.com/docs/atlas/app-services/schemas/enforce-a-schema/#validate-null-types).
     * @summary Set Null Type Schema Validation Setting
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {NullTypeSchemaValidationSetting} nullTypeSchemaValidationSetting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    adminSetNullTypeSchemaValidationSetting(groupId: any, appId: any, nullTypeSchemaValidationSetting: NullTypeSchemaValidationSetting, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Replace an existing [schema](https://www.mongodb.com/docs/realm/schemas) with a new one.
     * @summary Update a schema
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} schemaId The unique &#x60;_id&#x60; value of a schema.
     * @param {AdminUpdateSchemaRequest} adminUpdateSchemaRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    adminUpdateSchema(groupId: any, appId: any, schemaId: any, adminUpdateSchemaRequest: AdminUpdateSchemaRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Query a subset of documents in a collection and validate each match against a schema.
     * @summary Sample & Validate Documents
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} datasourceId The unique &#x60;_id&#x60; value of a MongoDB data source.
     * @param {AdminValidateDocumentsRequest} adminValidateDocumentsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    adminValidateDocuments(groupId: any, appId: any, datasourceId: any, adminValidateDocumentsRequest: AdminValidateDocumentsRequest, options?: AxiosRequestConfig): AxiosPromise<AdminValidateDocuments200Response>;
}
/**
 * SchemasApi - object-oriented interface
 * @export
 * @class SchemasApi
 * @extends {BaseAPI}
 */
export declare class SchemasApi extends BaseAPI implements SchemasApiInterface {
    /**
     * Define a new [schema](https://www.mongodb.com/docs/realm/schemas) for a linked collection.
     * @summary Create a schema
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminCreateSchemaRequest} adminCreateSchemaRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    adminCreateSchema(groupId: any, appId: any, adminCreateSchemaRequest: AdminCreateSchemaRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AdminCreateSchema200Response, any>>;
    /**
     * Delete a specific [schema](https://www.mongodb.com/docs/realm/schemas) by its `_id` value.
     * @summary Delete a schema
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} schemaId The unique &#x60;_id&#x60; value of a schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    adminDeleteSchema(groupId: any, appId: any, schemaId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Check if [null type schema validation](https://www.mongodb.com/docs/atlas/app-services/schemas/enforce-a-schema/#validate-null-types) is enabled.
     * @summary Get Null Type Schema Validation Setting
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    adminGetNullTypeSchemaValidationSetting(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NullTypeSchemaValidationSetting, any>>;
    /**
     * Get a specific [schema](https://www.mongodb.com/docs/realm/schemas) by its `_id` value.
     * @summary Get a schema
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} schemaId The unique &#x60;_id&#x60; value of a schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    adminGetSchema(groupId: any, appId: any, schemaId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AdminGetSchema200Response, any>>;
    /**
     * List all defined [schemas](https://www.mongodb.com/docs/realm/schemas).
     * @summary List schemas
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    adminListSchemas(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Enable or disable [null type schema validation](https://www.mongodb.com/docs/atlas/app-services/schemas/enforce-a-schema/#validate-null-types).
     * @summary Set Null Type Schema Validation Setting
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {NullTypeSchemaValidationSetting} nullTypeSchemaValidationSetting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    adminSetNullTypeSchemaValidationSetting(groupId: any, appId: any, nullTypeSchemaValidationSetting: NullTypeSchemaValidationSetting, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Replace an existing [schema](https://www.mongodb.com/docs/realm/schemas) with a new one.
     * @summary Update a schema
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} schemaId The unique &#x60;_id&#x60; value of a schema.
     * @param {AdminUpdateSchemaRequest} adminUpdateSchemaRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    adminUpdateSchema(groupId: any, appId: any, schemaId: any, adminUpdateSchemaRequest: AdminUpdateSchemaRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Query a subset of documents in a collection and validate each match against a schema.
     * @summary Sample & Validate Documents
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} datasourceId The unique &#x60;_id&#x60; value of a MongoDB data source.
     * @param {AdminValidateDocumentsRequest} adminValidateDocumentsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    adminValidateDocuments(groupId: any, appId: any, datasourceId: any, adminValidateDocumentsRequest: AdminValidateDocumentsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AdminValidateDocuments200Response, any>>;
}
/**
 * SecretsApi - axios parameter creator
 * @export
 */
export declare const SecretsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets).
     * @summary Create a new Secret
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminCreateASecretRequest} adminCreateASecretRequest The Secret to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateASecret: (groupId: any, appId: any, adminCreateASecretRequest: AdminCreateASecretRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets) associated with a Atlas App Services App.
     * @summary Delete a Secret
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} secretId The unique &#x60;_id&#x60; value of a secret.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteSecret: (groupId: any, appId: any, secretId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List [secrets](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets#std-label-define-secret) associated with a Atlas App Services App.
     * @summary List secrets
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetAllSecrets: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Modify a [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets) associated with a Atlas App Services App.
     * @summary Modify a Secret
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} secretId The unique &#x60;_id&#x60; value of a secret.
     * @param {AdminModifyASecretRequest} adminModifyASecretRequest The modified value of the Secret.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminModifyASecret: (groupId: any, appId: any, secretId: any, adminModifyASecretRequest: AdminModifyASecretRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SecretsApi - functional programming interface
 * @export
 */
export declare const SecretsApiFp: (configuration?: Configuration) => {
    /**
     * Create a new [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets).
     * @summary Create a new Secret
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminCreateASecretRequest} adminCreateASecretRequest The Secret to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateASecret(groupId: any, appId: any, adminCreateASecretRequest: AdminCreateASecretRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminCreateRule201Response>>;
    /**
     * Delete a [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets) associated with a Atlas App Services App.
     * @summary Delete a Secret
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} secretId The unique &#x60;_id&#x60; value of a secret.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteSecret(groupId: any, appId: any, secretId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * List [secrets](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets#std-label-define-secret) associated with a Atlas App Services App.
     * @summary List secrets
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetAllSecrets(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Modify a [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets) associated with a Atlas App Services App.
     * @summary Modify a Secret
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} secretId The unique &#x60;_id&#x60; value of a secret.
     * @param {AdminModifyASecretRequest} adminModifyASecretRequest The modified value of the Secret.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminModifyASecret(groupId: any, appId: any, secretId: any, adminModifyASecretRequest: AdminModifyASecretRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * SecretsApi - factory interface
 * @export
 */
export declare const SecretsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets).
     * @summary Create a new Secret
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminCreateASecretRequest} adminCreateASecretRequest The Secret to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateASecret(groupId: any, appId: any, adminCreateASecretRequest: AdminCreateASecretRequest, options?: any): AxiosPromise<AdminCreateRule201Response>;
    /**
     * Delete a [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets) associated with a Atlas App Services App.
     * @summary Delete a Secret
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} secretId The unique &#x60;_id&#x60; value of a secret.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteSecret(groupId: any, appId: any, secretId: any, options?: any): AxiosPromise<void>;
    /**
     * List [secrets](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets#std-label-define-secret) associated with a Atlas App Services App.
     * @summary List secrets
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetAllSecrets(groupId: any, appId: any, options?: any): AxiosPromise<any>;
    /**
     * Modify a [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets) associated with a Atlas App Services App.
     * @summary Modify a Secret
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} secretId The unique &#x60;_id&#x60; value of a secret.
     * @param {AdminModifyASecretRequest} adminModifyASecretRequest The modified value of the Secret.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminModifyASecret(groupId: any, appId: any, secretId: any, adminModifyASecretRequest: AdminModifyASecretRequest, options?: any): AxiosPromise<void>;
};
/**
 * SecretsApi - interface
 * @export
 * @interface SecretsApi
 */
export interface SecretsApiInterface {
    /**
     * Create a new [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets).
     * @summary Create a new Secret
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminCreateASecretRequest} adminCreateASecretRequest The Secret to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretsApiInterface
     */
    adminCreateASecret(groupId: any, appId: any, adminCreateASecretRequest: AdminCreateASecretRequest, options?: AxiosRequestConfig): AxiosPromise<AdminCreateRule201Response>;
    /**
     * Delete a [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets) associated with a Atlas App Services App.
     * @summary Delete a Secret
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} secretId The unique &#x60;_id&#x60; value of a secret.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretsApiInterface
     */
    adminDeleteSecret(groupId: any, appId: any, secretId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * List [secrets](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets#std-label-define-secret) associated with a Atlas App Services App.
     * @summary List secrets
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretsApiInterface
     */
    adminGetAllSecrets(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Modify a [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets) associated with a Atlas App Services App.
     * @summary Modify a Secret
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} secretId The unique &#x60;_id&#x60; value of a secret.
     * @param {AdminModifyASecretRequest} adminModifyASecretRequest The modified value of the Secret.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretsApiInterface
     */
    adminModifyASecret(groupId: any, appId: any, secretId: any, adminModifyASecretRequest: AdminModifyASecretRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
}
/**
 * SecretsApi - object-oriented interface
 * @export
 * @class SecretsApi
 * @extends {BaseAPI}
 */
export declare class SecretsApi extends BaseAPI implements SecretsApiInterface {
    /**
     * Create a new [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets).
     * @summary Create a new Secret
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminCreateASecretRequest} adminCreateASecretRequest The Secret to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretsApi
     */
    adminCreateASecret(groupId: any, appId: any, adminCreateASecretRequest: AdminCreateASecretRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AdminCreateRule201Response, any>>;
    /**
     * Delete a [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets) associated with a Atlas App Services App.
     * @summary Delete a Secret
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} secretId The unique &#x60;_id&#x60; value of a secret.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretsApi
     */
    adminDeleteSecret(groupId: any, appId: any, secretId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * List [secrets](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets#std-label-define-secret) associated with a Atlas App Services App.
     * @summary List secrets
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretsApi
     */
    adminGetAllSecrets(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Modify a [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets) associated with a Atlas App Services App.
     * @summary Modify a Secret
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} secretId The unique &#x60;_id&#x60; value of a secret.
     * @param {AdminModifyASecretRequest} adminModifyASecretRequest The modified value of the Secret.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretsApi
     */
    adminModifyASecret(groupId: any, appId: any, secretId: any, adminModifyASecretRequest: AdminModifyASecretRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * SecurityApi - axios parameter creator
 * @export
 */
export declare const SecurityApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Configure a new private endpoint for the App.
     * @summary Create a VPC Private Endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {PrivateEndpoint} privateEndpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreatePrivateEndpoint: (groupId: any, appId: any, privateEndpoint: PrivateEndpoint, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a private endpoint.
     * @summary Delete a VPC Private Endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} privateEndpointId The _id ObjectID of a VPC private endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeletePrivateEndpoint: (groupId: any, appId: any, privateEndpointId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a specific private endpoint configuration.
     * @summary Get a VPC Private Endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} privateEndpointId The _id ObjectID of a VPC private endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetPrivateEndpoint: (groupId: any, appId: any, privateEndpointId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of all private endpoints configured for the App.
     * @summary List VPC Private Endpoints
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetPrivateEndpoints: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the current expiration time in seconds for user session refresh tokens.
     * @summary Get User Refresh Token Expiration Time
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetRefreshTokenExpiration: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List the allowed [HTTP origins](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin) from which App Services should allow requests.
     * @summary List allowed HTTP origins
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListAllowedRequestOrigins: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of all private endpoint services configured for the App.
     * @summary List VPC Private Endpoint Services
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListPrivateEndpointServices: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Set the allowed [HTTP origins](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin) from which App Services should allow requests.
     * @summary Set allowed HTTP origins
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} body A list of HTTP origins.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminSetAllowedRequestOrigins: (groupId: any, appId: any, body: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Set the expiration time in seconds for user session refresh tokens.
     * @summary Set User Refresh Token Expiration Time
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {RefreshTokenExpiration} refreshTokenExpiration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminSetRefreshTokenExpiration: (groupId: any, appId: any, refreshTokenExpiration: RefreshTokenExpiration, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update the configuration of a private endpoint.
     * @summary Modify a VPC Private Endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} privateEndpointId The _id ObjectID of a VPC private endpoint.
     * @param {PrivateEndpoint} privateEndpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdatePrivateEndpoint: (groupId: any, appId: any, privateEndpointId: any, privateEndpoint: PrivateEndpoint, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create an IP address or CIDR block in the Access List for your App Services app.
     * @summary Create an IP address or CIDR block in the Access List
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AllowedIPAccessListCreateRequest} allowedIPAccessListCreateRequest The IP Access List entry to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    allowedIPAccessListCreate: (groupId: any, appId: any, allowedIPAccessListCreateRequest: AllowedIPAccessListCreateRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete an IP address or CIDR block from the Access List of your App Services app
     * @summary Delete an IP address or CIDR block from the Access List
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} ipId The IP address entry denoted by &#x60;ip_id&#x60; with the information given in the request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    allowedIPAccessListDelete: (groupId: any, appId: any, ipId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List the allowed entries in the Access List of your Atlas App Services App.
     * @summary List the allowed entries in the Access List
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    allowedIPAccessListGet: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Modify an IP address or CIDR block in the Access List of your App Services app
     * @summary Modify an IP address or CIDR block in the Access List
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} ipId The IP address entry denoted by &#x60;ip_id&#x60; with the information given in the request body
     * @param {AllowedIPAccessListUpdateRequest} allowedIPAccessListUpdateRequest The updated value of the IP Access List entry.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    allowedIPAccessListUpdate: (groupId: any, appId: any, ipId: any, allowedIPAccessListUpdateRequest: AllowedIPAccessListUpdateRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SecurityApi - functional programming interface
 * @export
 */
export declare const SecurityApiFp: (configuration?: Configuration) => {
    /**
     * Configure a new private endpoint for the App.
     * @summary Create a VPC Private Endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {PrivateEndpoint} privateEndpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreatePrivateEndpoint(groupId: any, appId: any, privateEndpoint: PrivateEndpoint, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete a private endpoint.
     * @summary Delete a VPC Private Endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} privateEndpointId The _id ObjectID of a VPC private endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeletePrivateEndpoint(groupId: any, appId: any, privateEndpointId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get a specific private endpoint configuration.
     * @summary Get a VPC Private Endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} privateEndpointId The _id ObjectID of a VPC private endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetPrivateEndpoint(groupId: any, appId: any, privateEndpointId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrivateEndpoint>>;
    /**
     * Get a list of all private endpoints configured for the App.
     * @summary List VPC Private Endpoints
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetPrivateEndpoints(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Get the current expiration time in seconds for user session refresh tokens.
     * @summary Get User Refresh Token Expiration Time
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetRefreshTokenExpiration(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefreshTokenExpiration>>;
    /**
     * List the allowed [HTTP origins](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin) from which App Services should allow requests.
     * @summary List allowed HTTP origins
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListAllowedRequestOrigins(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Get a list of all private endpoint services configured for the App.
     * @summary List VPC Private Endpoint Services
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListPrivateEndpointServices(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Set the allowed [HTTP origins](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin) from which App Services should allow requests.
     * @summary Set allowed HTTP origins
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} body A list of HTTP origins.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminSetAllowedRequestOrigins(groupId: any, appId: any, body: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Set the expiration time in seconds for user session refresh tokens.
     * @summary Set User Refresh Token Expiration Time
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {RefreshTokenExpiration} refreshTokenExpiration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminSetRefreshTokenExpiration(groupId: any, appId: any, refreshTokenExpiration: RefreshTokenExpiration, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Update the configuration of a private endpoint.
     * @summary Modify a VPC Private Endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} privateEndpointId The _id ObjectID of a VPC private endpoint.
     * @param {PrivateEndpoint} privateEndpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdatePrivateEndpoint(groupId: any, appId: any, privateEndpointId: any, privateEndpoint: PrivateEndpoint, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Create an IP address or CIDR block in the Access List for your App Services app.
     * @summary Create an IP address or CIDR block in the Access List
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AllowedIPAccessListCreateRequest} allowedIPAccessListCreateRequest The IP Access List entry to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    allowedIPAccessListCreate(groupId: any, appId: any, allowedIPAccessListCreateRequest: AllowedIPAccessListCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AllowedIPAccessListCreate201Response>>;
    /**
     * Delete an IP address or CIDR block from the Access List of your App Services app
     * @summary Delete an IP address or CIDR block from the Access List
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} ipId The IP address entry denoted by &#x60;ip_id&#x60; with the information given in the request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    allowedIPAccessListDelete(groupId: any, appId: any, ipId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * List the allowed entries in the Access List of your Atlas App Services App.
     * @summary List the allowed entries in the Access List
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    allowedIPAccessListGet(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Modify an IP address or CIDR block in the Access List of your App Services app
     * @summary Modify an IP address or CIDR block in the Access List
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} ipId The IP address entry denoted by &#x60;ip_id&#x60; with the information given in the request body
     * @param {AllowedIPAccessListUpdateRequest} allowedIPAccessListUpdateRequest The updated value of the IP Access List entry.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    allowedIPAccessListUpdate(groupId: any, appId: any, ipId: any, allowedIPAccessListUpdateRequest: AllowedIPAccessListUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AllowedIPAccessListCreate201Response>>;
};
/**
 * SecurityApi - factory interface
 * @export
 */
export declare const SecurityApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Configure a new private endpoint for the App.
     * @summary Create a VPC Private Endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {PrivateEndpoint} privateEndpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreatePrivateEndpoint(groupId: any, appId: any, privateEndpoint: PrivateEndpoint, options?: any): AxiosPromise<void>;
    /**
     * Delete a private endpoint.
     * @summary Delete a VPC Private Endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} privateEndpointId The _id ObjectID of a VPC private endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeletePrivateEndpoint(groupId: any, appId: any, privateEndpointId: any, options?: any): AxiosPromise<void>;
    /**
     * Get a specific private endpoint configuration.
     * @summary Get a VPC Private Endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} privateEndpointId The _id ObjectID of a VPC private endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetPrivateEndpoint(groupId: any, appId: any, privateEndpointId: any, options?: any): AxiosPromise<PrivateEndpoint>;
    /**
     * Get a list of all private endpoints configured for the App.
     * @summary List VPC Private Endpoints
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetPrivateEndpoints(groupId: any, appId: any, options?: any): AxiosPromise<any>;
    /**
     * Get the current expiration time in seconds for user session refresh tokens.
     * @summary Get User Refresh Token Expiration Time
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetRefreshTokenExpiration(groupId: any, appId: any, options?: any): AxiosPromise<RefreshTokenExpiration>;
    /**
     * List the allowed [HTTP origins](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin) from which App Services should allow requests.
     * @summary List allowed HTTP origins
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListAllowedRequestOrigins(groupId: any, appId: any, options?: any): AxiosPromise<any>;
    /**
     * Get a list of all private endpoint services configured for the App.
     * @summary List VPC Private Endpoint Services
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListPrivateEndpointServices(groupId: any, appId: any, options?: any): AxiosPromise<any>;
    /**
     * Set the allowed [HTTP origins](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin) from which App Services should allow requests.
     * @summary Set allowed HTTP origins
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} body A list of HTTP origins.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminSetAllowedRequestOrigins(groupId: any, appId: any, body: any, options?: any): AxiosPromise<void>;
    /**
     * Set the expiration time in seconds for user session refresh tokens.
     * @summary Set User Refresh Token Expiration Time
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {RefreshTokenExpiration} refreshTokenExpiration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminSetRefreshTokenExpiration(groupId: any, appId: any, refreshTokenExpiration: RefreshTokenExpiration, options?: any): AxiosPromise<void>;
    /**
     * Update the configuration of a private endpoint.
     * @summary Modify a VPC Private Endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} privateEndpointId The _id ObjectID of a VPC private endpoint.
     * @param {PrivateEndpoint} privateEndpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdatePrivateEndpoint(groupId: any, appId: any, privateEndpointId: any, privateEndpoint: PrivateEndpoint, options?: any): AxiosPromise<void>;
    /**
     * Create an IP address or CIDR block in the Access List for your App Services app.
     * @summary Create an IP address or CIDR block in the Access List
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AllowedIPAccessListCreateRequest} allowedIPAccessListCreateRequest The IP Access List entry to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    allowedIPAccessListCreate(groupId: any, appId: any, allowedIPAccessListCreateRequest: AllowedIPAccessListCreateRequest, options?: any): AxiosPromise<AllowedIPAccessListCreate201Response>;
    /**
     * Delete an IP address or CIDR block from the Access List of your App Services app
     * @summary Delete an IP address or CIDR block from the Access List
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} ipId The IP address entry denoted by &#x60;ip_id&#x60; with the information given in the request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    allowedIPAccessListDelete(groupId: any, appId: any, ipId: any, options?: any): AxiosPromise<void>;
    /**
     * List the allowed entries in the Access List of your Atlas App Services App.
     * @summary List the allowed entries in the Access List
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    allowedIPAccessListGet(groupId: any, appId: any, options?: any): AxiosPromise<any>;
    /**
     * Modify an IP address or CIDR block in the Access List of your App Services app
     * @summary Modify an IP address or CIDR block in the Access List
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} ipId The IP address entry denoted by &#x60;ip_id&#x60; with the information given in the request body
     * @param {AllowedIPAccessListUpdateRequest} allowedIPAccessListUpdateRequest The updated value of the IP Access List entry.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    allowedIPAccessListUpdate(groupId: any, appId: any, ipId: any, allowedIPAccessListUpdateRequest: AllowedIPAccessListUpdateRequest, options?: any): AxiosPromise<AllowedIPAccessListCreate201Response>;
};
/**
 * SecurityApi - interface
 * @export
 * @interface SecurityApi
 */
export interface SecurityApiInterface {
    /**
     * Configure a new private endpoint for the App.
     * @summary Create a VPC Private Endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {PrivateEndpoint} privateEndpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    adminCreatePrivateEndpoint(groupId: any, appId: any, privateEndpoint: PrivateEndpoint, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Delete a private endpoint.
     * @summary Delete a VPC Private Endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} privateEndpointId The _id ObjectID of a VPC private endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    adminDeletePrivateEndpoint(groupId: any, appId: any, privateEndpointId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get a specific private endpoint configuration.
     * @summary Get a VPC Private Endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} privateEndpointId The _id ObjectID of a VPC private endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    adminGetPrivateEndpoint(groupId: any, appId: any, privateEndpointId: any, options?: AxiosRequestConfig): AxiosPromise<PrivateEndpoint>;
    /**
     * Get a list of all private endpoints configured for the App.
     * @summary List VPC Private Endpoints
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    adminGetPrivateEndpoints(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Get the current expiration time in seconds for user session refresh tokens.
     * @summary Get User Refresh Token Expiration Time
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    adminGetRefreshTokenExpiration(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<RefreshTokenExpiration>;
    /**
     * List the allowed [HTTP origins](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin) from which App Services should allow requests.
     * @summary List allowed HTTP origins
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    adminListAllowedRequestOrigins(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Get a list of all private endpoint services configured for the App.
     * @summary List VPC Private Endpoint Services
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    adminListPrivateEndpointServices(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Set the allowed [HTTP origins](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin) from which App Services should allow requests.
     * @summary Set allowed HTTP origins
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} body A list of HTTP origins.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    adminSetAllowedRequestOrigins(groupId: any, appId: any, body: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Set the expiration time in seconds for user session refresh tokens.
     * @summary Set User Refresh Token Expiration Time
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {RefreshTokenExpiration} refreshTokenExpiration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    adminSetRefreshTokenExpiration(groupId: any, appId: any, refreshTokenExpiration: RefreshTokenExpiration, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Update the configuration of a private endpoint.
     * @summary Modify a VPC Private Endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} privateEndpointId The _id ObjectID of a VPC private endpoint.
     * @param {PrivateEndpoint} privateEndpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    adminUpdatePrivateEndpoint(groupId: any, appId: any, privateEndpointId: any, privateEndpoint: PrivateEndpoint, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Create an IP address or CIDR block in the Access List for your App Services app.
     * @summary Create an IP address or CIDR block in the Access List
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AllowedIPAccessListCreateRequest} allowedIPAccessListCreateRequest The IP Access List entry to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    allowedIPAccessListCreate(groupId: any, appId: any, allowedIPAccessListCreateRequest: AllowedIPAccessListCreateRequest, options?: AxiosRequestConfig): AxiosPromise<AllowedIPAccessListCreate201Response>;
    /**
     * Delete an IP address or CIDR block from the Access List of your App Services app
     * @summary Delete an IP address or CIDR block from the Access List
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} ipId The IP address entry denoted by &#x60;ip_id&#x60; with the information given in the request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    allowedIPAccessListDelete(groupId: any, appId: any, ipId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * List the allowed entries in the Access List of your Atlas App Services App.
     * @summary List the allowed entries in the Access List
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    allowedIPAccessListGet(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Modify an IP address or CIDR block in the Access List of your App Services app
     * @summary Modify an IP address or CIDR block in the Access List
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} ipId The IP address entry denoted by &#x60;ip_id&#x60; with the information given in the request body
     * @param {AllowedIPAccessListUpdateRequest} allowedIPAccessListUpdateRequest The updated value of the IP Access List entry.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    allowedIPAccessListUpdate(groupId: any, appId: any, ipId: any, allowedIPAccessListUpdateRequest: AllowedIPAccessListUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<AllowedIPAccessListCreate201Response>;
}
/**
 * SecurityApi - object-oriented interface
 * @export
 * @class SecurityApi
 * @extends {BaseAPI}
 */
export declare class SecurityApi extends BaseAPI implements SecurityApiInterface {
    /**
     * Configure a new private endpoint for the App.
     * @summary Create a VPC Private Endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {PrivateEndpoint} privateEndpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    adminCreatePrivateEndpoint(groupId: any, appId: any, privateEndpoint: PrivateEndpoint, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete a private endpoint.
     * @summary Delete a VPC Private Endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} privateEndpointId The _id ObjectID of a VPC private endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    adminDeletePrivateEndpoint(groupId: any, appId: any, privateEndpointId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a specific private endpoint configuration.
     * @summary Get a VPC Private Endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} privateEndpointId The _id ObjectID of a VPC private endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    adminGetPrivateEndpoint(groupId: any, appId: any, privateEndpointId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PrivateEndpoint, any>>;
    /**
     * Get a list of all private endpoints configured for the App.
     * @summary List VPC Private Endpoints
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    adminGetPrivateEndpoints(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Get the current expiration time in seconds for user session refresh tokens.
     * @summary Get User Refresh Token Expiration Time
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    adminGetRefreshTokenExpiration(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RefreshTokenExpiration, any>>;
    /**
     * List the allowed [HTTP origins](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin) from which App Services should allow requests.
     * @summary List allowed HTTP origins
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    adminListAllowedRequestOrigins(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Get a list of all private endpoint services configured for the App.
     * @summary List VPC Private Endpoint Services
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    adminListPrivateEndpointServices(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Set the allowed [HTTP origins](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin) from which App Services should allow requests.
     * @summary Set allowed HTTP origins
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} body A list of HTTP origins.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    adminSetAllowedRequestOrigins(groupId: any, appId: any, body: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Set the expiration time in seconds for user session refresh tokens.
     * @summary Set User Refresh Token Expiration Time
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {RefreshTokenExpiration} refreshTokenExpiration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    adminSetRefreshTokenExpiration(groupId: any, appId: any, refreshTokenExpiration: RefreshTokenExpiration, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update the configuration of a private endpoint.
     * @summary Modify a VPC Private Endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} privateEndpointId The _id ObjectID of a VPC private endpoint.
     * @param {PrivateEndpoint} privateEndpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    adminUpdatePrivateEndpoint(groupId: any, appId: any, privateEndpointId: any, privateEndpoint: PrivateEndpoint, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Create an IP address or CIDR block in the Access List for your App Services app.
     * @summary Create an IP address or CIDR block in the Access List
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AllowedIPAccessListCreateRequest} allowedIPAccessListCreateRequest The IP Access List entry to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    allowedIPAccessListCreate(groupId: any, appId: any, allowedIPAccessListCreateRequest: AllowedIPAccessListCreateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AllowedIPAccessListCreate201Response, any>>;
    /**
     * Delete an IP address or CIDR block from the Access List of your App Services app
     * @summary Delete an IP address or CIDR block from the Access List
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} ipId The IP address entry denoted by &#x60;ip_id&#x60; with the information given in the request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    allowedIPAccessListDelete(groupId: any, appId: any, ipId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * List the allowed entries in the Access List of your Atlas App Services App.
     * @summary List the allowed entries in the Access List
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    allowedIPAccessListGet(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Modify an IP address or CIDR block in the Access List of your App Services app
     * @summary Modify an IP address or CIDR block in the Access List
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} ipId The IP address entry denoted by &#x60;ip_id&#x60; with the information given in the request body
     * @param {AllowedIPAccessListUpdateRequest} allowedIPAccessListUpdateRequest The updated value of the IP Access List entry.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    allowedIPAccessListUpdate(groupId: any, appId: any, ipId: any, allowedIPAccessListUpdateRequest: AllowedIPAccessListUpdateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AllowedIPAccessListCreate201Response, any>>;
}
/**
 * ServicesApi - axios parameter creator
 * @export
 */
export declare const ServicesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
     * @summary Create a data source or third-party service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateService: (groupId: any, appId: any, body?: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
     * @summary Delete a data source or third-party service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteService: (groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Sample a subset of documents in a collection to generate a JSON schema.
     * @summary Generate a JSON schema from sample
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {AdminGenerateSchemaRequest} adminGenerateSchemaRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGenerateSchema: (groupId: any, appId: any, serviceId: any, adminGenerateSchemaRequest: AdminGenerateSchemaRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
     * @summary Get a data source or third-party service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetService: (groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a [service\'s](https://www.mongodb.com/docs/realm/services#std-label-services) configuration.
     * @summary Retrieve a service\'s configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetServiceConfig: (groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all [data sources](https://www.mongodb.com/docs/atlas/app-services/mongodb/) and [third-party services [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
     * @summary List all data sources and third-party services
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListServices: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Run a command associated with a [service](https://www.mongodb.com/docs/realm/services#std-label-services).
     * @summary Run a command associated with a service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} commandName Command name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRunCommand: (groupId: any, appId: any, serviceId: any, commandName: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a [service](https://www.mongodb.com/docs/realm/services#std-label-services).
     * @summary Update a service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateService: (groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a [service\'s](https://www.mongodb.com/docs/realm/services#std-label-services) configuration.
     * @summary Update a service\'s configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateServiceConfig: (groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get information about the underlying Atlas mongod
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildInfo: (groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ServicesApi - functional programming interface
 * @export
 */
export declare const ServicesApiFp: (configuration?: Configuration) => {
    /**
     * Create a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
     * @summary Create a data source or third-party service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateService(groupId: any, appId: any, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Delete a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
     * @summary Delete a data source or third-party service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteService(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Sample a subset of documents in a collection to generate a JSON schema.
     * @summary Generate a JSON schema from sample
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {AdminGenerateSchemaRequest} adminGenerateSchemaRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGenerateSchema(groupId: any, appId: any, serviceId: any, adminGenerateSchemaRequest: AdminGenerateSchemaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminGenerateSchema200Response>>;
    /**
     * Get a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
     * @summary Get a data source or third-party service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetService(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Retrieve a [service\'s](https://www.mongodb.com/docs/realm/services#std-label-services) configuration.
     * @summary Retrieve a service\'s configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetServiceConfig(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * List all [data sources](https://www.mongodb.com/docs/atlas/app-services/mongodb/) and [third-party services [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
     * @summary List all data sources and third-party services
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListServices(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Run a command associated with a [service](https://www.mongodb.com/docs/realm/services#std-label-services).
     * @summary Run a command associated with a service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} commandName Command name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRunCommand(groupId: any, appId: any, serviceId: any, commandName: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Update a [service](https://www.mongodb.com/docs/realm/services#std-label-services).
     * @summary Update a service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateService(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Update a [service\'s](https://www.mongodb.com/docs/realm/services#std-label-services) configuration.
     * @summary Update a service\'s configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateServiceConfig(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get information about the underlying Atlas mongod
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildInfo(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildInfo>>;
};
/**
 * ServicesApi - factory interface
 * @export
 */
export declare const ServicesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
     * @summary Create a data source or third-party service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateService(groupId: any, appId: any, body?: any, options?: any): AxiosPromise<any>;
    /**
     * Delete a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
     * @summary Delete a data source or third-party service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteService(groupId: any, appId: any, serviceId: any, options?: any): AxiosPromise<void>;
    /**
     * Sample a subset of documents in a collection to generate a JSON schema.
     * @summary Generate a JSON schema from sample
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {AdminGenerateSchemaRequest} adminGenerateSchemaRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGenerateSchema(groupId: any, appId: any, serviceId: any, adminGenerateSchemaRequest: AdminGenerateSchemaRequest, options?: any): AxiosPromise<AdminGenerateSchema200Response>;
    /**
     * Get a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
     * @summary Get a data source or third-party service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetService(groupId: any, appId: any, serviceId: any, options?: any): AxiosPromise<any>;
    /**
     * Retrieve a [service\'s](https://www.mongodb.com/docs/realm/services#std-label-services) configuration.
     * @summary Retrieve a service\'s configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetServiceConfig(groupId: any, appId: any, serviceId: any, options?: any): AxiosPromise<void>;
    /**
     * List all [data sources](https://www.mongodb.com/docs/atlas/app-services/mongodb/) and [third-party services [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
     * @summary List all data sources and third-party services
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListServices(groupId: any, appId: any, options?: any): AxiosPromise<any>;
    /**
     * Run a command associated with a [service](https://www.mongodb.com/docs/realm/services#std-label-services).
     * @summary Run a command associated with a service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} commandName Command name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRunCommand(groupId: any, appId: any, serviceId: any, commandName: any, options?: any): AxiosPromise<void>;
    /**
     * Update a [service](https://www.mongodb.com/docs/realm/services#std-label-services).
     * @summary Update a service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateService(groupId: any, appId: any, serviceId: any, options?: any): AxiosPromise<void>;
    /**
     * Update a [service\'s](https://www.mongodb.com/docs/realm/services#std-label-services) configuration.
     * @summary Update a service\'s configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateServiceConfig(groupId: any, appId: any, serviceId: any, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Get information about the underlying Atlas mongod
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildInfo(groupId: any, appId: any, serviceId: any, options?: any): AxiosPromise<BuildInfo>;
};
/**
 * ServicesApi - interface
 * @export
 * @interface ServicesApi
 */
export interface ServicesApiInterface {
    /**
     * Create a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
     * @summary Create a data source or third-party service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApiInterface
     */
    adminCreateService(groupId: any, appId: any, body?: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Delete a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
     * @summary Delete a data source or third-party service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApiInterface
     */
    adminDeleteService(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Sample a subset of documents in a collection to generate a JSON schema.
     * @summary Generate a JSON schema from sample
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {AdminGenerateSchemaRequest} adminGenerateSchemaRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApiInterface
     */
    adminGenerateSchema(groupId: any, appId: any, serviceId: any, adminGenerateSchemaRequest: AdminGenerateSchemaRequest, options?: AxiosRequestConfig): AxiosPromise<AdminGenerateSchema200Response>;
    /**
     * Get a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
     * @summary Get a data source or third-party service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApiInterface
     */
    adminGetService(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Retrieve a [service\'s](https://www.mongodb.com/docs/realm/services#std-label-services) configuration.
     * @summary Retrieve a service\'s configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApiInterface
     */
    adminGetServiceConfig(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * List all [data sources](https://www.mongodb.com/docs/atlas/app-services/mongodb/) and [third-party services [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
     * @summary List all data sources and third-party services
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApiInterface
     */
    adminListServices(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Run a command associated with a [service](https://www.mongodb.com/docs/realm/services#std-label-services).
     * @summary Run a command associated with a service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} commandName Command name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApiInterface
     */
    adminRunCommand(groupId: any, appId: any, serviceId: any, commandName: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Update a [service](https://www.mongodb.com/docs/realm/services#std-label-services).
     * @summary Update a service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApiInterface
     */
    adminUpdateService(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Update a [service\'s](https://www.mongodb.com/docs/realm/services#std-label-services) configuration.
     * @summary Update a service\'s configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApiInterface
     */
    adminUpdateServiceConfig(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get information about the underlying Atlas mongod
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApiInterface
     */
    getBuildInfo(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): AxiosPromise<BuildInfo>;
}
/**
 * ServicesApi - object-oriented interface
 * @export
 * @class ServicesApi
 * @extends {BaseAPI}
 */
export declare class ServicesApi extends BaseAPI implements ServicesApiInterface {
    /**
     * Create a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
     * @summary Create a data source or third-party service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    adminCreateService(groupId: any, appId: any, body?: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Delete a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
     * @summary Delete a data source or third-party service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    adminDeleteService(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Sample a subset of documents in a collection to generate a JSON schema.
     * @summary Generate a JSON schema from sample
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {AdminGenerateSchemaRequest} adminGenerateSchemaRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    adminGenerateSchema(groupId: any, appId: any, serviceId: any, adminGenerateSchemaRequest: AdminGenerateSchemaRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AdminGenerateSchema200Response, any>>;
    /**
     * Get a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
     * @summary Get a data source or third-party service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    adminGetService(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Retrieve a [service\'s](https://www.mongodb.com/docs/realm/services#std-label-services) configuration.
     * @summary Retrieve a service\'s configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    adminGetServiceConfig(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * List all [data sources](https://www.mongodb.com/docs/atlas/app-services/mongodb/) and [third-party services [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
     * @summary List all data sources and third-party services
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    adminListServices(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Run a command associated with a [service](https://www.mongodb.com/docs/realm/services#std-label-services).
     * @summary Run a command associated with a service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} commandName Command name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    adminRunCommand(groupId: any, appId: any, serviceId: any, commandName: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update a [service](https://www.mongodb.com/docs/realm/services#std-label-services).
     * @summary Update a service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    adminUpdateService(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update a [service\'s](https://www.mongodb.com/docs/realm/services#std-label-services) configuration.
     * @summary Update a service\'s configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    adminUpdateServiceConfig(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get information about the underlying Atlas mongod
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    getBuildInfo(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BuildInfo, any>>;
}
/**
 * SyncApi - axios parameter creator
 * @export
 */
export declare const SyncApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Retrieve sync data for a specific Atlas App Services App when using  [Flexible Sync](https://www.mongodb.com/docs/atlas/app-services/sync/get-started/).
     * @summary Get Flexible Sync information
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetFlexSync: (groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve partition field data when using  [Partition-Based Sync](https://www.mongodb.com/docs/realm/reference/partition-based-sync/).
     * @summary Get Partition-Based Sync information
     * @param {any} serviceId The Service ID for the linked cluster.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetSync: (serviceId: any, groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SyncApi - functional programming interface
 * @export
 */
export declare const SyncApiFp: (configuration?: Configuration) => {
    /**
     * Retrieve sync data for a specific Atlas App Services App when using  [Flexible Sync](https://www.mongodb.com/docs/atlas/app-services/sync/get-started/).
     * @summary Get Flexible Sync information
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetFlexSync(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncDataResponse>>;
    /**
     * Retrieve partition field data when using  [Partition-Based Sync](https://www.mongodb.com/docs/realm/reference/partition-based-sync/).
     * @summary Get Partition-Based Sync information
     * @param {any} serviceId The Service ID for the linked cluster.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetSync(serviceId: any, groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PbsSyncResponse>>;
};
/**
 * SyncApi - factory interface
 * @export
 */
export declare const SyncApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieve sync data for a specific Atlas App Services App when using  [Flexible Sync](https://www.mongodb.com/docs/atlas/app-services/sync/get-started/).
     * @summary Get Flexible Sync information
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetFlexSync(groupId: any, appId: any, serviceId: any, options?: any): AxiosPromise<SyncDataResponse>;
    /**
     * Retrieve partition field data when using  [Partition-Based Sync](https://www.mongodb.com/docs/realm/reference/partition-based-sync/).
     * @summary Get Partition-Based Sync information
     * @param {any} serviceId The Service ID for the linked cluster.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetSync(serviceId: any, groupId: any, appId: any, options?: any): AxiosPromise<PbsSyncResponse>;
};
/**
 * SyncApi - interface
 * @export
 * @interface SyncApi
 */
export interface SyncApiInterface {
    /**
     * Retrieve sync data for a specific Atlas App Services App when using  [Flexible Sync](https://www.mongodb.com/docs/atlas/app-services/sync/get-started/).
     * @summary Get Flexible Sync information
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApiInterface
     */
    adminGetFlexSync(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): AxiosPromise<SyncDataResponse>;
    /**
     * Retrieve partition field data when using  [Partition-Based Sync](https://www.mongodb.com/docs/realm/reference/partition-based-sync/).
     * @summary Get Partition-Based Sync information
     * @param {any} serviceId The Service ID for the linked cluster.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApiInterface
     */
    adminGetSync(serviceId: any, groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<PbsSyncResponse>;
}
/**
 * SyncApi - object-oriented interface
 * @export
 * @class SyncApi
 * @extends {BaseAPI}
 */
export declare class SyncApi extends BaseAPI implements SyncApiInterface {
    /**
     * Retrieve sync data for a specific Atlas App Services App when using  [Flexible Sync](https://www.mongodb.com/docs/atlas/app-services/sync/get-started/).
     * @summary Get Flexible Sync information
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApi
     */
    adminGetFlexSync(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SyncDataResponse, any>>;
    /**
     * Retrieve partition field data when using  [Partition-Based Sync](https://www.mongodb.com/docs/realm/reference/partition-based-sync/).
     * @summary Get Partition-Based Sync information
     * @param {any} serviceId The Service ID for the linked cluster.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApi
     */
    adminGetSync(serviceId: any, groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PbsSyncResponse, any>>;
}
/**
 * TriggersApi - axios parameter creator
 * @export
 */
export declare const TriggersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
     * @summary Create a trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} body A configuration for a database, scheduled, or authentication trigger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateTrigger: (groupId: any, appId: any, body: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Remove an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) from your application.
     * @summary Delete a trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteTrigger: (groupId: any, appId: any, triggerId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the configuration for an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
     * @summary Get a trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetTrigger: (groupId: any, appId: any, triggerId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of all [triggers](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
     * @summary Get all triggers
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListTriggers: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Resume a [suspended](https://www.mongodb.com/docs/atlas/app-services/triggers/database-triggers/#suspended-triggers) database trigger.
     * @summary Resume a suspended trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
     * @param {AdminResumeTriggerRequest} [adminResumeTriggerRequest] Configuration options for the resume operation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminResumeTrigger: (groupId: any, appId: any, triggerId: any, adminResumeTriggerRequest?: AdminResumeTriggerRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Modify an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
     * @summary Update a trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
     * @param {any} body The updated trigger configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateTrigger: (groupId: any, appId: any, triggerId: any, body: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TriggersApi - functional programming interface
 * @export
 */
export declare const TriggersApiFp: (configuration?: Configuration) => {
    /**
     * Create a new [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
     * @summary Create a trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} body A configuration for a database, scheduled, or authentication trigger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateTrigger(groupId: any, appId: any, body: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Remove an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) from your application.
     * @summary Delete a trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteTrigger(groupId: any, appId: any, triggerId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Get the configuration for an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
     * @summary Get a trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetTrigger(groupId: any, appId: any, triggerId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Get a list of all [triggers](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
     * @summary Get all triggers
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListTriggers(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Resume a [suspended](https://www.mongodb.com/docs/atlas/app-services/triggers/database-triggers/#suspended-triggers) database trigger.
     * @summary Resume a suspended trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
     * @param {AdminResumeTriggerRequest} [adminResumeTriggerRequest] Configuration options for the resume operation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminResumeTrigger(groupId: any, appId: any, triggerId: any, adminResumeTriggerRequest?: AdminResumeTriggerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Modify an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
     * @summary Update a trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
     * @param {any} body The updated trigger configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateTrigger(groupId: any, appId: any, triggerId: any, body: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * TriggersApi - factory interface
 * @export
 */
export declare const TriggersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
     * @summary Create a trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} body A configuration for a database, scheduled, or authentication trigger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateTrigger(groupId: any, appId: any, body: any, options?: any): AxiosPromise<any>;
    /**
     * Remove an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) from your application.
     * @summary Delete a trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteTrigger(groupId: any, appId: any, triggerId: any, options?: any): AxiosPromise<any>;
    /**
     * Get the configuration for an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
     * @summary Get a trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetTrigger(groupId: any, appId: any, triggerId: any, options?: any): AxiosPromise<any>;
    /**
     * Get a list of all [triggers](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
     * @summary Get all triggers
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListTriggers(groupId: any, appId: any, options?: any): AxiosPromise<any>;
    /**
     * Resume a [suspended](https://www.mongodb.com/docs/atlas/app-services/triggers/database-triggers/#suspended-triggers) database trigger.
     * @summary Resume a suspended trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
     * @param {AdminResumeTriggerRequest} [adminResumeTriggerRequest] Configuration options for the resume operation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminResumeTrigger(groupId: any, appId: any, triggerId: any, adminResumeTriggerRequest?: AdminResumeTriggerRequest, options?: any): AxiosPromise<void>;
    /**
     * Modify an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
     * @summary Update a trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
     * @param {any} body The updated trigger configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateTrigger(groupId: any, appId: any, triggerId: any, body: any, options?: any): AxiosPromise<void>;
};
/**
 * TriggersApi - interface
 * @export
 * @interface TriggersApi
 */
export interface TriggersApiInterface {
    /**
     * Create a new [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
     * @summary Create a trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} body A configuration for a database, scheduled, or authentication trigger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApiInterface
     */
    adminCreateTrigger(groupId: any, appId: any, body: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Remove an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) from your application.
     * @summary Delete a trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApiInterface
     */
    adminDeleteTrigger(groupId: any, appId: any, triggerId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Get the configuration for an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
     * @summary Get a trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApiInterface
     */
    adminGetTrigger(groupId: any, appId: any, triggerId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Get a list of all [triggers](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
     * @summary Get all triggers
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApiInterface
     */
    adminListTriggers(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Resume a [suspended](https://www.mongodb.com/docs/atlas/app-services/triggers/database-triggers/#suspended-triggers) database trigger.
     * @summary Resume a suspended trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
     * @param {AdminResumeTriggerRequest} [adminResumeTriggerRequest] Configuration options for the resume operation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApiInterface
     */
    adminResumeTrigger(groupId: any, appId: any, triggerId: any, adminResumeTriggerRequest?: AdminResumeTriggerRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Modify an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
     * @summary Update a trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
     * @param {any} body The updated trigger configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApiInterface
     */
    adminUpdateTrigger(groupId: any, appId: any, triggerId: any, body: any, options?: AxiosRequestConfig): AxiosPromise<void>;
}
/**
 * TriggersApi - object-oriented interface
 * @export
 * @class TriggersApi
 * @extends {BaseAPI}
 */
export declare class TriggersApi extends BaseAPI implements TriggersApiInterface {
    /**
     * Create a new [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
     * @summary Create a trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} body A configuration for a database, scheduled, or authentication trigger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApi
     */
    adminCreateTrigger(groupId: any, appId: any, body: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Remove an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) from your application.
     * @summary Delete a trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApi
     */
    adminDeleteTrigger(groupId: any, appId: any, triggerId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Get the configuration for an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
     * @summary Get a trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApi
     */
    adminGetTrigger(groupId: any, appId: any, triggerId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Get a list of all [triggers](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
     * @summary Get all triggers
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApi
     */
    adminListTriggers(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Resume a [suspended](https://www.mongodb.com/docs/atlas/app-services/triggers/database-triggers/#suspended-triggers) database trigger.
     * @summary Resume a suspended trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
     * @param {AdminResumeTriggerRequest} [adminResumeTriggerRequest] Configuration options for the resume operation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApi
     */
    adminResumeTrigger(groupId: any, appId: any, triggerId: any, adminResumeTriggerRequest?: AdminResumeTriggerRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Modify an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
     * @summary Update a trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
     * @param {any} body The updated trigger configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApi
     */
    adminUpdateTrigger(groupId: any, appId: any, triggerId: any, body: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * UsersApi - axios parameter creator
 * @export
 */
export declare const UsersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new [email/password](https://www.mongodb.com/docs/atlas/app-services/authentication/email-password/) user account.  *Note:* You cannot create user accounts through the Admin API for any authentication provider other than email/password.
     * @summary Create a user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminCreateUserRequest} adminCreateUserRequest The user to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateUser: (groupId: any, appId: any, adminCreateUserRequest: AdminCreateUserRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a pending [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Delete a pending email/password authentication user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} email Email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeletePendingEmailPasswordUser: (groupId: any, appId: any, email: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a specific [user account](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts) by ID.
     * @summary Delete a user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteUser: (groupId: any, appId: any, userId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Disable a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Disable a user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDisableUser: (groupId: any, appId: any, userId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Enable a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Enable a user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminEnableUser: (groupId: any, appId: any, userId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a specific [user account](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts) by ID.
     * @summary Get a User
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetUser: (groupId: any, appId: any, userId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List a user\'s devices
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListDevices: (groupId: any, appId: any, userId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List pending user account registrations. Returns up to 50 pending users in a call.
     * @summary List pending users
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [after] The unique &#x60;&#x60;_id&#x60;&#x60; for a pending user. &#x60;&#x60;List pending users&#x60;&#x60; can return 50 pending users at a time. To view additional results, find the &#x60;&#x60;_id&#x60;&#x60; of the last pending user listed in the previous call to &#x60;&#x60;list pending users&#x60;&#x60;. Call &#x60;&#x60;list pending users&#x60;&#x60; again, passing the &#x60;&#x60;_id&#x60;&#x60; to the after parameter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListPendingUsers: (groupId: any, appId: any, after?: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List confirmed [user accounts](https://www.mongodb.com/docs/atlas/app-services/authentication#std-label-user-accounts).
     * @summary List users
     * @param {any} [after] The &#x60;id&#x60; of the last user returned by a previous paginated request.
     * @param {any} [sort] The field name to sort results by. The only valid value is the default: &#x60;_id&#x60;.
     * @param {any} [desc] If &#x60;true&#x60;, returns sorted results in descending order. If not specified or set to &#x60;false&#x60;, results return in ascending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListUsers: (after?: any, sort?: any, desc?: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Change the email address for an [email/password user](https://www.mongodb.com/docs/atlas/app-services/authentication/email-password/) by ID.
     * @summary Change a user\'s email
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {AdminResetUserEmailRequest} adminResetUserEmailRequest The new email address for the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminResetUserEmail: (groupId: any, appId: any, userId: any, adminResetUserEmailRequest: AdminResetUserEmailRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Revoke all of a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts)\'s sessions.
     * @summary Revoke user sessions
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUserLogout: (groupId: any, appId: any, userId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Verify a that a user\'s client access token is valid.
     * @summary Verify & decode an access token
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminVerifyUserAccessTokenRequest} adminVerifyUserAccessTokenRequest The user\&#39;s client access token. The access token represents a logged in application user. This is not the same as the [&#x60;&#x60;access_token&#x60;&#x60;](https://www.mongodb.com/docs/atlas/app-services/admin/api/v3/#section/Get-Authentication-Tokens) that you use to work with the Admin API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminVerifyUserAccessToken: (groupId: any, appId: any, adminVerifyUserAccessTokenRequest: AdminVerifyUserAccessTokenRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration) => {
    /**
     * Create a new [email/password](https://www.mongodb.com/docs/atlas/app-services/authentication/email-password/) user account.  *Note:* You cannot create user accounts through the Admin API for any authentication provider other than email/password.
     * @summary Create a user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminCreateUserRequest} adminCreateUserRequest The user to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateUser(groupId: any, appId: any, adminCreateUserRequest: AdminCreateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * Delete a pending [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Delete a pending email/password authentication user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} email Email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeletePendingEmailPasswordUser(groupId: any, appId: any, email: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete a specific [user account](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts) by ID.
     * @summary Delete a user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteUser(groupId: any, appId: any, userId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Disable a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Disable a user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDisableUser(groupId: any, appId: any, userId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Enable a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Enable a user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminEnableUser(groupId: any, appId: any, userId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get a specific [user account](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts) by ID.
     * @summary Get a User
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetUser(groupId: any, appId: any, userId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @summary List a user\'s devices
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListDevices(groupId: any, appId: any, userId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * List pending user account registrations. Returns up to 50 pending users in a call.
     * @summary List pending users
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [after] The unique &#x60;&#x60;_id&#x60;&#x60; for a pending user. &#x60;&#x60;List pending users&#x60;&#x60; can return 50 pending users at a time. To view additional results, find the &#x60;&#x60;_id&#x60;&#x60; of the last pending user listed in the previous call to &#x60;&#x60;list pending users&#x60;&#x60;. Call &#x60;&#x60;list pending users&#x60;&#x60; again, passing the &#x60;&#x60;_id&#x60;&#x60; to the after parameter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListPendingUsers(groupId: any, appId: any, after?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * List confirmed [user accounts](https://www.mongodb.com/docs/atlas/app-services/authentication#std-label-user-accounts).
     * @summary List users
     * @param {any} [after] The &#x60;id&#x60; of the last user returned by a previous paginated request.
     * @param {any} [sort] The field name to sort results by. The only valid value is the default: &#x60;_id&#x60;.
     * @param {any} [desc] If &#x60;true&#x60;, returns sorted results in descending order. If not specified or set to &#x60;false&#x60;, results return in ascending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListUsers(after?: any, sort?: any, desc?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Change the email address for an [email/password user](https://www.mongodb.com/docs/atlas/app-services/authentication/email-password/) by ID.
     * @summary Change a user\'s email
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {AdminResetUserEmailRequest} adminResetUserEmailRequest The new email address for the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminResetUserEmail(groupId: any, appId: any, userId: any, adminResetUserEmailRequest: AdminResetUserEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Revoke all of a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts)\'s sessions.
     * @summary Revoke user sessions
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUserLogout(groupId: any, appId: any, userId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Verify a that a user\'s client access token is valid.
     * @summary Verify & decode an access token
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminVerifyUserAccessTokenRequest} adminVerifyUserAccessTokenRequest The user\&#39;s client access token. The access token represents a logged in application user. This is not the same as the [&#x60;&#x60;access_token&#x60;&#x60;](https://www.mongodb.com/docs/atlas/app-services/admin/api/v3/#section/Get-Authentication-Tokens) that you use to work with the Admin API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminVerifyUserAccessToken(groupId: any, appId: any, adminVerifyUserAccessTokenRequest: AdminVerifyUserAccessTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new [email/password](https://www.mongodb.com/docs/atlas/app-services/authentication/email-password/) user account.  *Note:* You cannot create user accounts through the Admin API for any authentication provider other than email/password.
     * @summary Create a user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminCreateUserRequest} adminCreateUserRequest The user to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateUser(groupId: any, appId: any, adminCreateUserRequest: AdminCreateUserRequest, options?: any): AxiosPromise<User>;
    /**
     * Delete a pending [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Delete a pending email/password authentication user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} email Email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeletePendingEmailPasswordUser(groupId: any, appId: any, email: any, options?: any): AxiosPromise<void>;
    /**
     * Delete a specific [user account](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts) by ID.
     * @summary Delete a user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteUser(groupId: any, appId: any, userId: any, options?: any): AxiosPromise<void>;
    /**
     * Disable a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Disable a user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDisableUser(groupId: any, appId: any, userId: any, options?: any): AxiosPromise<void>;
    /**
     * Enable a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Enable a user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminEnableUser(groupId: any, appId: any, userId: any, options?: any): AxiosPromise<void>;
    /**
     * Get a specific [user account](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts) by ID.
     * @summary Get a User
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetUser(groupId: any, appId: any, userId: any, options?: any): AxiosPromise<User>;
    /**
     *
     * @summary List a user\'s devices
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListDevices(groupId: any, appId: any, userId: any, options?: any): AxiosPromise<any>;
    /**
     * List pending user account registrations. Returns up to 50 pending users in a call.
     * @summary List pending users
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [after] The unique &#x60;&#x60;_id&#x60;&#x60; for a pending user. &#x60;&#x60;List pending users&#x60;&#x60; can return 50 pending users at a time. To view additional results, find the &#x60;&#x60;_id&#x60;&#x60; of the last pending user listed in the previous call to &#x60;&#x60;list pending users&#x60;&#x60;. Call &#x60;&#x60;list pending users&#x60;&#x60; again, passing the &#x60;&#x60;_id&#x60;&#x60; to the after parameter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListPendingUsers(groupId: any, appId: any, after?: any, options?: any): AxiosPromise<any>;
    /**
     * List confirmed [user accounts](https://www.mongodb.com/docs/atlas/app-services/authentication#std-label-user-accounts).
     * @summary List users
     * @param {any} [after] The &#x60;id&#x60; of the last user returned by a previous paginated request.
     * @param {any} [sort] The field name to sort results by. The only valid value is the default: &#x60;_id&#x60;.
     * @param {any} [desc] If &#x60;true&#x60;, returns sorted results in descending order. If not specified or set to &#x60;false&#x60;, results return in ascending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListUsers(after?: any, sort?: any, desc?: any, options?: any): AxiosPromise<any>;
    /**
     * Change the email address for an [email/password user](https://www.mongodb.com/docs/atlas/app-services/authentication/email-password/) by ID.
     * @summary Change a user\'s email
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {AdminResetUserEmailRequest} adminResetUserEmailRequest The new email address for the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminResetUserEmail(groupId: any, appId: any, userId: any, adminResetUserEmailRequest: AdminResetUserEmailRequest, options?: any): AxiosPromise<void>;
    /**
     * Revoke all of a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts)\'s sessions.
     * @summary Revoke user sessions
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUserLogout(groupId: any, appId: any, userId: any, options?: any): AxiosPromise<void>;
    /**
     * Verify a that a user\'s client access token is valid.
     * @summary Verify & decode an access token
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminVerifyUserAccessTokenRequest} adminVerifyUserAccessTokenRequest The user\&#39;s client access token. The access token represents a logged in application user. This is not the same as the [&#x60;&#x60;access_token&#x60;&#x60;](https://www.mongodb.com/docs/atlas/app-services/admin/api/v3/#section/Get-Authentication-Tokens) that you use to work with the Admin API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminVerifyUserAccessToken(groupId: any, appId: any, adminVerifyUserAccessTokenRequest: AdminVerifyUserAccessTokenRequest, options?: any): AxiosPromise<any>;
};
/**
 * UsersApi - interface
 * @export
 * @interface UsersApi
 */
export interface UsersApiInterface {
    /**
     * Create a new [email/password](https://www.mongodb.com/docs/atlas/app-services/authentication/email-password/) user account.  *Note:* You cannot create user accounts through the Admin API for any authentication provider other than email/password.
     * @summary Create a user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminCreateUserRequest} adminCreateUserRequest The user to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    adminCreateUser(groupId: any, appId: any, adminCreateUserRequest: AdminCreateUserRequest, options?: AxiosRequestConfig): AxiosPromise<User>;
    /**
     * Delete a pending [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Delete a pending email/password authentication user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} email Email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    adminDeletePendingEmailPasswordUser(groupId: any, appId: any, email: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Delete a specific [user account](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts) by ID.
     * @summary Delete a user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    adminDeleteUser(groupId: any, appId: any, userId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Disable a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Disable a user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    adminDisableUser(groupId: any, appId: any, userId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Enable a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Enable a user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    adminEnableUser(groupId: any, appId: any, userId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get a specific [user account](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts) by ID.
     * @summary Get a User
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    adminGetUser(groupId: any, appId: any, userId: any, options?: AxiosRequestConfig): AxiosPromise<User>;
    /**
     *
     * @summary List a user\'s devices
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    adminListDevices(groupId: any, appId: any, userId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * List pending user account registrations. Returns up to 50 pending users in a call.
     * @summary List pending users
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [after] The unique &#x60;&#x60;_id&#x60;&#x60; for a pending user. &#x60;&#x60;List pending users&#x60;&#x60; can return 50 pending users at a time. To view additional results, find the &#x60;&#x60;_id&#x60;&#x60; of the last pending user listed in the previous call to &#x60;&#x60;list pending users&#x60;&#x60;. Call &#x60;&#x60;list pending users&#x60;&#x60; again, passing the &#x60;&#x60;_id&#x60;&#x60; to the after parameter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    adminListPendingUsers(groupId: any, appId: any, after?: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * List confirmed [user accounts](https://www.mongodb.com/docs/atlas/app-services/authentication#std-label-user-accounts).
     * @summary List users
     * @param {any} [after] The &#x60;id&#x60; of the last user returned by a previous paginated request.
     * @param {any} [sort] The field name to sort results by. The only valid value is the default: &#x60;_id&#x60;.
     * @param {any} [desc] If &#x60;true&#x60;, returns sorted results in descending order. If not specified or set to &#x60;false&#x60;, results return in ascending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    adminListUsers(after?: any, sort?: any, desc?: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Change the email address for an [email/password user](https://www.mongodb.com/docs/atlas/app-services/authentication/email-password/) by ID.
     * @summary Change a user\'s email
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {AdminResetUserEmailRequest} adminResetUserEmailRequest The new email address for the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    adminResetUserEmail(groupId: any, appId: any, userId: any, adminResetUserEmailRequest: AdminResetUserEmailRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Revoke all of a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts)\'s sessions.
     * @summary Revoke user sessions
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    adminUserLogout(groupId: any, appId: any, userId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Verify a that a user\'s client access token is valid.
     * @summary Verify & decode an access token
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminVerifyUserAccessTokenRequest} adminVerifyUserAccessTokenRequest The user\&#39;s client access token. The access token represents a logged in application user. This is not the same as the [&#x60;&#x60;access_token&#x60;&#x60;](https://www.mongodb.com/docs/atlas/app-services/admin/api/v3/#section/Get-Authentication-Tokens) that you use to work with the Admin API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    adminVerifyUserAccessToken(groupId: any, appId: any, adminVerifyUserAccessTokenRequest: AdminVerifyUserAccessTokenRequest, options?: AxiosRequestConfig): AxiosPromise<any>;
}
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI implements UsersApiInterface {
    /**
     * Create a new [email/password](https://www.mongodb.com/docs/atlas/app-services/authentication/email-password/) user account.  *Note:* You cannot create user accounts through the Admin API for any authentication provider other than email/password.
     * @summary Create a user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminCreateUserRequest} adminCreateUserRequest The user to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    adminCreateUser(groupId: any, appId: any, adminCreateUserRequest: AdminCreateUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
    /**
     * Delete a pending [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Delete a pending email/password authentication user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} email Email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    adminDeletePendingEmailPasswordUser(groupId: any, appId: any, email: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete a specific [user account](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts) by ID.
     * @summary Delete a user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    adminDeleteUser(groupId: any, appId: any, userId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Disable a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Disable a user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    adminDisableUser(groupId: any, appId: any, userId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Enable a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Enable a user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    adminEnableUser(groupId: any, appId: any, userId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a specific [user account](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts) by ID.
     * @summary Get a User
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    adminGetUser(groupId: any, appId: any, userId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
    /**
     *
     * @summary List a user\'s devices
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    adminListDevices(groupId: any, appId: any, userId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * List pending user account registrations. Returns up to 50 pending users in a call.
     * @summary List pending users
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [after] The unique &#x60;&#x60;_id&#x60;&#x60; for a pending user. &#x60;&#x60;List pending users&#x60;&#x60; can return 50 pending users at a time. To view additional results, find the &#x60;&#x60;_id&#x60;&#x60; of the last pending user listed in the previous call to &#x60;&#x60;list pending users&#x60;&#x60;. Call &#x60;&#x60;list pending users&#x60;&#x60; again, passing the &#x60;&#x60;_id&#x60;&#x60; to the after parameter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    adminListPendingUsers(groupId: any, appId: any, after?: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * List confirmed [user accounts](https://www.mongodb.com/docs/atlas/app-services/authentication#std-label-user-accounts).
     * @summary List users
     * @param {any} [after] The &#x60;id&#x60; of the last user returned by a previous paginated request.
     * @param {any} [sort] The field name to sort results by. The only valid value is the default: &#x60;_id&#x60;.
     * @param {any} [desc] If &#x60;true&#x60;, returns sorted results in descending order. If not specified or set to &#x60;false&#x60;, results return in ascending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    adminListUsers(after?: any, sort?: any, desc?: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Change the email address for an [email/password user](https://www.mongodb.com/docs/atlas/app-services/authentication/email-password/) by ID.
     * @summary Change a user\'s email
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {AdminResetUserEmailRequest} adminResetUserEmailRequest The new email address for the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    adminResetUserEmail(groupId: any, appId: any, userId: any, adminResetUserEmailRequest: AdminResetUserEmailRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Revoke all of a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts)\'s sessions.
     * @summary Revoke user sessions
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    adminUserLogout(groupId: any, appId: any, userId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Verify a that a user\'s client access token is valid.
     * @summary Verify & decode an access token
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminVerifyUserAccessTokenRequest} adminVerifyUserAccessTokenRequest The user\&#39;s client access token. The access token represents a logged in application user. This is not the same as the [&#x60;&#x60;access_token&#x60;&#x60;](https://www.mongodb.com/docs/atlas/app-services/admin/api/v3/#section/Get-Authentication-Tokens) that you use to work with the Admin API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    adminVerifyUserAccessToken(groupId: any, appId: any, adminVerifyUserAccessTokenRequest: AdminVerifyUserAccessTokenRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
/**
 * ValuesApi - axios parameter creator
 * @export
 */
export declare const ValuesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Define a [Value](https://www.mongodb.com/docs/realm/values-and-secrets) in an application.
     * @summary Define a Value in an application
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {NewValue} newValue The value to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateValue: (groupId: any, appId: any, newValue: NewValue, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a [value](https://www.mongodb.com/docs/realm/values-and-secrets) defined in an application.
     * @summary Delete a value defined in an application.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} valueId The unique &#x60;_id&#x60; value of a value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteValue: (groupId: any, appId: any, valueId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a [value](https://www.mongodb.com/docs/realm/values-and-secrets) definition from an application.
     * @summary Retrieve a value definition from an application
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} valueId The unique &#x60;_id&#x60; value of a value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetValue: (groupId: any, appId: any, valueId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all [values](https://www.mongodb.com/docs/realm/values-and-secrets) defined in an application.
     * @summary List all values defined in an application.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListValues: (groupId: any, appId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a [value](https://www.mongodb.com/docs/realm/values-and-secrets) definition in an application.
     * @summary Update a value definition in an application
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} valueId The unique &#x60;_id&#x60; value of a value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateValue: (groupId: any, appId: any, valueId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ValuesApi - functional programming interface
 * @export
 */
export declare const ValuesApiFp: (configuration?: Configuration) => {
    /**
     * Define a [Value](https://www.mongodb.com/docs/realm/values-and-secrets) in an application.
     * @summary Define a Value in an application
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {NewValue} newValue The value to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateValue(groupId: any, appId: any, newValue: NewValue, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewValue>>;
    /**
     * Delete a [value](https://www.mongodb.com/docs/realm/values-and-secrets) defined in an application.
     * @summary Delete a value defined in an application.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} valueId The unique &#x60;_id&#x60; value of a value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteValue(groupId: any, appId: any, valueId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve a [value](https://www.mongodb.com/docs/realm/values-and-secrets) definition from an application.
     * @summary Retrieve a value definition from an application
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} valueId The unique &#x60;_id&#x60; value of a value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetValue(groupId: any, appId: any, valueId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Value>>;
    /**
     * List all [values](https://www.mongodb.com/docs/realm/values-and-secrets) defined in an application.
     * @summary List all values defined in an application.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListValues(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Update a [value](https://www.mongodb.com/docs/realm/values-and-secrets) definition in an application.
     * @summary Update a value definition in an application
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} valueId The unique &#x60;_id&#x60; value of a value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateValue(groupId: any, appId: any, valueId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * ValuesApi - factory interface
 * @export
 */
export declare const ValuesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Define a [Value](https://www.mongodb.com/docs/realm/values-and-secrets) in an application.
     * @summary Define a Value in an application
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {NewValue} newValue The value to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateValue(groupId: any, appId: any, newValue: NewValue, options?: any): AxiosPromise<NewValue>;
    /**
     * Delete a [value](https://www.mongodb.com/docs/realm/values-and-secrets) defined in an application.
     * @summary Delete a value defined in an application.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} valueId The unique &#x60;_id&#x60; value of a value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteValue(groupId: any, appId: any, valueId: any, options?: any): AxiosPromise<void>;
    /**
     * Retrieve a [value](https://www.mongodb.com/docs/realm/values-and-secrets) definition from an application.
     * @summary Retrieve a value definition from an application
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} valueId The unique &#x60;_id&#x60; value of a value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetValue(groupId: any, appId: any, valueId: any, options?: any): AxiosPromise<Value>;
    /**
     * List all [values](https://www.mongodb.com/docs/realm/values-and-secrets) defined in an application.
     * @summary List all values defined in an application.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListValues(groupId: any, appId: any, options?: any): AxiosPromise<any>;
    /**
     * Update a [value](https://www.mongodb.com/docs/realm/values-and-secrets) definition in an application.
     * @summary Update a value definition in an application
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} valueId The unique &#x60;_id&#x60; value of a value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateValue(groupId: any, appId: any, valueId: any, options?: any): AxiosPromise<any>;
};
/**
 * ValuesApi - interface
 * @export
 * @interface ValuesApi
 */
export interface ValuesApiInterface {
    /**
     * Define a [Value](https://www.mongodb.com/docs/realm/values-and-secrets) in an application.
     * @summary Define a Value in an application
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {NewValue} newValue The value to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValuesApiInterface
     */
    adminCreateValue(groupId: any, appId: any, newValue: NewValue, options?: AxiosRequestConfig): AxiosPromise<NewValue>;
    /**
     * Delete a [value](https://www.mongodb.com/docs/realm/values-and-secrets) defined in an application.
     * @summary Delete a value defined in an application.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} valueId The unique &#x60;_id&#x60; value of a value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValuesApiInterface
     */
    adminDeleteValue(groupId: any, appId: any, valueId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Retrieve a [value](https://www.mongodb.com/docs/realm/values-and-secrets) definition from an application.
     * @summary Retrieve a value definition from an application
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} valueId The unique &#x60;_id&#x60; value of a value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValuesApiInterface
     */
    adminGetValue(groupId: any, appId: any, valueId: any, options?: AxiosRequestConfig): AxiosPromise<Value>;
    /**
     * List all [values](https://www.mongodb.com/docs/realm/values-and-secrets) defined in an application.
     * @summary List all values defined in an application.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValuesApiInterface
     */
    adminListValues(groupId: any, appId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Update a [value](https://www.mongodb.com/docs/realm/values-and-secrets) definition in an application.
     * @summary Update a value definition in an application
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} valueId The unique &#x60;_id&#x60; value of a value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValuesApiInterface
     */
    adminUpdateValue(groupId: any, appId: any, valueId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
}
/**
 * ValuesApi - object-oriented interface
 * @export
 * @class ValuesApi
 * @extends {BaseAPI}
 */
export declare class ValuesApi extends BaseAPI implements ValuesApiInterface {
    /**
     * Define a [Value](https://www.mongodb.com/docs/realm/values-and-secrets) in an application.
     * @summary Define a Value in an application
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {NewValue} newValue The value to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValuesApi
     */
    adminCreateValue(groupId: any, appId: any, newValue: NewValue, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NewValue, any>>;
    /**
     * Delete a [value](https://www.mongodb.com/docs/realm/values-and-secrets) defined in an application.
     * @summary Delete a value defined in an application.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} valueId The unique &#x60;_id&#x60; value of a value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValuesApi
     */
    adminDeleteValue(groupId: any, appId: any, valueId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Retrieve a [value](https://www.mongodb.com/docs/realm/values-and-secrets) definition from an application.
     * @summary Retrieve a value definition from an application
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} valueId The unique &#x60;_id&#x60; value of a value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValuesApi
     */
    adminGetValue(groupId: any, appId: any, valueId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Value, any>>;
    /**
     * List all [values](https://www.mongodb.com/docs/realm/values-and-secrets) defined in an application.
     * @summary List all values defined in an application.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValuesApi
     */
    adminListValues(groupId: any, appId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Update a [value](https://www.mongodb.com/docs/realm/values-and-secrets) definition in an application.
     * @summary Update a value definition in an application
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} valueId The unique &#x60;_id&#x60; value of a value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValuesApi
     */
    adminUpdateValue(groupId: any, appId: any, valueId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
/**
 * WebhooksApi - axios parameter creator
 * @export
 */
export declare const WebhooksApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary Create a webhook
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} body The webhook to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateWebhook: (groupId: any, appId: any, serviceId: any, body: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary Delete a webhook
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} incomingWebhookId The unique &#x60;_id&#x60; value of an incoming webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteWebhook: (groupId: any, appId: any, serviceId: any, incomingWebhookId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary Retrieve a webhook
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} incomingWebhookId The unique &#x60;_id&#x60; value of an incoming webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetWebhook: (groupId: any, appId: any, serviceId: any, incomingWebhookId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List [webhooks](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary List webhooks
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListWebhooks: (groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary Update a webhook
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} incomingWebhookId The unique &#x60;_id&#x60; value of an incoming webhook
     * @param {any} body The updated state of the webhook.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateWebhook: (groupId: any, appId: any, serviceId: any, incomingWebhookId: any, body: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * WebhooksApi - functional programming interface
 * @export
 */
export declare const WebhooksApiFp: (configuration?: Configuration) => {
    /**
     * Create a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary Create a webhook
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} body The webhook to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateWebhook(groupId: any, appId: any, serviceId: any, body: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary Delete a webhook
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} incomingWebhookId The unique &#x60;_id&#x60; value of an incoming webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteWebhook(groupId: any, appId: any, serviceId: any, incomingWebhookId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary Retrieve a webhook
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} incomingWebhookId The unique &#x60;_id&#x60; value of an incoming webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetWebhook(groupId: any, appId: any, serviceId: any, incomingWebhookId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * List [webhooks](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary List webhooks
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListWebhooks(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Update a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary Update a webhook
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} incomingWebhookId The unique &#x60;_id&#x60; value of an incoming webhook
     * @param {any} body The updated state of the webhook.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateWebhook(groupId: any, appId: any, serviceId: any, incomingWebhookId: any, body: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * WebhooksApi - factory interface
 * @export
 */
export declare const WebhooksApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary Create a webhook
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} body The webhook to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateWebhook(groupId: any, appId: any, serviceId: any, body: any, options?: any): AxiosPromise<void>;
    /**
     * Delete a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary Delete a webhook
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} incomingWebhookId The unique &#x60;_id&#x60; value of an incoming webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteWebhook(groupId: any, appId: any, serviceId: any, incomingWebhookId: any, options?: any): AxiosPromise<void>;
    /**
     * Retrieve a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary Retrieve a webhook
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} incomingWebhookId The unique &#x60;_id&#x60; value of an incoming webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetWebhook(groupId: any, appId: any, serviceId: any, incomingWebhookId: any, options?: any): AxiosPromise<void>;
    /**
     * List [webhooks](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary List webhooks
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListWebhooks(groupId: any, appId: any, serviceId: any, options?: any): AxiosPromise<any>;
    /**
     * Update a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary Update a webhook
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} incomingWebhookId The unique &#x60;_id&#x60; value of an incoming webhook
     * @param {any} body The updated state of the webhook.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateWebhook(groupId: any, appId: any, serviceId: any, incomingWebhookId: any, body: any, options?: any): AxiosPromise<void>;
};
/**
 * WebhooksApi - interface
 * @export
 * @interface WebhooksApi
 */
export interface WebhooksApiInterface {
    /**
     * Create a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary Create a webhook
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} body The webhook to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiInterface
     */
    adminCreateWebhook(groupId: any, appId: any, serviceId: any, body: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Delete a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary Delete a webhook
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} incomingWebhookId The unique &#x60;_id&#x60; value of an incoming webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiInterface
     */
    adminDeleteWebhook(groupId: any, appId: any, serviceId: any, incomingWebhookId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Retrieve a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary Retrieve a webhook
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} incomingWebhookId The unique &#x60;_id&#x60; value of an incoming webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiInterface
     */
    adminGetWebhook(groupId: any, appId: any, serviceId: any, incomingWebhookId: any, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * List [webhooks](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary List webhooks
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiInterface
     */
    adminListWebhooks(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Update a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary Update a webhook
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} incomingWebhookId The unique &#x60;_id&#x60; value of an incoming webhook
     * @param {any} body The updated state of the webhook.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiInterface
     */
    adminUpdateWebhook(groupId: any, appId: any, serviceId: any, incomingWebhookId: any, body: any, options?: AxiosRequestConfig): AxiosPromise<void>;
}
/**
 * WebhooksApi - object-oriented interface
 * @export
 * @class WebhooksApi
 * @extends {BaseAPI}
 */
export declare class WebhooksApi extends BaseAPI implements WebhooksApiInterface {
    /**
     * Create a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary Create a webhook
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} body The webhook to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    adminCreateWebhook(groupId: any, appId: any, serviceId: any, body: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary Delete a webhook
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} incomingWebhookId The unique &#x60;_id&#x60; value of an incoming webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    adminDeleteWebhook(groupId: any, appId: any, serviceId: any, incomingWebhookId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Retrieve a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary Retrieve a webhook
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} incomingWebhookId The unique &#x60;_id&#x60; value of an incoming webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    adminGetWebhook(groupId: any, appId: any, serviceId: any, incomingWebhookId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * List [webhooks](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary List webhooks
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    adminListWebhooks(groupId: any, appId: any, serviceId: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Update a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary Update a webhook
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} incomingWebhookId The unique &#x60;_id&#x60; value of an incoming webhook
     * @param {any} body The updated state of the webhook.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    adminUpdateWebhook(groupId: any, appId: any, serviceId: any, incomingWebhookId: any, body: any, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
