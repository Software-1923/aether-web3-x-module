/* tslint:disable */
/* eslint-disable */
/**
 * MongoDB Atlas App Services Admin API
 * The App Services Admin API lets you programmatically perform administrative tasks over HTTPS. This includes defining & configuring things like:  - App Deployment & Security - APIs & Endpoints - Authentication & User Management - Data Sources - Device Sync - Environments - Functions - Logs - Rules - Schemas - Static Hosting - Triggers - Usage & Billing Metrics - Values & Secrets  The Admin API is for application development, configuration, and deployment. To actually use the features you configure with the Admin API, client applications connect with a [Realm SDK](https://mongodb.com/docs/realm/) or over an HTTPS API specific to your App.  ## Project & Application IDs  **Note**: The terms _Project ID_ and _Group ID_ are interchangeable.  Atlas App Services Admin API endpoints frequently require you to include two parameters in the URL:  - Your Atlas _Project ID_ (also sometimes called a _Group ID_) - Your App Services _Application ID_  ### Project ID  You can find your Project ID from the MongoDB Atlas dashboard or with the MongoDB Atlas CLI.  ### Application ID  To find an Application ID, make a request to the [List Apps](#operation/adminListApplications) endpoint for your project. You\'ll need an `access_token` to make this request. To learn how to get one, see [Get an Admin API Session Access Token](#get-an-admin-api-session-access-token).  ```sh curl --request GET \\   --header \'Authorization: Bearer <access_token>\' \\   https://realm.mongodb.com/api/admin/v3.0/groups/{groupId}/apps ```  This will return a list of objects describing each App Services App in the provided project/group. For Admin API requests, your Application ID is the ObjectId value in the `_id` field, _not_ the `client_app_id`.  ```json [   {     \"_id\": \"5997529e46224c6e42gb6dd9\",     \"group_id\": \"57879f6cc4b32dbe440bb8c5\",     \"domain_id\": \"5886619e46124e4c42fb5dd8\",     \"client_app_id\": \"myapp-abcde\",     \"name\": \"myapp\",     \"location\": \"US-VA\",     \"deployment_model\": \"GLOBAL\",     \"last_used\": 1615153544,     \"last_modified\": 0,     \"product\": \"standard\",     \"environment\": \"\"   } ] ```  ## Get an Admin API Session Access Token  Every request to the App Services Admin API must include a valid, unexpired access token issued by the MongoDB Cloud API. You include this token in the `Authorization` header of each request using the bearer auth scheme.  You need a valid [MongoDB Atlas programmatic API key](https://docs.atlas.mongodb.com/configure-api-access) for MongoDB Atlas to get a token.  Once you have an API key pair, call the authentication endpoint:  ```shell curl --request POST \\   --header \'Content-Type: application/json\' \\   --header \'Accept: application/json\' \\   --data \'{\"username\": \"<Public API Key>\", \"apiKey\": \"<Private API Key>\"}\' \\   https://realm.mongodb.com/api/admin/v3.0/auth/providers/mongodb-cloud/login ```  If authentication succeeds, App Services returns an access token as part of the JSON response document:  ```json {   \"access_token\": \"<access_token>\",   \"refresh_token\": \"<refresh_token>\",   \"user_id\": \"<user_id>\",   \"device_id\": \"<device_id>\" } ```  The `access_token` represents a limited-time authorization to interact with the Admin API. To authenticate a request, include the token in a [Bearer token](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication) `Authorization` header.  ```http Authorization: Bearer <access_token> ```  ## Refresh an Admin API Session Access Token  Session access tokens expire 30 minutes after they are issued. When you login, the response also includes a `refresh_token` that you can use to get a new access token. This is useful because you only need to log in with credentials one time. After that you can use the refresh token to re-authenticate for as long as its valid.  Refresh tokens expire 60 days after being issued.  To refresh your authentication and get a new `access_token`, call the auth session endpoint with your `refresh_token` in the `Authorization` header:  ```shell curl --request POST \\   --header \'Authorization: Bearer <refresh_token>\' \\   https://realm.mongodb.com/api/admin/v3.0/auth/session ```  If the refresh token is valid, the response body includes a new `access_token` that\'s valid for the next 30 minutes:  ```json {   \"access_token\": \"<access_token>\" } ```
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from './base';
export const AdminUserTypeEnum = {
    Normal: 'normal',
    Server: 'server',
    System: 'system',
    Unknown: 'unknown'
};
export const AtlasClusterNameEnum = {
    MongodbAtlas: 'mongodb-atlas'
};
export const AtlasClusterTypeEnum = {
    MongodbAtlas: 'mongodb-atlas'
};
export const AtlasClusterConfigReadPreferenceEnum = {
    Primary: 'primary',
    PrimaryPreferred: 'primaryPreferred',
    Secondary: 'secondary',
    SecondaryPreferred: 'secondaryPreferred',
    Nearest: 'nearest'
};
export const AtlasFederatedInstanceNameEnum = {
    MongodbDatafederation: 'mongodb-datafederation'
};
export const AtlasFederatedInstanceTypeEnum = {
    Datalake: 'datalake'
};
export const CustomResolverInputTypeFormatEnum = {
    Scalar: 'scalar',
    ScalarList: 'scalar-list',
    Generated: 'generated',
    GeneratedList: 'generated-list',
    Custom: 'custom'
};
export const CustomResolverPayloadTypeFormatEnum = {
    Scalar: 'scalar',
    ScalarList: 'scalar-list',
    Generated: 'generated',
    GeneratedList: 'generated-list',
    Custom: 'custom'
};
export const DataApiConfigValidationMethodEnum = {
    NoValidation: 'NO_VALIDATION',
    SecretAsQueryParam: 'SECRET_AS_QUERY_PARAM',
    VerifyPayload: 'VERIFY_PAYLOAD'
};
export const DeploymentConfigAutomaticDeploymentProviderEnum = {
    Github: 'github'
};
export const DeploymentMigrationStatusEnum = {
    Started: 'started',
    Downtime: 'downtime',
    EnablingEventSubscriptions: 'enabling_event_subscriptions',
    Cleanup: 'cleanup',
    Successful: 'successful',
    Failed: 'failed'
};
export const EndpointHttpMethodEnum = {
    Get: 'GET',
    Post: 'POST',
    Put: 'PUT',
    Patch: 'PATCH',
    Delete: 'DELETE',
    Star: '*'
};
export const EndpointValidationMethodEnum = {
    NoValidation: 'NO_VALIDATION',
    SecretAsQueryParam: 'SECRET_AS_QUERY_PARAM',
    VerifyPayload: 'VERIFY_PAYLOAD'
};
export const HostingConfigurationStatusEnum = {
    SetupOk: 'setup_ok',
    ChangeInProgress: 'change_in_progress',
    ChangeFailed: 'change_failed',
    ChangeFailedFatal: 'change_failed_fatal'
};
export const LogForwardingActionTypeEnum = {
    Collection: 'collection',
    Function: 'function'
};
export const LogForwardingPolicyTypeEnum = {
    Single: 'single',
    Batch: 'batch'
};
export const SyncDataResponseReadPreferenceEnum = {
    Primary: 'primary',
    PrimaryPreferred: 'primaryPreferred',
    Secondary: 'secondary',
    SecondaryPreferred: 'secondaryPreferred',
    Nearest: 'nearest'
};
export const ThirdPartyServiceTypeEnum = {
    Aws: 'aws',
    Twilio: 'twilio',
    Github: 'github',
    Gcm: 'gcm'
};
export const UserTypeEnum = {
    Normal: 'normal',
    Server: 'server'
};
/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Obtain a session access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateSession: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/auth/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication refreshAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete a session access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteSession: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/auth/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Authenticate as an App Services administrator using an Atlas programmatic API key pair. To learn more, see [Get An Admin API Session Access Token](#get-an-admin-api-session-access-token).
         * @summary Authenticate as an App Services administrator
         * @param {ProviderType} provider The authentication provider to use.
         * @param {AdminLoginRequest} adminLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminLogin: (provider, adminLoginRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('adminLogin', 'provider', provider);
            // verify required parameter 'adminLoginRequest' is not null or undefined
            assertParamExists('adminLogin', 'adminLoginRequest', adminLoginRequest);
            const localVarPath = `/auth/providers/{provider}/login`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(adminLoginRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary List App Services Admin Auth Providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminAuthProviders: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/auth/providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get information about the currently logged in user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminProfile: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/auth/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function (configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Obtain a session access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateSession(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminCreateSession(options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Delete a session access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteSession(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminDeleteSession(options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Authenticate as an App Services administrator using an Atlas programmatic API key pair. To learn more, see [Get An Admin API Session Access Token](#get-an-admin-api-session-access-token).
         * @summary Authenticate as an App Services administrator
         * @param {ProviderType} provider The authentication provider to use.
         * @param {AdminLoginRequest} adminLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminLogin(provider, adminLoginRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminLogin(provider, adminLoginRequest, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary List App Services Admin Auth Providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminAuthProviders(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAdminAuthProviders(options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get information about the currently logged in user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminProfile(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAdminProfile(options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration, basePath, axios) {
    const localVarFp = AdminApiFp(configuration);
    return {
        /**
         *
         * @summary Obtain a session access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateSession(options) {
            return localVarFp.adminCreateSession(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a session access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteSession(options) {
            return localVarFp.adminDeleteSession(options).then((request) => request(axios, basePath));
        },
        /**
         * Authenticate as an App Services administrator using an Atlas programmatic API key pair. To learn more, see [Get An Admin API Session Access Token](#get-an-admin-api-session-access-token).
         * @summary Authenticate as an App Services administrator
         * @param {ProviderType} provider The authentication provider to use.
         * @param {AdminLoginRequest} adminLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminLogin(provider, adminLoginRequest, options) {
            return localVarFp.adminLogin(provider, adminLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List App Services Admin Auth Providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminAuthProviders(options) {
            return localVarFp.getAdminAuthProviders(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get information about the currently logged in user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminProfile(options) {
            return localVarFp.getAdminProfile(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
    /**
     *
     * @summary Obtain a session access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    adminCreateSession(options) {
        return AdminApiFp(this.configuration).adminCreateSession(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete a session access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    adminDeleteSession(options) {
        return AdminApiFp(this.configuration).adminDeleteSession(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Authenticate as an App Services administrator using an Atlas programmatic API key pair. To learn more, see [Get An Admin API Session Access Token](#get-an-admin-api-session-access-token).
     * @summary Authenticate as an App Services administrator
     * @param {ProviderType} provider The authentication provider to use.
     * @param {AdminLoginRequest} adminLoginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    adminLogin(provider, adminLoginRequest, options) {
        return AdminApiFp(this.configuration).adminLogin(provider, adminLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List App Services Admin Auth Providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getAdminAuthProviders(options) {
        return AdminApiFp(this.configuration).getAdminAuthProviders(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get information about the currently logged in user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getAdminProfile(options) {
        return AdminApiFp(this.configuration).getAdminProfile(options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * ApikeysApi - axios parameter creator
 * @export
 */
export const ApikeysApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a new [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
         * @summary Create a new API key
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminCreateApiKeyRequest} adminCreateApiKeyRequest The API key to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateApiKey: (groupId, appId, adminCreateApiKeyRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminCreateApiKey', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminCreateApiKey', 'appId', appId);
            // verify required parameter 'adminCreateApiKeyRequest' is not null or undefined
            assertParamExists('adminCreateApiKey', 'adminCreateApiKeyRequest', adminCreateApiKeyRequest);
            const localVarPath = `/groups/{groupId}/apps/{appId}/api_keys`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(adminCreateApiKeyRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
         * @summary Delete an API key
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteApiKey: (groupId, appId, apiKeyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminDeleteApiKey', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminDeleteApiKey', 'appId', appId);
            // verify required parameter 'apiKeyId' is not null or undefined
            assertParamExists('adminDeleteApiKey', 'apiKeyId', apiKeyId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/api_keys/{apiKeyId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"apiKeyId"}}`, encodeURIComponent(String(apiKeyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Disable an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
         * @summary Disable an API key
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDisableApiKey: (groupId, appId, apiKeyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminDisableApiKey', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminDisableApiKey', 'appId', appId);
            // verify required parameter 'apiKeyId' is not null or undefined
            assertParamExists('adminDisableApiKey', 'apiKeyId', apiKeyId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/api_keys/{apiKeyId}/disable`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"apiKeyId"}}`, encodeURIComponent(String(apiKeyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Enable an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
         * @summary Enable an API key
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminEnableApiKey: (groupId, appId, apiKeyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminEnableApiKey', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminEnableApiKey', 'appId', appId);
            // verify required parameter 'apiKeyId' is not null or undefined
            assertParamExists('adminEnableApiKey', 'apiKeyId', apiKeyId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/api_keys/{apiKeyId}/enable`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"apiKeyId"}}`, encodeURIComponent(String(apiKeyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve information about an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
         * @summary Retrieve information about an API key
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetApiKey: (groupId, appId, apiKeyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetApiKey', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetApiKey', 'appId', appId);
            // verify required parameter 'apiKeyId' is not null or undefined
            assertParamExists('adminGetApiKey', 'apiKeyId', apiKeyId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/api_keys/{apiKeyId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"apiKeyId"}}`, encodeURIComponent(String(apiKeyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List [API keys](https://www.mongodb.com/docs/realm/authentication/api-key/) associated with a Atlas App Services App.
         * @summary List API keys
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListApiKeys: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminListApiKeys', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminListApiKeys', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/api_keys`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ApikeysApi - functional programming interface
 * @export
 */
export const ApikeysApiFp = function (configuration) {
    const localVarAxiosParamCreator = ApikeysApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a new [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
         * @summary Create a new API key
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminCreateApiKeyRequest} adminCreateApiKeyRequest The API key to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateApiKey(groupId, appId, adminCreateApiKeyRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminCreateApiKey(groupId, appId, adminCreateApiKeyRequest, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Delete an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
         * @summary Delete an API key
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteApiKey(groupId, appId, apiKeyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminDeleteApiKey(groupId, appId, apiKeyId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Disable an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
         * @summary Disable an API key
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDisableApiKey(groupId, appId, apiKeyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminDisableApiKey(groupId, appId, apiKeyId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Enable an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
         * @summary Enable an API key
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminEnableApiKey(groupId, appId, apiKeyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminEnableApiKey(groupId, appId, apiKeyId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Retrieve information about an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
         * @summary Retrieve information about an API key
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetApiKey(groupId, appId, apiKeyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetApiKey(groupId, appId, apiKeyId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * List [API keys](https://www.mongodb.com/docs/realm/authentication/api-key/) associated with a Atlas App Services App.
         * @summary List API keys
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListApiKeys(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminListApiKeys(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * ApikeysApi - factory interface
 * @export
 */
export const ApikeysApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ApikeysApiFp(configuration);
    return {
        /**
         * Create a new [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
         * @summary Create a new API key
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminCreateApiKeyRequest} adminCreateApiKeyRequest The API key to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateApiKey(groupId, appId, adminCreateApiKeyRequest, options) {
            return localVarFp.adminCreateApiKey(groupId, appId, adminCreateApiKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
         * @summary Delete an API key
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteApiKey(groupId, appId, apiKeyId, options) {
            return localVarFp.adminDeleteApiKey(groupId, appId, apiKeyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Disable an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
         * @summary Disable an API key
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDisableApiKey(groupId, appId, apiKeyId, options) {
            return localVarFp.adminDisableApiKey(groupId, appId, apiKeyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
         * @summary Enable an API key
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminEnableApiKey(groupId, appId, apiKeyId, options) {
            return localVarFp.adminEnableApiKey(groupId, appId, apiKeyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve information about an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
         * @summary Retrieve information about an API key
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetApiKey(groupId, appId, apiKeyId, options) {
            return localVarFp.adminGetApiKey(groupId, appId, apiKeyId, options).then((request) => request(axios, basePath));
        },
        /**
         * List [API keys](https://www.mongodb.com/docs/realm/authentication/api-key/) associated with a Atlas App Services App.
         * @summary List API keys
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListApiKeys(groupId, appId, options) {
            return localVarFp.adminListApiKeys(groupId, appId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ApikeysApi - object-oriented interface
 * @export
 * @class ApikeysApi
 * @extends {BaseAPI}
 */
export class ApikeysApi extends BaseAPI {
    /**
     * Create a new [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Create a new API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminCreateApiKeyRequest} adminCreateApiKeyRequest The API key to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApikeysApi
     */
    adminCreateApiKey(groupId, appId, adminCreateApiKeyRequest, options) {
        return ApikeysApiFp(this.configuration).adminCreateApiKey(groupId, appId, adminCreateApiKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Delete an API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApikeysApi
     */
    adminDeleteApiKey(groupId, appId, apiKeyId, options) {
        return ApikeysApiFp(this.configuration).adminDeleteApiKey(groupId, appId, apiKeyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Disable an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Disable an API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApikeysApi
     */
    adminDisableApiKey(groupId, appId, apiKeyId, options) {
        return ApikeysApiFp(this.configuration).adminDisableApiKey(groupId, appId, apiKeyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Enable an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Enable an API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApikeysApi
     */
    adminEnableApiKey(groupId, appId, apiKeyId, options) {
        return ApikeysApiFp(this.configuration).adminEnableApiKey(groupId, appId, apiKeyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve information about an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
     * @summary Retrieve information about an API key
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} apiKeyId The unique &#x60;_id&#x60; value of an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApikeysApi
     */
    adminGetApiKey(groupId, appId, apiKeyId, options) {
        return ApikeysApiFp(this.configuration).adminGetApiKey(groupId, appId, apiKeyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List [API keys](https://www.mongodb.com/docs/realm/authentication/api-key/) associated with a Atlas App Services App.
     * @summary List API keys
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApikeysApi
     */
    adminListApiKeys(groupId, appId, options) {
        return ApikeysApiFp(this.configuration).adminListApiKeys(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * AppsApi - axios parameter creator
 * @export
 */
export const AppsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create a new app
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} body The application to create.
         * @param {any} [defaults] Whether or not to create a default application.
         * @param {AdminCreateApplicationProductEnum} [product] The App\&#39;s product type. Apps use the &#x60;standard&#x60; product type by default. For most apps, you do not need to specify a &#x60;product&#x60; at all, or should specify &#x60;standard&#x60;.  The &#x60;atlas&#x60; and &#x60;data-api&#x60; product types represent special, apps for [Atlas Triggers](https://docs.mongodb.com/atlas/triggers) and [Atlas Data API](https://docs.mongodb.com/atlas/api/data-api/) that you can access through the Atlas UI.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateApplication: (groupId, body, defaults, product, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminCreateApplication', 'groupId', groupId);
            // verify required parameter 'body' is not null or undefined
            assertParamExists('adminCreateApplication', 'body', body);
            const localVarPath = `/groups/{groupId}/apps`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (defaults !== undefined) {
                localVarQueryParameter['defaults'] = defaults;
            }
            if (product !== undefined) {
                localVarQueryParameter['product'] = product;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete an app
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteApplication: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminDeleteApplication', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminDeleteApplication', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * [Export](https://www.mongodb.com/docs/atlas/app-services/apps/export/) an application as a zip file.
         * @summary Export an app as a zip file
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} [deployment] The &#x60;_id&#x60; of a specific deployment to export. If not specified, export the latest deployment.
         * @param {any} [sourceControl] If &#x60;true&#x60;, the exported directory is suitable for automatic deployment from GitHub or other source control.  Cannot be used with the &#x60;template&#x60; query parameter.
         * @param {any} [template] If &#x60;true&#x60;, the exported directory does not include any identifiers or other data that would tie the app to a specific deployment instance.  Cannot be used with the &#x60;source_control&#x60; query parameter.
         * @param {any} [version] The configuration file schema version to export. This value corresponds to &#x60;config_version&#x60; in &#x60;realm_config.json&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminExportApplication: (groupId, appId, deployment, sourceControl, template, version, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminExportApplication', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminExportApplication', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/export`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (deployment !== undefined) {
                localVarQueryParameter['deployment'] = deployment;
            }
            if (sourceControl !== undefined) {
                localVarQueryParameter['source_control'] = sourceControl;
            }
            if (template !== undefined) {
                localVarQueryParameter['template'] = template;
            }
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get an app
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetApplication: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetApplication', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetApplication', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List all App Services Apps within an Atlas [project/group](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @summary List all App Services Apps in an Atlas project/group
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {AdminListApplicationsProductEnum} [product] One or more specific App Services product types. If specified, this endpoint only returns Apps of the specified product type(s).  Most apps use the &#x60;standard&#x60; product type, which this endpoint returns by default. The &#x60;atlas&#x60; and &#x60;data-api&#x60; product types represent special apps for [Atlas Triggers](https://docs.mongodb.com/atlas/triggers) and [Atlas Data API](https://docs.mongodb.com/atlas/api/data-api/) that you can access through the Atlas UI.  You can specify multiple product types as a comma-separated list:  &#x60;&#x60;&#x60; /groups/{groupId}/apps?product&#x3D;atlas,data-api &#x60;&#x60;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListApplications: (groupId, product, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminListApplications', 'groupId', groupId);
            const localVarPath = `/groups/{groupId}/apps`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (product !== undefined) {
                localVarQueryParameter['product'] = product;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * AppsApi - functional programming interface
 * @export
 */
export const AppsApiFp = function (configuration) {
    const localVarAxiosParamCreator = AppsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Create a new app
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} body The application to create.
         * @param {any} [defaults] Whether or not to create a default application.
         * @param {AdminCreateApplicationProductEnum} [product] The App\&#39;s product type. Apps use the &#x60;standard&#x60; product type by default. For most apps, you do not need to specify a &#x60;product&#x60; at all, or should specify &#x60;standard&#x60;.  The &#x60;atlas&#x60; and &#x60;data-api&#x60; product types represent special, apps for [Atlas Triggers](https://docs.mongodb.com/atlas/triggers) and [Atlas Data API](https://docs.mongodb.com/atlas/api/data-api/) that you can access through the Atlas UI.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateApplication(groupId, body, defaults, product, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminCreateApplication(groupId, body, defaults, product, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Delete an app
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteApplication(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminDeleteApplication(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * [Export](https://www.mongodb.com/docs/atlas/app-services/apps/export/) an application as a zip file.
         * @summary Export an app as a zip file
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} [deployment] The &#x60;_id&#x60; of a specific deployment to export. If not specified, export the latest deployment.
         * @param {any} [sourceControl] If &#x60;true&#x60;, the exported directory is suitable for automatic deployment from GitHub or other source control.  Cannot be used with the &#x60;template&#x60; query parameter.
         * @param {any} [template] If &#x60;true&#x60;, the exported directory does not include any identifiers or other data that would tie the app to a specific deployment instance.  Cannot be used with the &#x60;source_control&#x60; query parameter.
         * @param {any} [version] The configuration file schema version to export. This value corresponds to &#x60;config_version&#x60; in &#x60;realm_config.json&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminExportApplication(groupId, appId, deployment, sourceControl, template, version, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminExportApplication(groupId, appId, deployment, sourceControl, template, version, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get an app
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetApplication(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetApplication(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * List all App Services Apps within an Atlas [project/group](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @summary List all App Services Apps in an Atlas project/group
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {AdminListApplicationsProductEnum} [product] One or more specific App Services product types. If specified, this endpoint only returns Apps of the specified product type(s).  Most apps use the &#x60;standard&#x60; product type, which this endpoint returns by default. The &#x60;atlas&#x60; and &#x60;data-api&#x60; product types represent special apps for [Atlas Triggers](https://docs.mongodb.com/atlas/triggers) and [Atlas Data API](https://docs.mongodb.com/atlas/api/data-api/) that you can access through the Atlas UI.  You can specify multiple product types as a comma-separated list:  &#x60;&#x60;&#x60; /groups/{groupId}/apps?product&#x3D;atlas,data-api &#x60;&#x60;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListApplications(groupId, product, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminListApplications(groupId, product, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * AppsApi - factory interface
 * @export
 */
export const AppsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = AppsApiFp(configuration);
    return {
        /**
         *
         * @summary Create a new app
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} body The application to create.
         * @param {any} [defaults] Whether or not to create a default application.
         * @param {AdminCreateApplicationProductEnum} [product] The App\&#39;s product type. Apps use the &#x60;standard&#x60; product type by default. For most apps, you do not need to specify a &#x60;product&#x60; at all, or should specify &#x60;standard&#x60;.  The &#x60;atlas&#x60; and &#x60;data-api&#x60; product types represent special, apps for [Atlas Triggers](https://docs.mongodb.com/atlas/triggers) and [Atlas Data API](https://docs.mongodb.com/atlas/api/data-api/) that you can access through the Atlas UI.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateApplication(groupId, body, defaults, product, options) {
            return localVarFp.adminCreateApplication(groupId, body, defaults, product, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete an app
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteApplication(groupId, appId, options) {
            return localVarFp.adminDeleteApplication(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * [Export](https://www.mongodb.com/docs/atlas/app-services/apps/export/) an application as a zip file.
         * @summary Export an app as a zip file
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} [deployment] The &#x60;_id&#x60; of a specific deployment to export. If not specified, export the latest deployment.
         * @param {any} [sourceControl] If &#x60;true&#x60;, the exported directory is suitable for automatic deployment from GitHub or other source control.  Cannot be used with the &#x60;template&#x60; query parameter.
         * @param {any} [template] If &#x60;true&#x60;, the exported directory does not include any identifiers or other data that would tie the app to a specific deployment instance.  Cannot be used with the &#x60;source_control&#x60; query parameter.
         * @param {any} [version] The configuration file schema version to export. This value corresponds to &#x60;config_version&#x60; in &#x60;realm_config.json&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminExportApplication(groupId, appId, deployment, sourceControl, template, version, options) {
            return localVarFp.adminExportApplication(groupId, appId, deployment, sourceControl, template, version, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get an app
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetApplication(groupId, appId, options) {
            return localVarFp.adminGetApplication(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all App Services Apps within an Atlas [project/group](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @summary List all App Services Apps in an Atlas project/group
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {AdminListApplicationsProductEnum} [product] One or more specific App Services product types. If specified, this endpoint only returns Apps of the specified product type(s).  Most apps use the &#x60;standard&#x60; product type, which this endpoint returns by default. The &#x60;atlas&#x60; and &#x60;data-api&#x60; product types represent special apps for [Atlas Triggers](https://docs.mongodb.com/atlas/triggers) and [Atlas Data API](https://docs.mongodb.com/atlas/api/data-api/) that you can access through the Atlas UI.  You can specify multiple product types as a comma-separated list:  &#x60;&#x60;&#x60; /groups/{groupId}/apps?product&#x3D;atlas,data-api &#x60;&#x60;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListApplications(groupId, product, options) {
            return localVarFp.adminListApplications(groupId, product, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AppsApi - object-oriented interface
 * @export
 * @class AppsApi
 * @extends {BaseAPI}
 */
export class AppsApi extends BaseAPI {
    /**
     *
     * @summary Create a new app
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} body The application to create.
     * @param {any} [defaults] Whether or not to create a default application.
     * @param {AdminCreateApplicationProductEnum} [product] The App\&#39;s product type. Apps use the &#x60;standard&#x60; product type by default. For most apps, you do not need to specify a &#x60;product&#x60; at all, or should specify &#x60;standard&#x60;.  The &#x60;atlas&#x60; and &#x60;data-api&#x60; product types represent special, apps for [Atlas Triggers](https://docs.mongodb.com/atlas/triggers) and [Atlas Data API](https://docs.mongodb.com/atlas/api/data-api/) that you can access through the Atlas UI.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApi
     */
    adminCreateApplication(groupId, body, defaults, product, options) {
        return AppsApiFp(this.configuration).adminCreateApplication(groupId, body, defaults, product, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete an app
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApi
     */
    adminDeleteApplication(groupId, appId, options) {
        return AppsApiFp(this.configuration).adminDeleteApplication(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * [Export](https://www.mongodb.com/docs/atlas/app-services/apps/export/) an application as a zip file.
     * @summary Export an app as a zip file
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [deployment] The &#x60;_id&#x60; of a specific deployment to export. If not specified, export the latest deployment.
     * @param {any} [sourceControl] If &#x60;true&#x60;, the exported directory is suitable for automatic deployment from GitHub or other source control.  Cannot be used with the &#x60;template&#x60; query parameter.
     * @param {any} [template] If &#x60;true&#x60;, the exported directory does not include any identifiers or other data that would tie the app to a specific deployment instance.  Cannot be used with the &#x60;source_control&#x60; query parameter.
     * @param {any} [version] The configuration file schema version to export. This value corresponds to &#x60;config_version&#x60; in &#x60;realm_config.json&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApi
     */
    adminExportApplication(groupId, appId, deployment, sourceControl, template, version, options) {
        return AppsApiFp(this.configuration).adminExportApplication(groupId, appId, deployment, sourceControl, template, version, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get an app
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApi
     */
    adminGetApplication(groupId, appId, options) {
        return AppsApiFp(this.configuration).adminGetApplication(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all App Services Apps within an Atlas [project/group](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @summary List all App Services Apps in an Atlas project/group
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {AdminListApplicationsProductEnum} [product] One or more specific App Services product types. If specified, this endpoint only returns Apps of the specified product type(s).  Most apps use the &#x60;standard&#x60; product type, which this endpoint returns by default. The &#x60;atlas&#x60; and &#x60;data-api&#x60; product types represent special apps for [Atlas Triggers](https://docs.mongodb.com/atlas/triggers) and [Atlas Data API](https://docs.mongodb.com/atlas/api/data-api/) that you can access through the Atlas UI.  You can specify multiple product types as a comma-separated list:  &#x60;&#x60;&#x60; /groups/{groupId}/apps?product&#x3D;atlas,data-api &#x60;&#x60;&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApi
     */
    adminListApplications(groupId, product, options) {
        return AppsApiFp(this.configuration).adminListApplications(groupId, product, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * @export
 */
export const AdminCreateApplicationProductEnum = {
    Standard: 'standard',
    Atlas: 'atlas',
    DataApi: 'data-api'
};
/**
 * @export
 */
export const AdminListApplicationsProductEnum = {
    Standard: 'standard',
    Atlas: 'atlas',
    DataApi: 'data-api'
};
/**
 * AuthprovidersApi - axios parameter creator
 * @export
 */
export const AuthprovidersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
         * @summary Create an authentication provider
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateAuthProvider: (groupId, appId, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminCreateAuthProvider', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminCreateAuthProvider', 'appId', appId);
            // verify required parameter 'body' is not null or undefined
            assertParamExists('adminCreateAuthProvider', 'body', body);
            const localVarPath = `/groups/{groupId}/apps/{appId}/auth_providers`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
         * @summary Delete an authentication provider
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteAuthProvider: (groupId, appId, providerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminDeleteAuthProvider', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminDeleteAuthProvider', 'appId', appId);
            // verify required parameter 'providerId' is not null or undefined
            assertParamExists('adminDeleteAuthProvider', 'providerId', providerId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/auth_providers/{providerId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"providerId"}}`, encodeURIComponent(String(providerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Disable an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
         * @summary Disable an authentication provider
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDisableAuthProvider: (groupId, appId, providerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminDisableAuthProvider', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminDisableAuthProvider', 'appId', appId);
            // verify required parameter 'providerId' is not null or undefined
            assertParamExists('adminDisableAuthProvider', 'providerId', providerId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/auth_providers/{providerId}/disable`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"providerId"}}`, encodeURIComponent(String(providerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Enable an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
         * @summary Enable an authentication provider
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminEnableAuthProvider: (groupId, appId, providerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminEnableAuthProvider', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminEnableAuthProvider', 'appId', appId);
            // verify required parameter 'providerId' is not null or undefined
            assertParamExists('adminEnableAuthProvider', 'providerId', providerId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/auth_providers/{providerId}/enable`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"providerId"}}`, encodeURIComponent(String(providerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve information about one of an application\'s [authentication providers](https://www.mongodb.com/docs/realm/authentication/).
         * @summary Retrieve information about authentication provider
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAuthProvider: (groupId, appId, providerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetAuthProvider', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetAuthProvider', 'appId', appId);
            // verify required parameter 'providerId' is not null or undefined
            assertParamExists('adminGetAuthProvider', 'providerId', providerId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/auth_providers/{providerId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"providerId"}}`, encodeURIComponent(String(providerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List [authentication providers](https://www.mongodb.com/docs/realm/authentication/) within a Atlas App Services App.
         * @summary List authentication providers in a Atlas App Services App
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListAuthProviders: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminListAuthProviders', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminListAuthProviders', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/auth_providers`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
         * @summary Update an authentication provider
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateAuthProvider: (groupId, appId, providerId, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminUpdateAuthProvider', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminUpdateAuthProvider', 'appId', appId);
            // verify required parameter 'providerId' is not null or undefined
            assertParamExists('adminUpdateAuthProvider', 'providerId', providerId);
            // verify required parameter 'body' is not null or undefined
            assertParamExists('adminUpdateAuthProvider', 'body', body);
            const localVarPath = `/groups/{groupId}/apps/{appId}/auth_providers/{providerId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"providerId"}}`, encodeURIComponent(String(providerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * AuthprovidersApi - functional programming interface
 * @export
 */
export const AuthprovidersApiFp = function (configuration) {
    const localVarAxiosParamCreator = AuthprovidersApiAxiosParamCreator(configuration);
    return {
        /**
         * Create an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
         * @summary Create an authentication provider
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateAuthProvider(groupId, appId, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminCreateAuthProvider(groupId, appId, body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Delete an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
         * @summary Delete an authentication provider
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteAuthProvider(groupId, appId, providerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminDeleteAuthProvider(groupId, appId, providerId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Disable an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
         * @summary Disable an authentication provider
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDisableAuthProvider(groupId, appId, providerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminDisableAuthProvider(groupId, appId, providerId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Enable an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
         * @summary Enable an authentication provider
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminEnableAuthProvider(groupId, appId, providerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminEnableAuthProvider(groupId, appId, providerId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Retrieve information about one of an application\'s [authentication providers](https://www.mongodb.com/docs/realm/authentication/).
         * @summary Retrieve information about authentication provider
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAuthProvider(groupId, appId, providerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetAuthProvider(groupId, appId, providerId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * List [authentication providers](https://www.mongodb.com/docs/realm/authentication/) within a Atlas App Services App.
         * @summary List authentication providers in a Atlas App Services App
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListAuthProviders(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminListAuthProviders(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Update an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
         * @summary Update an authentication provider
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateAuthProvider(groupId, appId, providerId, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminUpdateAuthProvider(groupId, appId, providerId, body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * AuthprovidersApi - factory interface
 * @export
 */
export const AuthprovidersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = AuthprovidersApiFp(configuration);
    return {
        /**
         * Create an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
         * @summary Create an authentication provider
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateAuthProvider(groupId, appId, body, options) {
            return localVarFp.adminCreateAuthProvider(groupId, appId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
         * @summary Delete an authentication provider
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteAuthProvider(groupId, appId, providerId, options) {
            return localVarFp.adminDeleteAuthProvider(groupId, appId, providerId, options).then((request) => request(axios, basePath));
        },
        /**
         * Disable an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
         * @summary Disable an authentication provider
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDisableAuthProvider(groupId, appId, providerId, options) {
            return localVarFp.adminDisableAuthProvider(groupId, appId, providerId, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
         * @summary Enable an authentication provider
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminEnableAuthProvider(groupId, appId, providerId, options) {
            return localVarFp.adminEnableAuthProvider(groupId, appId, providerId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve information about one of an application\'s [authentication providers](https://www.mongodb.com/docs/realm/authentication/).
         * @summary Retrieve information about authentication provider
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAuthProvider(groupId, appId, providerId, options) {
            return localVarFp.adminGetAuthProvider(groupId, appId, providerId, options).then((request) => request(axios, basePath));
        },
        /**
         * List [authentication providers](https://www.mongodb.com/docs/realm/authentication/) within a Atlas App Services App.
         * @summary List authentication providers in a Atlas App Services App
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListAuthProviders(groupId, appId, options) {
            return localVarFp.adminListAuthProviders(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
         * @summary Update an authentication provider
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateAuthProvider(groupId, appId, providerId, body, options) {
            return localVarFp.adminUpdateAuthProvider(groupId, appId, providerId, body, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AuthprovidersApi - object-oriented interface
 * @export
 * @class AuthprovidersApi
 * @extends {BaseAPI}
 */
export class AuthprovidersApi extends BaseAPI {
    /**
     * Create an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Create an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthprovidersApi
     */
    adminCreateAuthProvider(groupId, appId, body, options) {
        return AuthprovidersApiFp(this.configuration).adminCreateAuthProvider(groupId, appId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Delete an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthprovidersApi
     */
    adminDeleteAuthProvider(groupId, appId, providerId, options) {
        return AuthprovidersApiFp(this.configuration).adminDeleteAuthProvider(groupId, appId, providerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Disable an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Disable an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthprovidersApi
     */
    adminDisableAuthProvider(groupId, appId, providerId, options) {
        return AuthprovidersApiFp(this.configuration).adminDisableAuthProvider(groupId, appId, providerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Enable an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Enable an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthprovidersApi
     */
    adminEnableAuthProvider(groupId, appId, providerId, options) {
        return AuthprovidersApiFp(this.configuration).adminEnableAuthProvider(groupId, appId, providerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve information about one of an application\'s [authentication providers](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Retrieve information about authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthprovidersApi
     */
    adminGetAuthProvider(groupId, appId, providerId, options) {
        return AuthprovidersApiFp(this.configuration).adminGetAuthProvider(groupId, appId, providerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List [authentication providers](https://www.mongodb.com/docs/realm/authentication/) within a Atlas App Services App.
     * @summary List authentication providers in a Atlas App Services App
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthprovidersApi
     */
    adminListAuthProviders(groupId, appId, options) {
        return AuthprovidersApiFp(this.configuration).adminListAuthProviders(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
     * @summary Update an authentication provider
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} providerId The unique &#x60;_id&#x60; value of an authentication provider
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthprovidersApi
     */
    adminUpdateAuthProvider(groupId, appId, providerId, body, options) {
        return AuthprovidersApiFp(this.configuration).adminUpdateAuthProvider(groupId, appId, providerId, body, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * BillingApi - axios parameter creator
 * @export
 */
export const BillingApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * List the request, compute, sync, data transfer, and memory usage of a specific app in a given period for [billing](https://www.mongodb.com/docs/realm/billing) purposes.
         * @summary List app billing usage
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} [start] The ISO 8601 date and time of the start of the query period. Default is 00:00:00 UTC on the first day of the current month.
         * @param {any} [end] The ISO 8601 date and time of the end of the query period. Default is 23:59:59 UTC on the the last day of the current month.
         * @param {AdminAppMeasurementsGranularityEnum} [granularity] Specifies the granularity of the query period, either P31D (31 day) or PT1H (1 hour). Default is P31D.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminAppMeasurements: (groupId, appId, start, end, granularity, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminAppMeasurements', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminAppMeasurements', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/measurements`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }
            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = granularity;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List the request, compute, sync, and data transfer usage in a given period for [billing](https://www.mongodb.com/docs/realm/billing) purposes.
         * @summary List group billing usage in a given period
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} [start] The ISO 8601 date and time of the start of the query period. Default is 00:00:00 UTC on the first day of the current month.
         * @param {any} [end] The ISO 8601 date and time of the end of the query period. Default is 23:59:59 UTC on the the last day of the current month.
         * @param {AdminMeasurementsGranularityEnum} [granularity] Specifies the granularity of the query period, either P31D (31 day) or PT1H (1 hour). Default is P31D.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminMeasurements: (groupId, start, end, granularity, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminMeasurements', 'groupId', groupId);
            const localVarPath = `/groups/{groupId}/measurements`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }
            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = granularity;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * BillingApi - functional programming interface
 * @export
 */
export const BillingApiFp = function (configuration) {
    const localVarAxiosParamCreator = BillingApiAxiosParamCreator(configuration);
    return {
        /**
         * List the request, compute, sync, data transfer, and memory usage of a specific app in a given period for [billing](https://www.mongodb.com/docs/realm/billing) purposes.
         * @summary List app billing usage
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} [start] The ISO 8601 date and time of the start of the query period. Default is 00:00:00 UTC on the first day of the current month.
         * @param {any} [end] The ISO 8601 date and time of the end of the query period. Default is 23:59:59 UTC on the the last day of the current month.
         * @param {AdminAppMeasurementsGranularityEnum} [granularity] Specifies the granularity of the query period, either P31D (31 day) or PT1H (1 hour). Default is P31D.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminAppMeasurements(groupId, appId, start, end, granularity, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminAppMeasurements(groupId, appId, start, end, granularity, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * List the request, compute, sync, and data transfer usage in a given period for [billing](https://www.mongodb.com/docs/realm/billing) purposes.
         * @summary List group billing usage in a given period
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} [start] The ISO 8601 date and time of the start of the query period. Default is 00:00:00 UTC on the first day of the current month.
         * @param {any} [end] The ISO 8601 date and time of the end of the query period. Default is 23:59:59 UTC on the the last day of the current month.
         * @param {AdminMeasurementsGranularityEnum} [granularity] Specifies the granularity of the query period, either P31D (31 day) or PT1H (1 hour). Default is P31D.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminMeasurements(groupId, start, end, granularity, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminMeasurements(groupId, start, end, granularity, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * BillingApi - factory interface
 * @export
 */
export const BillingApiFactory = function (configuration, basePath, axios) {
    const localVarFp = BillingApiFp(configuration);
    return {
        /**
         * List the request, compute, sync, data transfer, and memory usage of a specific app in a given period for [billing](https://www.mongodb.com/docs/realm/billing) purposes.
         * @summary List app billing usage
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} [start] The ISO 8601 date and time of the start of the query period. Default is 00:00:00 UTC on the first day of the current month.
         * @param {any} [end] The ISO 8601 date and time of the end of the query period. Default is 23:59:59 UTC on the the last day of the current month.
         * @param {AdminAppMeasurementsGranularityEnum} [granularity] Specifies the granularity of the query period, either P31D (31 day) or PT1H (1 hour). Default is P31D.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminAppMeasurements(groupId, appId, start, end, granularity, options) {
            return localVarFp.adminAppMeasurements(groupId, appId, start, end, granularity, options).then((request) => request(axios, basePath));
        },
        /**
         * List the request, compute, sync, and data transfer usage in a given period for [billing](https://www.mongodb.com/docs/realm/billing) purposes.
         * @summary List group billing usage in a given period
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} [start] The ISO 8601 date and time of the start of the query period. Default is 00:00:00 UTC on the first day of the current month.
         * @param {any} [end] The ISO 8601 date and time of the end of the query period. Default is 23:59:59 UTC on the the last day of the current month.
         * @param {AdminMeasurementsGranularityEnum} [granularity] Specifies the granularity of the query period, either P31D (31 day) or PT1H (1 hour). Default is P31D.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminMeasurements(groupId, start, end, granularity, options) {
            return localVarFp.adminMeasurements(groupId, start, end, granularity, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * BillingApi - object-oriented interface
 * @export
 * @class BillingApi
 * @extends {BaseAPI}
 */
export class BillingApi extends BaseAPI {
    /**
     * List the request, compute, sync, data transfer, and memory usage of a specific app in a given period for [billing](https://www.mongodb.com/docs/realm/billing) purposes.
     * @summary List app billing usage
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [start] The ISO 8601 date and time of the start of the query period. Default is 00:00:00 UTC on the first day of the current month.
     * @param {any} [end] The ISO 8601 date and time of the end of the query period. Default is 23:59:59 UTC on the the last day of the current month.
     * @param {AdminAppMeasurementsGranularityEnum} [granularity] Specifies the granularity of the query period, either P31D (31 day) or PT1H (1 hour). Default is P31D.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    adminAppMeasurements(groupId, appId, start, end, granularity, options) {
        return BillingApiFp(this.configuration).adminAppMeasurements(groupId, appId, start, end, granularity, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List the request, compute, sync, and data transfer usage in a given period for [billing](https://www.mongodb.com/docs/realm/billing) purposes.
     * @summary List group billing usage in a given period
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} [start] The ISO 8601 date and time of the start of the query period. Default is 00:00:00 UTC on the first day of the current month.
     * @param {any} [end] The ISO 8601 date and time of the end of the query period. Default is 23:59:59 UTC on the the last day of the current month.
     * @param {AdminMeasurementsGranularityEnum} [granularity] Specifies the granularity of the query period, either P31D (31 day) or PT1H (1 hour). Default is P31D.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    adminMeasurements(groupId, start, end, granularity, options) {
        return BillingApiFp(this.configuration).adminMeasurements(groupId, start, end, granularity, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * @export
 */
export const AdminAppMeasurementsGranularityEnum = {
    P31D: 'P31D',
    Pt1H: 'PT1H'
};
/**
 * @export
 */
export const AdminMeasurementsGranularityEnum = {
    P31D: 'P31D',
    Pt1H: 'PT1H'
};
/**
 * CustomUserDataApi - axios parameter creator
 * @export
 */
export const CustomUserDataApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get the [Custom User Data](https://www.mongodb.com/docs/atlas/app-services/users/enable-custom-user-data/) configuration for an Atlas App Services App.
         * @summary Get the Custom User Data Configuration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCustomUserDataConfig: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetCustomUserDataConfig', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetCustomUserDataConfig', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/custom_user_data`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify the [Custom User Data](https://www.mongodb.com/docs/atlas/app-services/users/enable-custom-user-data/) configuration for an Atlas App Services App.
         * @summary Configure Custom User Data
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {CustomUserDataConfig} [customUserDataConfig]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSetCustomUserDataConfig: (groupId, appId, customUserDataConfig, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminSetCustomUserDataConfig', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminSetCustomUserDataConfig', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/custom_user_data`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(customUserDataConfig, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * CustomUserDataApi - functional programming interface
 * @export
 */
export const CustomUserDataApiFp = function (configuration) {
    const localVarAxiosParamCreator = CustomUserDataApiAxiosParamCreator(configuration);
    return {
        /**
         * Get the [Custom User Data](https://www.mongodb.com/docs/atlas/app-services/users/enable-custom-user-data/) configuration for an Atlas App Services App.
         * @summary Get the Custom User Data Configuration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCustomUserDataConfig(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetCustomUserDataConfig(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Modify the [Custom User Data](https://www.mongodb.com/docs/atlas/app-services/users/enable-custom-user-data/) configuration for an Atlas App Services App.
         * @summary Configure Custom User Data
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {CustomUserDataConfig} [customUserDataConfig]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSetCustomUserDataConfig(groupId, appId, customUserDataConfig, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminSetCustomUserDataConfig(groupId, appId, customUserDataConfig, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * CustomUserDataApi - factory interface
 * @export
 */
export const CustomUserDataApiFactory = function (configuration, basePath, axios) {
    const localVarFp = CustomUserDataApiFp(configuration);
    return {
        /**
         * Get the [Custom User Data](https://www.mongodb.com/docs/atlas/app-services/users/enable-custom-user-data/) configuration for an Atlas App Services App.
         * @summary Get the Custom User Data Configuration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCustomUserDataConfig(groupId, appId, options) {
            return localVarFp.adminGetCustomUserDataConfig(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify the [Custom User Data](https://www.mongodb.com/docs/atlas/app-services/users/enable-custom-user-data/) configuration for an Atlas App Services App.
         * @summary Configure Custom User Data
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {CustomUserDataConfig} [customUserDataConfig]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSetCustomUserDataConfig(groupId, appId, customUserDataConfig, options) {
            return localVarFp.adminSetCustomUserDataConfig(groupId, appId, customUserDataConfig, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * CustomUserDataApi - object-oriented interface
 * @export
 * @class CustomUserDataApi
 * @extends {BaseAPI}
 */
export class CustomUserDataApi extends BaseAPI {
    /**
     * Get the [Custom User Data](https://www.mongodb.com/docs/atlas/app-services/users/enable-custom-user-data/) configuration for an Atlas App Services App.
     * @summary Get the Custom User Data Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomUserDataApi
     */
    adminGetCustomUserDataConfig(groupId, appId, options) {
        return CustomUserDataApiFp(this.configuration).adminGetCustomUserDataConfig(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify the [Custom User Data](https://www.mongodb.com/docs/atlas/app-services/users/enable-custom-user-data/) configuration for an Atlas App Services App.
     * @summary Configure Custom User Data
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {CustomUserDataConfig} [customUserDataConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomUserDataApi
     */
    adminSetCustomUserDataConfig(groupId, appId, customUserDataConfig, options) {
        return CustomUserDataApiFp(this.configuration).adminSetCustomUserDataConfig(groupId, appId, customUserDataConfig, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * DataApiApi - axios parameter creator
 * @export
 */
export const DataApiApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create your app\'s [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
         * @summary Enable the Data API
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {DataApiConfig} dataApiConfig A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints#std-label-appconfig-data-api-endpoints) for the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateDataApiConfig: (groupId, appId, dataApiConfig, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminCreateDataApiConfig', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminCreateDataApiConfig', 'appId', appId);
            // verify required parameter 'dataApiConfig' is not null or undefined
            assertParamExists('adminCreateDataApiConfig', 'dataApiConfig', dataApiConfig);
            const localVarPath = `/groups/{groupId}/apps/{appId}/data_api/config`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(dataApiConfig, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get your app\'s [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
         * @summary Get the Data API Configuration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetDataApiConfig: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetDataApiConfig', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetDataApiConfig', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/data_api/config`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List all possible Data API versions.
         * @summary List Data API versions
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetDataApiVersions: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetDataApiVersions', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetDataApiVersions', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/data_api/versions`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update your app\'s [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
         * @summary Modify the Data API
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {DataApiConfig} dataApiConfig A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints#std-label-appconfig-data-api-endpoints) for the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminModifyDataApiConfig: (groupId, appId, dataApiConfig, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminModifyDataApiConfig', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminModifyDataApiConfig', 'appId', appId);
            // verify required parameter 'dataApiConfig' is not null or undefined
            assertParamExists('adminModifyDataApiConfig', 'dataApiConfig', dataApiConfig);
            const localVarPath = `/groups/{groupId}/apps/{appId}/data_api/config`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(dataApiConfig, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * DataApiApi - functional programming interface
 * @export
 */
export const DataApiApiFp = function (configuration) {
    const localVarAxiosParamCreator = DataApiApiAxiosParamCreator(configuration);
    return {
        /**
         * Create your app\'s [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
         * @summary Enable the Data API
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {DataApiConfig} dataApiConfig A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints#std-label-appconfig-data-api-endpoints) for the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateDataApiConfig(groupId, appId, dataApiConfig, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminCreateDataApiConfig(groupId, appId, dataApiConfig, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Get your app\'s [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
         * @summary Get the Data API Configuration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetDataApiConfig(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetDataApiConfig(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * List all possible Data API versions.
         * @summary List Data API versions
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetDataApiVersions(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetDataApiVersions(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Update your app\'s [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
         * @summary Modify the Data API
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {DataApiConfig} dataApiConfig A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints#std-label-appconfig-data-api-endpoints) for the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminModifyDataApiConfig(groupId, appId, dataApiConfig, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminModifyDataApiConfig(groupId, appId, dataApiConfig, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * DataApiApi - factory interface
 * @export
 */
export const DataApiApiFactory = function (configuration, basePath, axios) {
    const localVarFp = DataApiApiFp(configuration);
    return {
        /**
         * Create your app\'s [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
         * @summary Enable the Data API
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {DataApiConfig} dataApiConfig A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints#std-label-appconfig-data-api-endpoints) for the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateDataApiConfig(groupId, appId, dataApiConfig, options) {
            return localVarFp.adminCreateDataApiConfig(groupId, appId, dataApiConfig, options).then((request) => request(axios, basePath));
        },
        /**
         * Get your app\'s [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
         * @summary Get the Data API Configuration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetDataApiConfig(groupId, appId, options) {
            return localVarFp.adminGetDataApiConfig(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all possible Data API versions.
         * @summary List Data API versions
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetDataApiVersions(groupId, appId, options) {
            return localVarFp.adminGetDataApiVersions(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update your app\'s [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
         * @summary Modify the Data API
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {DataApiConfig} dataApiConfig A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints#std-label-appconfig-data-api-endpoints) for the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminModifyDataApiConfig(groupId, appId, dataApiConfig, options) {
            return localVarFp.adminModifyDataApiConfig(groupId, appId, dataApiConfig, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * DataApiApi - object-oriented interface
 * @export
 * @class DataApiApi
 * @extends {BaseAPI}
 */
export class DataApiApi extends BaseAPI {
    /**
     * Create your app\'s [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
     * @summary Enable the Data API
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {DataApiConfig} dataApiConfig A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints#std-label-appconfig-data-api-endpoints) for the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiApi
     */
    adminCreateDataApiConfig(groupId, appId, dataApiConfig, options) {
        return DataApiApiFp(this.configuration).adminCreateDataApiConfig(groupId, appId, dataApiConfig, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get your app\'s [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
     * @summary Get the Data API Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiApi
     */
    adminGetDataApiConfig(groupId, appId, options) {
        return DataApiApiFp(this.configuration).adminGetDataApiConfig(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all possible Data API versions.
     * @summary List Data API versions
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiApi
     */
    adminGetDataApiVersions(groupId, appId, options) {
        return DataApiApiFp(this.configuration).adminGetDataApiVersions(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update your app\'s [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
     * @summary Modify the Data API
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {DataApiConfig} dataApiConfig A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints#std-label-appconfig-data-api-endpoints) for the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiApi
     */
    adminModifyDataApiConfig(groupId, appId, dataApiConfig, options) {
        return DataApiApiFp(this.configuration).adminModifyDataApiConfig(groupId, appId, dataApiConfig, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * DependenciesApi - axios parameter creator
 * @export
 */
export const DependenciesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * List [external dependencies](https://www.mongodb.com/docs/realm/functions/dependencies/) uploaded to the Atlas App Services App.
         * @summary List external dependencies
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAllDependencies: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetAllDependencies', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetAllDependencies', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/dependencies`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * DependenciesApi - functional programming interface
 * @export
 */
export const DependenciesApiFp = function (configuration) {
    const localVarAxiosParamCreator = DependenciesApiAxiosParamCreator(configuration);
    return {
        /**
         * List [external dependencies](https://www.mongodb.com/docs/realm/functions/dependencies/) uploaded to the Atlas App Services App.
         * @summary List external dependencies
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAllDependencies(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetAllDependencies(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * DependenciesApi - factory interface
 * @export
 */
export const DependenciesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = DependenciesApiFp(configuration);
    return {
        /**
         * List [external dependencies](https://www.mongodb.com/docs/realm/functions/dependencies/) uploaded to the Atlas App Services App.
         * @summary List external dependencies
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAllDependencies(groupId, appId, options) {
            return localVarFp.adminGetAllDependencies(groupId, appId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * DependenciesApi - object-oriented interface
 * @export
 * @class DependenciesApi
 * @extends {BaseAPI}
 */
export class DependenciesApi extends BaseAPI {
    /**
     * List [external dependencies](https://www.mongodb.com/docs/realm/functions/dependencies/) uploaded to the Atlas App Services App.
     * @summary List external dependencies
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DependenciesApi
     */
    adminGetAllDependencies(groupId, appId, options) {
        return DependenciesApiFp(this.configuration).adminGetAllDependencies(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * DeployApi - axios parameter creator
 * @export
 */
export const DeployApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Modify an App\'s deployment configuration to customize how the App deploys changes.
         * @summary Configure Deployment
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {DeploymentConfig} [deploymentConfig]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminConfigureDeployment: (groupId, appId, deploymentConfig, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminConfigureDeployment', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminConfigureDeployment', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/deploy/config`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(deploymentConfig, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new application deployment draft, if none exists.
         * @summary Create a Deployment Draft
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateDeploymentDraft: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminCreateDeploymentDraft', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminCreateDeploymentDraft', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/drafts`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Start a new deployment migration.
         * @summary Create a Deployment Migration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AppDeploymentSettings} appDeploymentSettings The deployment model and cloud provider region that the App should migrate to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateDeploymentMigration: (groupId, appId, appDeploymentSettings, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminCreateDeploymentMigration', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminCreateDeploymentMigration', 'appId', appId);
            // verify required parameter 'appDeploymentSettings' is not null or undefined
            assertParamExists('adminCreateDeploymentMigration', 'appDeploymentSettings', appDeploymentSettings);
            const localVarPath = `/groups/{groupId}/apps/{appId}/deployment_migration`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(appDeploymentSettings, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deploy the specified application deployment draft.
         * @summary Deploy a deployment draft
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} draftId The unique &#x60;_id&#x60; value of a draft.
         * @param {AdminDeployDraftRequest} [adminDeployDraftRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeployDraft: (groupId, appId, draftId, adminDeployDraftRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminDeployDraft', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminDeployDraft', 'appId', appId);
            // verify required parameter 'draftId' is not null or undefined
            assertParamExists('adminDeployDraft', 'draftId', draftId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/drafts/{draftId}/deployment`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"draftId"}}`, encodeURIComponent(String(draftId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(adminDeployDraftRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Return a diff between the currently deployed application and the specified draft.
         * @summary Diff a draft with the current deployment
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} draftId The unique &#x60;_id&#x60; value of a draft.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeployDraftDiff: (groupId, appId, draftId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminDeployDraftDiff', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminDeployDraftDiff', 'appId', appId);
            // verify required parameter 'draftId' is not null or undefined
            assertParamExists('adminDeployDraftDiff', 'draftId', draftId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/drafts/{draftId}/diff`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"draftId"}}`, encodeURIComponent(String(draftId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Discard the specified application deployment draft.
         * @summary Discard the specified deployment draft
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} draftId The unique &#x60;_id&#x60; value of a draft.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDiscardDraft: (groupId, appId, draftId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminDiscardDraft', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminDiscardDraft', 'appId', appId);
            // verify required parameter 'draftId' is not null or undefined
            assertParamExists('adminDiscardDraft', 'draftId', draftId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/drafts/{draftId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"draftId"}}`, encodeURIComponent(String(draftId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get information about a recent deployment of the application.
         * @summary Get a deployment
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} deploymentId The &#x60;_id&#x60; value of an application deployment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetDeployment: (groupId, appId, deploymentId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetDeployment', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetDeployment', 'appId', appId);
            // verify required parameter 'deploymentId' is not null or undefined
            assertParamExists('adminGetDeployment', 'deploymentId', deploymentId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/deployments/{deploymentId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"deploymentId"}}`, encodeURIComponent(String(deploymentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * See information about how your App deploys changes.
         * @summary Get the Deployment Configuration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetDeploymentConfig: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetDeploymentConfig', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetDeploymentConfig', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/deploy/config`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get metadata and status for the current deployment migration, if one exists.
         * @summary Get a Deployment Migration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetDeploymentMigration: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetDeploymentMigration', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetDeploymentMigration', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/deployment_migration`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Return a list of all supported cloud regions in which you can deploy an Atlas App.
         * @summary List all available Atlas App cloud regions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListAppRegions: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/provider_regions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Return the current application deployment draft, if applicable.
         * @summary Get Current Deployment Draft
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListDeploymentDrafts: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminListDeploymentDrafts', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminListDeploymentDrafts', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/drafts`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Return the 25 most recent application deployments.
         * @summary List recent deployments
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListDeployments: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminListDeployments', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminListDeployments', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/deployments`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Redeploy a previously-deployed version of an App.
         * @summary Redeploy a Deployment
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} deploymentId The &#x60;_id&#x60; value of an application deployment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminRedeployDeployment: (groupId, appId, deploymentId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminRedeployDeployment', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminRedeployDeployment', 'appId', appId);
            // verify required parameter 'deploymentId' is not null or undefined
            assertParamExists('adminRedeployDeployment', 'deploymentId', deploymentId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/deployments/{deploymentId}/redeploy`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"deploymentId"}}`, encodeURIComponent(String(deploymentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * DeployApi - functional programming interface
 * @export
 */
export const DeployApiFp = function (configuration) {
    const localVarAxiosParamCreator = DeployApiAxiosParamCreator(configuration);
    return {
        /**
         * Modify an App\'s deployment configuration to customize how the App deploys changes.
         * @summary Configure Deployment
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {DeploymentConfig} [deploymentConfig]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminConfigureDeployment(groupId, appId, deploymentConfig, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminConfigureDeployment(groupId, appId, deploymentConfig, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Create a new application deployment draft, if none exists.
         * @summary Create a Deployment Draft
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateDeploymentDraft(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminCreateDeploymentDraft(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Start a new deployment migration.
         * @summary Create a Deployment Migration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AppDeploymentSettings} appDeploymentSettings The deployment model and cloud provider region that the App should migrate to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateDeploymentMigration(groupId, appId, appDeploymentSettings, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminCreateDeploymentMigration(groupId, appId, appDeploymentSettings, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Deploy the specified application deployment draft.
         * @summary Deploy a deployment draft
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} draftId The unique &#x60;_id&#x60; value of a draft.
         * @param {AdminDeployDraftRequest} [adminDeployDraftRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeployDraft(groupId, appId, draftId, adminDeployDraftRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminDeployDraft(groupId, appId, draftId, adminDeployDraftRequest, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Return a diff between the currently deployed application and the specified draft.
         * @summary Diff a draft with the current deployment
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} draftId The unique &#x60;_id&#x60; value of a draft.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeployDraftDiff(groupId, appId, draftId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminDeployDraftDiff(groupId, appId, draftId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Discard the specified application deployment draft.
         * @summary Discard the specified deployment draft
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} draftId The unique &#x60;_id&#x60; value of a draft.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDiscardDraft(groupId, appId, draftId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminDiscardDraft(groupId, appId, draftId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Get information about a recent deployment of the application.
         * @summary Get a deployment
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} deploymentId The &#x60;_id&#x60; value of an application deployment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetDeployment(groupId, appId, deploymentId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetDeployment(groupId, appId, deploymentId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * See information about how your App deploys changes.
         * @summary Get the Deployment Configuration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetDeploymentConfig(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetDeploymentConfig(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Get metadata and status for the current deployment migration, if one exists.
         * @summary Get a Deployment Migration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetDeploymentMigration(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetDeploymentMigration(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Return a list of all supported cloud regions in which you can deploy an Atlas App.
         * @summary List all available Atlas App cloud regions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListAppRegions(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminListAppRegions(options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Return the current application deployment draft, if applicable.
         * @summary Get Current Deployment Draft
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListDeploymentDrafts(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminListDeploymentDrafts(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Return the 25 most recent application deployments.
         * @summary List recent deployments
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListDeployments(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminListDeployments(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Redeploy a previously-deployed version of an App.
         * @summary Redeploy a Deployment
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} deploymentId The &#x60;_id&#x60; value of an application deployment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminRedeployDeployment(groupId, appId, deploymentId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminRedeployDeployment(groupId, appId, deploymentId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * DeployApi - factory interface
 * @export
 */
export const DeployApiFactory = function (configuration, basePath, axios) {
    const localVarFp = DeployApiFp(configuration);
    return {
        /**
         * Modify an App\'s deployment configuration to customize how the App deploys changes.
         * @summary Configure Deployment
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {DeploymentConfig} [deploymentConfig]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminConfigureDeployment(groupId, appId, deploymentConfig, options) {
            return localVarFp.adminConfigureDeployment(groupId, appId, deploymentConfig, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new application deployment draft, if none exists.
         * @summary Create a Deployment Draft
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateDeploymentDraft(groupId, appId, options) {
            return localVarFp.adminCreateDeploymentDraft(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Start a new deployment migration.
         * @summary Create a Deployment Migration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AppDeploymentSettings} appDeploymentSettings The deployment model and cloud provider region that the App should migrate to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateDeploymentMigration(groupId, appId, appDeploymentSettings, options) {
            return localVarFp.adminCreateDeploymentMigration(groupId, appId, appDeploymentSettings, options).then((request) => request(axios, basePath));
        },
        /**
         * Deploy the specified application deployment draft.
         * @summary Deploy a deployment draft
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} draftId The unique &#x60;_id&#x60; value of a draft.
         * @param {AdminDeployDraftRequest} [adminDeployDraftRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeployDraft(groupId, appId, draftId, adminDeployDraftRequest, options) {
            return localVarFp.adminDeployDraft(groupId, appId, draftId, adminDeployDraftRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a diff between the currently deployed application and the specified draft.
         * @summary Diff a draft with the current deployment
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} draftId The unique &#x60;_id&#x60; value of a draft.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeployDraftDiff(groupId, appId, draftId, options) {
            return localVarFp.adminDeployDraftDiff(groupId, appId, draftId, options).then((request) => request(axios, basePath));
        },
        /**
         * Discard the specified application deployment draft.
         * @summary Discard the specified deployment draft
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} draftId The unique &#x60;_id&#x60; value of a draft.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDiscardDraft(groupId, appId, draftId, options) {
            return localVarFp.adminDiscardDraft(groupId, appId, draftId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a recent deployment of the application.
         * @summary Get a deployment
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} deploymentId The &#x60;_id&#x60; value of an application deployment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetDeployment(groupId, appId, deploymentId, options) {
            return localVarFp.adminGetDeployment(groupId, appId, deploymentId, options).then((request) => request(axios, basePath));
        },
        /**
         * See information about how your App deploys changes.
         * @summary Get the Deployment Configuration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetDeploymentConfig(groupId, appId, options) {
            return localVarFp.adminGetDeploymentConfig(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get metadata and status for the current deployment migration, if one exists.
         * @summary Get a Deployment Migration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetDeploymentMigration(groupId, appId, options) {
            return localVarFp.adminGetDeploymentMigration(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a list of all supported cloud regions in which you can deploy an Atlas App.
         * @summary List all available Atlas App cloud regions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListAppRegions(options) {
            return localVarFp.adminListAppRegions(options).then((request) => request(axios, basePath));
        },
        /**
         * Return the current application deployment draft, if applicable.
         * @summary Get Current Deployment Draft
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListDeploymentDrafts(groupId, appId, options) {
            return localVarFp.adminListDeploymentDrafts(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the 25 most recent application deployments.
         * @summary List recent deployments
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListDeployments(groupId, appId, options) {
            return localVarFp.adminListDeployments(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Redeploy a previously-deployed version of an App.
         * @summary Redeploy a Deployment
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} deploymentId The &#x60;_id&#x60; value of an application deployment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminRedeployDeployment(groupId, appId, deploymentId, options) {
            return localVarFp.adminRedeployDeployment(groupId, appId, deploymentId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * DeployApi - object-oriented interface
 * @export
 * @class DeployApi
 * @extends {BaseAPI}
 */
export class DeployApi extends BaseAPI {
    /**
     * Modify an App\'s deployment configuration to customize how the App deploys changes.
     * @summary Configure Deployment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {DeploymentConfig} [deploymentConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    adminConfigureDeployment(groupId, appId, deploymentConfig, options) {
        return DeployApiFp(this.configuration).adminConfigureDeployment(groupId, appId, deploymentConfig, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new application deployment draft, if none exists.
     * @summary Create a Deployment Draft
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    adminCreateDeploymentDraft(groupId, appId, options) {
        return DeployApiFp(this.configuration).adminCreateDeploymentDraft(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Start a new deployment migration.
     * @summary Create a Deployment Migration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AppDeploymentSettings} appDeploymentSettings The deployment model and cloud provider region that the App should migrate to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    adminCreateDeploymentMigration(groupId, appId, appDeploymentSettings, options) {
        return DeployApiFp(this.configuration).adminCreateDeploymentMigration(groupId, appId, appDeploymentSettings, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deploy the specified application deployment draft.
     * @summary Deploy a deployment draft
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} draftId The unique &#x60;_id&#x60; value of a draft.
     * @param {AdminDeployDraftRequest} [adminDeployDraftRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    adminDeployDraft(groupId, appId, draftId, adminDeployDraftRequest, options) {
        return DeployApiFp(this.configuration).adminDeployDraft(groupId, appId, draftId, adminDeployDraftRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Return a diff between the currently deployed application and the specified draft.
     * @summary Diff a draft with the current deployment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} draftId The unique &#x60;_id&#x60; value of a draft.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    adminDeployDraftDiff(groupId, appId, draftId, options) {
        return DeployApiFp(this.configuration).adminDeployDraftDiff(groupId, appId, draftId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Discard the specified application deployment draft.
     * @summary Discard the specified deployment draft
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} draftId The unique &#x60;_id&#x60; value of a draft.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    adminDiscardDraft(groupId, appId, draftId, options) {
        return DeployApiFp(this.configuration).adminDiscardDraft(groupId, appId, draftId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get information about a recent deployment of the application.
     * @summary Get a deployment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} deploymentId The &#x60;_id&#x60; value of an application deployment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    adminGetDeployment(groupId, appId, deploymentId, options) {
        return DeployApiFp(this.configuration).adminGetDeployment(groupId, appId, deploymentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * See information about how your App deploys changes.
     * @summary Get the Deployment Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    adminGetDeploymentConfig(groupId, appId, options) {
        return DeployApiFp(this.configuration).adminGetDeploymentConfig(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get metadata and status for the current deployment migration, if one exists.
     * @summary Get a Deployment Migration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    adminGetDeploymentMigration(groupId, appId, options) {
        return DeployApiFp(this.configuration).adminGetDeploymentMigration(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Return a list of all supported cloud regions in which you can deploy an Atlas App.
     * @summary List all available Atlas App cloud regions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    adminListAppRegions(options) {
        return DeployApiFp(this.configuration).adminListAppRegions(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Return the current application deployment draft, if applicable.
     * @summary Get Current Deployment Draft
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    adminListDeploymentDrafts(groupId, appId, options) {
        return DeployApiFp(this.configuration).adminListDeploymentDrafts(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Return the 25 most recent application deployments.
     * @summary List recent deployments
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    adminListDeployments(groupId, appId, options) {
        return DeployApiFp(this.configuration).adminListDeployments(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Redeploy a previously-deployed version of an App.
     * @summary Redeploy a Deployment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} deploymentId The &#x60;_id&#x60; value of an application deployment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    adminRedeployDeployment(groupId, appId, deploymentId, options) {
        return DeployApiFp(this.configuration).adminRedeployDeployment(groupId, appId, deploymentId, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * EmailApi - axios parameter creator
 * @export
 */
export const EmailApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Confirm a pending [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
         * @summary Confirm a pending user
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} email Email address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminConfirmPendingUser: (groupId, appId, email, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminConfirmPendingUser', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminConfirmPendingUser', 'appId', appId);
            // verify required parameter 'email' is not null or undefined
            assertParamExists('adminConfirmPendingUser', 'email', email);
            const localVarPath = `/groups/{groupId}/apps/{appId}/user_registrations/by_email/{email}/confirm`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Reruns a pending user\'s [confirmation workflow](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
         * @summary Rerun a user confirmation workflow
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} email Email address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminRerunPendingUserConfirmation: (groupId, appId, email, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminRerunPendingUserConfirmation', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminRerunPendingUserConfirmation', 'appId', appId);
            // verify required parameter 'email' is not null or undefined
            assertParamExists('adminRerunPendingUserConfirmation', 'email', email);
            const localVarPath = `/groups/{groupId}/apps/{appId}/user_registrations/by_email/{email}/run_confirm`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Send a [confirmation email](https://www.mongodb.com/docs/realm/authentication/email-password/).
         * @summary Send a confirmation email
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} email Email address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSendConfirmationEmail: (groupId, appId, email, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminSendConfirmationEmail', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminSendConfirmationEmail', 'appId', appId);
            // verify required parameter 'email' is not null or undefined
            assertParamExists('adminSendConfirmationEmail', 'email', email);
            const localVarPath = `/groups/{groupId}/apps/{appId}/user_registrations/by_email/{email}/send_confirm`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * EmailApi - functional programming interface
 * @export
 */
export const EmailApiFp = function (configuration) {
    const localVarAxiosParamCreator = EmailApiAxiosParamCreator(configuration);
    return {
        /**
         * Confirm a pending [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
         * @summary Confirm a pending user
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} email Email address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminConfirmPendingUser(groupId, appId, email, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminConfirmPendingUser(groupId, appId, email, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Reruns a pending user\'s [confirmation workflow](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
         * @summary Rerun a user confirmation workflow
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} email Email address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminRerunPendingUserConfirmation(groupId, appId, email, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminRerunPendingUserConfirmation(groupId, appId, email, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Send a [confirmation email](https://www.mongodb.com/docs/realm/authentication/email-password/).
         * @summary Send a confirmation email
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} email Email address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSendConfirmationEmail(groupId, appId, email, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminSendConfirmationEmail(groupId, appId, email, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * EmailApi - factory interface
 * @export
 */
export const EmailApiFactory = function (configuration, basePath, axios) {
    const localVarFp = EmailApiFp(configuration);
    return {
        /**
         * Confirm a pending [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
         * @summary Confirm a pending user
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} email Email address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminConfirmPendingUser(groupId, appId, email, options) {
            return localVarFp.adminConfirmPendingUser(groupId, appId, email, options).then((request) => request(axios, basePath));
        },
        /**
         * Reruns a pending user\'s [confirmation workflow](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
         * @summary Rerun a user confirmation workflow
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} email Email address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminRerunPendingUserConfirmation(groupId, appId, email, options) {
            return localVarFp.adminRerunPendingUserConfirmation(groupId, appId, email, options).then((request) => request(axios, basePath));
        },
        /**
         * Send a [confirmation email](https://www.mongodb.com/docs/realm/authentication/email-password/).
         * @summary Send a confirmation email
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} email Email address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSendConfirmationEmail(groupId, appId, email, options) {
            return localVarFp.adminSendConfirmationEmail(groupId, appId, email, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * EmailApi - object-oriented interface
 * @export
 * @class EmailApi
 * @extends {BaseAPI}
 */
export class EmailApi extends BaseAPI {
    /**
     * Confirm a pending [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Confirm a pending user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} email Email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    adminConfirmPendingUser(groupId, appId, email, options) {
        return EmailApiFp(this.configuration).adminConfirmPendingUser(groupId, appId, email, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Reruns a pending user\'s [confirmation workflow](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Rerun a user confirmation workflow
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} email Email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    adminRerunPendingUserConfirmation(groupId, appId, email, options) {
        return EmailApiFp(this.configuration).adminRerunPendingUserConfirmation(groupId, appId, email, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Send a [confirmation email](https://www.mongodb.com/docs/realm/authentication/email-password/).
     * @summary Send a confirmation email
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} email Email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    adminSendConfirmationEmail(groupId, appId, email, options) {
        return EmailApiFp(this.configuration).adminSendConfirmationEmail(groupId, appId, email, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * EndpointsApi - axios parameter creator
 * @export
 */
export const EndpointsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a new [endpoint](https://www.mongodb.com/docs/realm/endpoints/).
         * @summary Create an endpoint
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {Endpoint} endpoint A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints/) for the new endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateEndpoint: (groupId, appId, endpoint, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminCreateEndpoint', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminCreateEndpoint', 'appId', appId);
            // verify required parameter 'endpoint' is not null or undefined
            assertParamExists('adminCreateEndpoint', 'endpoint', endpoint);
            const localVarPath = `/groups/{groupId}/apps/{appId}/endpoints`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(endpoint, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete an endpoint
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} endpointId The unique &#x60;_id&#x60; value of an endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteEndpoint: (groupId, appId, endpointId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminDeleteEndpoint', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminDeleteEndpoint', 'appId', appId);
            // verify required parameter 'endpointId' is not null or undefined
            assertParamExists('adminDeleteEndpoint', 'endpointId', endpointId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/endpoints/{endpointId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"endpointId"}}`, encodeURIComponent(String(endpointId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get all [endpoint](https://www.mongodb.com/docs/realm/endpoints/) configurations.
         * @summary Get all endpoints
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAllEndpoints: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetAllEndpoints', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetAllEndpoints', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/endpoints`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a specific [endpoint](https://www.mongodb.com/docs/realm/endpoints/)\'s configuration.
         * @summary Get an endpoint
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} endpointId The unique &#x60;_id&#x60; value of an endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetEndpoint: (groupId, appId, endpointId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetEndpoint', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetEndpoint', 'appId', appId);
            // verify required parameter 'endpointId' is not null or undefined
            assertParamExists('adminGetEndpoint', 'endpointId', endpointId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/endpoints/{endpointId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"endpointId"}}`, encodeURIComponent(String(endpointId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify an existing [endpoint](https://www.mongodb.com/docs/realm/endpoints/) configuration.
         * @summary Modify an endpoint
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} endpointId The unique &#x60;_id&#x60; value of an endpoint
         * @param {Endpoint} endpoint A valid, updated [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints/) for the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminModifyEndpoint: (groupId, appId, endpointId, endpoint, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminModifyEndpoint', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminModifyEndpoint', 'appId', appId);
            // verify required parameter 'endpointId' is not null or undefined
            assertParamExists('adminModifyEndpoint', 'endpointId', endpointId);
            // verify required parameter 'endpoint' is not null or undefined
            assertParamExists('adminModifyEndpoint', 'endpoint', endpoint);
            const localVarPath = `/groups/{groupId}/apps/{appId}/endpoints/{endpointId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"endpointId"}}`, encodeURIComponent(String(endpointId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(endpoint, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * EndpointsApi - functional programming interface
 * @export
 */
export const EndpointsApiFp = function (configuration) {
    const localVarAxiosParamCreator = EndpointsApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a new [endpoint](https://www.mongodb.com/docs/realm/endpoints/).
         * @summary Create an endpoint
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {Endpoint} endpoint A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints/) for the new endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateEndpoint(groupId, appId, endpoint, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminCreateEndpoint(groupId, appId, endpoint, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Delete an endpoint
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} endpointId The unique &#x60;_id&#x60; value of an endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteEndpoint(groupId, appId, endpointId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminDeleteEndpoint(groupId, appId, endpointId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Get all [endpoint](https://www.mongodb.com/docs/realm/endpoints/) configurations.
         * @summary Get all endpoints
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAllEndpoints(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetAllEndpoints(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Get a specific [endpoint](https://www.mongodb.com/docs/realm/endpoints/)\'s configuration.
         * @summary Get an endpoint
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} endpointId The unique &#x60;_id&#x60; value of an endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetEndpoint(groupId, appId, endpointId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetEndpoint(groupId, appId, endpointId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Modify an existing [endpoint](https://www.mongodb.com/docs/realm/endpoints/) configuration.
         * @summary Modify an endpoint
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} endpointId The unique &#x60;_id&#x60; value of an endpoint
         * @param {Endpoint} endpoint A valid, updated [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints/) for the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminModifyEndpoint(groupId, appId, endpointId, endpoint, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminModifyEndpoint(groupId, appId, endpointId, endpoint, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * EndpointsApi - factory interface
 * @export
 */
export const EndpointsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = EndpointsApiFp(configuration);
    return {
        /**
         * Create a new [endpoint](https://www.mongodb.com/docs/realm/endpoints/).
         * @summary Create an endpoint
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {Endpoint} endpoint A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints/) for the new endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateEndpoint(groupId, appId, endpoint, options) {
            return localVarFp.adminCreateEndpoint(groupId, appId, endpoint, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete an endpoint
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} endpointId The unique &#x60;_id&#x60; value of an endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteEndpoint(groupId, appId, endpointId, options) {
            return localVarFp.adminDeleteEndpoint(groupId, appId, endpointId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all [endpoint](https://www.mongodb.com/docs/realm/endpoints/) configurations.
         * @summary Get all endpoints
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAllEndpoints(groupId, appId, options) {
            return localVarFp.adminGetAllEndpoints(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific [endpoint](https://www.mongodb.com/docs/realm/endpoints/)\'s configuration.
         * @summary Get an endpoint
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} endpointId The unique &#x60;_id&#x60; value of an endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetEndpoint(groupId, appId, endpointId, options) {
            return localVarFp.adminGetEndpoint(groupId, appId, endpointId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify an existing [endpoint](https://www.mongodb.com/docs/realm/endpoints/) configuration.
         * @summary Modify an endpoint
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} endpointId The unique &#x60;_id&#x60; value of an endpoint
         * @param {Endpoint} endpoint A valid, updated [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints/) for the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminModifyEndpoint(groupId, appId, endpointId, endpoint, options) {
            return localVarFp.adminModifyEndpoint(groupId, appId, endpointId, endpoint, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * EndpointsApi - object-oriented interface
 * @export
 * @class EndpointsApi
 * @extends {BaseAPI}
 */
export class EndpointsApi extends BaseAPI {
    /**
     * Create a new [endpoint](https://www.mongodb.com/docs/realm/endpoints/).
     * @summary Create an endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {Endpoint} endpoint A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints/) for the new endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    adminCreateEndpoint(groupId, appId, endpoint, options) {
        return EndpointsApiFp(this.configuration).adminCreateEndpoint(groupId, appId, endpoint, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete an endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} endpointId The unique &#x60;_id&#x60; value of an endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    adminDeleteEndpoint(groupId, appId, endpointId, options) {
        return EndpointsApiFp(this.configuration).adminDeleteEndpoint(groupId, appId, endpointId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all [endpoint](https://www.mongodb.com/docs/realm/endpoints/) configurations.
     * @summary Get all endpoints
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    adminGetAllEndpoints(groupId, appId, options) {
        return EndpointsApiFp(this.configuration).adminGetAllEndpoints(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a specific [endpoint](https://www.mongodb.com/docs/realm/endpoints/)\'s configuration.
     * @summary Get an endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} endpointId The unique &#x60;_id&#x60; value of an endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    adminGetEndpoint(groupId, appId, endpointId, options) {
        return EndpointsApiFp(this.configuration).adminGetEndpoint(groupId, appId, endpointId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify an existing [endpoint](https://www.mongodb.com/docs/realm/endpoints/) configuration.
     * @summary Modify an endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} endpointId The unique &#x60;_id&#x60; value of an endpoint
     * @param {Endpoint} endpoint A valid, updated [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints/) for the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    adminModifyEndpoint(groupId, appId, endpointId, endpoint, options) {
        return EndpointsApiFp(this.configuration).adminModifyEndpoint(groupId, appId, endpointId, endpoint, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * EnvironmentsApi - axios parameter creator
 * @export
 */
export const EnvironmentsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Define a new environment value.
         * @summary Create an Environment Value
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateEnvironmentValue: (groupId, appId, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminCreateEnvironmentValue', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminCreateEnvironmentValue', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/environment_values`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an existing environment value
         * @summary Delete an Environment Value
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} environmentValueId The &#x60;_id&#x60; value of an environment value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteEnvironmentValue: (groupId, appId, environmentValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminDeleteEnvironmentValue', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminDeleteEnvironmentValue', 'appId', appId);
            // verify required parameter 'environmentValueId' is not null or undefined
            assertParamExists('adminDeleteEnvironmentValue', 'environmentValueId', environmentValueId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/environment_values/{environmentValueId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"environmentValueId"}}`, encodeURIComponent(String(environmentValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get details about a specific environment value
         * @summary Get an Environment Value
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} environmentValueId The &#x60;_id&#x60; value of an environment value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetEnvironmentValue: (groupId, appId, environmentValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetEnvironmentValue', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetEnvironmentValue', 'appId', appId);
            // verify required parameter 'environmentValueId' is not null or undefined
            assertParamExists('adminGetEnvironmentValue', 'environmentValueId', environmentValueId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/environment_values/{environmentValueId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"environmentValueId"}}`, encodeURIComponent(String(environmentValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get basic information about all environment values in the App. Results do not include the environment-specific `values`. For details on a specific environment, call [Get an Environment Value](#tag/environments/operation/adminGetEnvironmentValue).
         * @summary List All Environment Values
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListEnvironmentValues: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminListEnvironmentValues', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminListEnvironmentValues', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/environment_values`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify an existing environment value
         * @summary Modify an Environment Value
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} environmentValueId The &#x60;_id&#x60; value of an environment value.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminModifyEnvironmentValue: (groupId, appId, environmentValueId, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminModifyEnvironmentValue', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminModifyEnvironmentValue', 'appId', appId);
            // verify required parameter 'environmentValueId' is not null or undefined
            assertParamExists('adminModifyEnvironmentValue', 'environmentValueId', environmentValueId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/environment_values/{environmentValueId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"environmentValueId"}}`, encodeURIComponent(String(environmentValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Set the App\'s active environment
         * @summary Set the App Environment
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminSetEnvironmentRequest} [adminSetEnvironmentRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSetEnvironment: (groupId, appId, adminSetEnvironmentRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminSetEnvironment', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminSetEnvironment', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/environment`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(adminSetEnvironmentRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * EnvironmentsApi - functional programming interface
 * @export
 */
export const EnvironmentsApiFp = function (configuration) {
    const localVarAxiosParamCreator = EnvironmentsApiAxiosParamCreator(configuration);
    return {
        /**
         * Define a new environment value.
         * @summary Create an Environment Value
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateEnvironmentValue(groupId, appId, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminCreateEnvironmentValue(groupId, appId, body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Delete an existing environment value
         * @summary Delete an Environment Value
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} environmentValueId The &#x60;_id&#x60; value of an environment value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteEnvironmentValue(groupId, appId, environmentValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminDeleteEnvironmentValue(groupId, appId, environmentValueId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Get details about a specific environment value
         * @summary Get an Environment Value
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} environmentValueId The &#x60;_id&#x60; value of an environment value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetEnvironmentValue(groupId, appId, environmentValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetEnvironmentValue(groupId, appId, environmentValueId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Get basic information about all environment values in the App. Results do not include the environment-specific `values`. For details on a specific environment, call [Get an Environment Value](#tag/environments/operation/adminGetEnvironmentValue).
         * @summary List All Environment Values
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListEnvironmentValues(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminListEnvironmentValues(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Modify an existing environment value
         * @summary Modify an Environment Value
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} environmentValueId The &#x60;_id&#x60; value of an environment value.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminModifyEnvironmentValue(groupId, appId, environmentValueId, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminModifyEnvironmentValue(groupId, appId, environmentValueId, body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Set the App\'s active environment
         * @summary Set the App Environment
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminSetEnvironmentRequest} [adminSetEnvironmentRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSetEnvironment(groupId, appId, adminSetEnvironmentRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminSetEnvironment(groupId, appId, adminSetEnvironmentRequest, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * EnvironmentsApi - factory interface
 * @export
 */
export const EnvironmentsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = EnvironmentsApiFp(configuration);
    return {
        /**
         * Define a new environment value.
         * @summary Create an Environment Value
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateEnvironmentValue(groupId, appId, body, options) {
            return localVarFp.adminCreateEnvironmentValue(groupId, appId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an existing environment value
         * @summary Delete an Environment Value
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} environmentValueId The &#x60;_id&#x60; value of an environment value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteEnvironmentValue(groupId, appId, environmentValueId, options) {
            return localVarFp.adminDeleteEnvironmentValue(groupId, appId, environmentValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details about a specific environment value
         * @summary Get an Environment Value
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} environmentValueId The &#x60;_id&#x60; value of an environment value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetEnvironmentValue(groupId, appId, environmentValueId, options) {
            return localVarFp.adminGetEnvironmentValue(groupId, appId, environmentValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get basic information about all environment values in the App. Results do not include the environment-specific `values`. For details on a specific environment, call [Get an Environment Value](#tag/environments/operation/adminGetEnvironmentValue).
         * @summary List All Environment Values
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListEnvironmentValues(groupId, appId, options) {
            return localVarFp.adminListEnvironmentValues(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify an existing environment value
         * @summary Modify an Environment Value
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} environmentValueId The &#x60;_id&#x60; value of an environment value.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminModifyEnvironmentValue(groupId, appId, environmentValueId, body, options) {
            return localVarFp.adminModifyEnvironmentValue(groupId, appId, environmentValueId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the App\'s active environment
         * @summary Set the App Environment
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminSetEnvironmentRequest} [adminSetEnvironmentRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSetEnvironment(groupId, appId, adminSetEnvironmentRequest, options) {
            return localVarFp.adminSetEnvironment(groupId, appId, adminSetEnvironmentRequest, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * EnvironmentsApi - object-oriented interface
 * @export
 * @class EnvironmentsApi
 * @extends {BaseAPI}
 */
export class EnvironmentsApi extends BaseAPI {
    /**
     * Define a new environment value.
     * @summary Create an Environment Value
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    adminCreateEnvironmentValue(groupId, appId, body, options) {
        return EnvironmentsApiFp(this.configuration).adminCreateEnvironmentValue(groupId, appId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an existing environment value
     * @summary Delete an Environment Value
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} environmentValueId The &#x60;_id&#x60; value of an environment value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    adminDeleteEnvironmentValue(groupId, appId, environmentValueId, options) {
        return EnvironmentsApiFp(this.configuration).adminDeleteEnvironmentValue(groupId, appId, environmentValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get details about a specific environment value
     * @summary Get an Environment Value
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} environmentValueId The &#x60;_id&#x60; value of an environment value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    adminGetEnvironmentValue(groupId, appId, environmentValueId, options) {
        return EnvironmentsApiFp(this.configuration).adminGetEnvironmentValue(groupId, appId, environmentValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get basic information about all environment values in the App. Results do not include the environment-specific `values`. For details on a specific environment, call [Get an Environment Value](#tag/environments/operation/adminGetEnvironmentValue).
     * @summary List All Environment Values
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    adminListEnvironmentValues(groupId, appId, options) {
        return EnvironmentsApiFp(this.configuration).adminListEnvironmentValues(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify an existing environment value
     * @summary Modify an Environment Value
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} environmentValueId The &#x60;_id&#x60; value of an environment value.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    adminModifyEnvironmentValue(groupId, appId, environmentValueId, body, options) {
        return EnvironmentsApiFp(this.configuration).adminModifyEnvironmentValue(groupId, appId, environmentValueId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Set the App\'s active environment
     * @summary Set the App Environment
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminSetEnvironmentRequest} [adminSetEnvironmentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    adminSetEnvironment(groupId, appId, adminSetEnvironmentRequest, options) {
        return EnvironmentsApiFp(this.configuration).adminSetEnvironment(groupId, appId, adminSetEnvironmentRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * EventSubscriptionsApi - axios parameter creator
 * @export
 */
export const EventSubscriptionsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Return information about an event subscription.
         * @summary Get an Event Subscription
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} eventSubscriptionId The unique &#x60;_id&#x60; value of an event subscription.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetEventSubscription: (groupId, appId, eventSubscriptionId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetEventSubscription', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetEventSubscription', 'appId', appId);
            // verify required parameter 'eventSubscriptionId' is not null or undefined
            assertParamExists('adminGetEventSubscription', 'eventSubscriptionId', eventSubscriptionId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/event_subscriptions/{eventSubscriptionId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"eventSubscriptionId"}}`, encodeURIComponent(String(eventSubscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Return information about the most recent execution of an event subscription.
         * @summary Get the Latest Event Subscription Execution
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} eventSubscriptionId The unique &#x60;_id&#x60; value of an event subscription.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetLatestEventSubscriptionExecution: (groupId, appId, eventSubscriptionId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetLatestEventSubscriptionExecution', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetLatestEventSubscriptionExecution', 'appId', appId);
            // verify required parameter 'eventSubscriptionId' is not null or undefined
            assertParamExists('adminGetLatestEventSubscriptionExecution', 'eventSubscriptionId', eventSubscriptionId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/event_subscriptions/{eventSubscriptionId}/execution`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"eventSubscriptionId"}}`, encodeURIComponent(String(eventSubscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get all event subscriptions.
         * @summary List Event Subscriptions
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminListEventSubscriptionsTypeEnum} [type] The type of event subscription to return.  - &#x60;DATABASE&#x60;: Return Database Triggers - &#x60;AUTHENTICATION&#x60;: Return Authentication Triggers - &#x60;SCHEDULED&#x60;: Return Scheduled Triggers - &#x60;SYNCTRANSLATOR&#x60;: Return Device Sync translators
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListEventSubscriptions: (groupId, appId, type, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminListEventSubscriptions', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminListEventSubscriptions', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/event_subscriptions`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * EventSubscriptionsApi - functional programming interface
 * @export
 */
export const EventSubscriptionsApiFp = function (configuration) {
    const localVarAxiosParamCreator = EventSubscriptionsApiAxiosParamCreator(configuration);
    return {
        /**
         * Return information about an event subscription.
         * @summary Get an Event Subscription
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} eventSubscriptionId The unique &#x60;_id&#x60; value of an event subscription.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetEventSubscription(groupId, appId, eventSubscriptionId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetEventSubscription(groupId, appId, eventSubscriptionId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Return information about the most recent execution of an event subscription.
         * @summary Get the Latest Event Subscription Execution
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} eventSubscriptionId The unique &#x60;_id&#x60; value of an event subscription.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetLatestEventSubscriptionExecution(groupId, appId, eventSubscriptionId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetLatestEventSubscriptionExecution(groupId, appId, eventSubscriptionId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Get all event subscriptions.
         * @summary List Event Subscriptions
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminListEventSubscriptionsTypeEnum} [type] The type of event subscription to return.  - &#x60;DATABASE&#x60;: Return Database Triggers - &#x60;AUTHENTICATION&#x60;: Return Authentication Triggers - &#x60;SCHEDULED&#x60;: Return Scheduled Triggers - &#x60;SYNCTRANSLATOR&#x60;: Return Device Sync translators
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListEventSubscriptions(groupId, appId, type, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminListEventSubscriptions(groupId, appId, type, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * EventSubscriptionsApi - factory interface
 * @export
 */
export const EventSubscriptionsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = EventSubscriptionsApiFp(configuration);
    return {
        /**
         * Return information about an event subscription.
         * @summary Get an Event Subscription
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} eventSubscriptionId The unique &#x60;_id&#x60; value of an event subscription.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetEventSubscription(groupId, appId, eventSubscriptionId, options) {
            return localVarFp.adminGetEventSubscription(groupId, appId, eventSubscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Return information about the most recent execution of an event subscription.
         * @summary Get the Latest Event Subscription Execution
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} eventSubscriptionId The unique &#x60;_id&#x60; value of an event subscription.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetLatestEventSubscriptionExecution(groupId, appId, eventSubscriptionId, options) {
            return localVarFp.adminGetLatestEventSubscriptionExecution(groupId, appId, eventSubscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all event subscriptions.
         * @summary List Event Subscriptions
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminListEventSubscriptionsTypeEnum} [type] The type of event subscription to return.  - &#x60;DATABASE&#x60;: Return Database Triggers - &#x60;AUTHENTICATION&#x60;: Return Authentication Triggers - &#x60;SCHEDULED&#x60;: Return Scheduled Triggers - &#x60;SYNCTRANSLATOR&#x60;: Return Device Sync translators
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListEventSubscriptions(groupId, appId, type, options) {
            return localVarFp.adminListEventSubscriptions(groupId, appId, type, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * EventSubscriptionsApi - object-oriented interface
 * @export
 * @class EventSubscriptionsApi
 * @extends {BaseAPI}
 */
export class EventSubscriptionsApi extends BaseAPI {
    /**
     * Return information about an event subscription.
     * @summary Get an Event Subscription
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} eventSubscriptionId The unique &#x60;_id&#x60; value of an event subscription.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionsApi
     */
    adminGetEventSubscription(groupId, appId, eventSubscriptionId, options) {
        return EventSubscriptionsApiFp(this.configuration).adminGetEventSubscription(groupId, appId, eventSubscriptionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Return information about the most recent execution of an event subscription.
     * @summary Get the Latest Event Subscription Execution
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} eventSubscriptionId The unique &#x60;_id&#x60; value of an event subscription.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionsApi
     */
    adminGetLatestEventSubscriptionExecution(groupId, appId, eventSubscriptionId, options) {
        return EventSubscriptionsApiFp(this.configuration).adminGetLatestEventSubscriptionExecution(groupId, appId, eventSubscriptionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all event subscriptions.
     * @summary List Event Subscriptions
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminListEventSubscriptionsTypeEnum} [type] The type of event subscription to return.  - &#x60;DATABASE&#x60;: Return Database Triggers - &#x60;AUTHENTICATION&#x60;: Return Authentication Triggers - &#x60;SCHEDULED&#x60;: Return Scheduled Triggers - &#x60;SYNCTRANSLATOR&#x60;: Return Device Sync translators
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionsApi
     */
    adminListEventSubscriptions(groupId, appId, type, options) {
        return EventSubscriptionsApiFp(this.configuration).adminListEventSubscriptions(groupId, appId, type, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * @export
 */
export const AdminListEventSubscriptionsTypeEnum = {
    Database: 'DATABASE',
    Authentication: 'AUTHENTICATION',
    Scheduled: 'SCHEDULED',
    Synctranslator: 'SYNCTRANSLATOR'
};
/**
 * FunctionsApi - axios parameter creator
 * @export
 */
export const FunctionsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a new [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
         * @summary Create a new Function
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {NewFunction} newFunction The function to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateFunction: (groupId, appId, newFunction, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminCreateFunction', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminCreateFunction', 'appId', appId);
            // verify required parameter 'newFunction' is not null or undefined
            assertParamExists('adminCreateFunction', 'newFunction', newFunction);
            const localVarPath = `/groups/{groupId}/apps/{appId}/functions`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(newFunction, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
         * @summary Delete a Function
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} functionId The unique &#x60;_id&#x60; value of a function.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteFunction: (groupId, appId, functionId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminDeleteFunction', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminDeleteFunction', 'appId', appId);
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('adminDeleteFunction', 'functionId', functionId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/functions/{functionId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Execute a [function](https://www.mongodb.com/docs/realm/functions#std-label-functions) for testing.
         * @summary Execute a function
         * @param {any} userId The user as which to execute the function. Either &#x60;user_id&#x60; or &#x60;run_as_system&#x60; is required. You cannot specify both.
         * @param {any} runAsSystem Determine whether or not to run as system user. Either &#x60;run_as_system&#x60; or &#x60;user_id&#x60; is required. You cannot specify both.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminExecuteFunctionRequest} adminExecuteFunctionRequest The function to execute.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminExecuteFunction: (userId, runAsSystem, groupId, appId, adminExecuteFunctionRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // Assert that either userId or runAsSystem is set, but not both
            if ((userId == null && runAsSystem == null) || (userId != null && runAsSystem != null)) {
                throw new Error("Either userId or runAsSystem should be set, but not both.");
            } // verify required parameter 'userId' is not null or undefined
            // assertParamExists('adminExecuteFunction', 'userId', userId)
            // verify required parameter 'runAsSystem' is not null or undefined
            // assertParamExists('adminExecuteFunction', 'runAsSystem', runAsSystem)
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminExecuteFunction', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminExecuteFunction', 'appId', appId);
            // verify required parameter 'adminExecuteFunctionRequest' is not null or undefined
            assertParamExists('adminExecuteFunction', 'adminExecuteFunctionRequest', adminExecuteFunctionRequest);
            const localVarPath = `/groups/{groupId}/apps/{appId}/debug/execute_function`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }
            if (runAsSystem !== undefined) {
                localVarQueryParameter['run_as_system'] = runAsSystem;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(adminExecuteFunctionRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Execute a [function](https://www.mongodb.com/docs/realm/functions#std-label-functions)\'s source code for testing.
         * @summary Execute a function\'s source code for testing
         * @param {any} userId The user as which to execute the function. Either &#x60;user_id&#x60; or &#x60;run_as_system&#x60; is required. You cannot specify both.
         * @param {any} runAsSystem Determine whether or not to run as system user. Either &#x60;run_as_system&#x60; or &#x60;user_id&#x60; is required. You cannot specify both.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminExecuteFunctionSourceRequest} adminExecuteFunctionSourceRequest The source to execute.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminExecuteFunctionSource: (userId, runAsSystem, groupId, appId, adminExecuteFunctionSourceRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('adminExecuteFunctionSource', 'userId', userId);
            // verify required parameter 'runAsSystem' is not null or undefined
            assertParamExists('adminExecuteFunctionSource', 'runAsSystem', runAsSystem);
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminExecuteFunctionSource', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminExecuteFunctionSource', 'appId', appId);
            // verify required parameter 'adminExecuteFunctionSourceRequest' is not null or undefined
            assertParamExists('adminExecuteFunctionSource', 'adminExecuteFunctionSourceRequest', adminExecuteFunctionSourceRequest);
            const localVarPath = `/groups/{groupId}/apps/{appId}/debug/execute_function_source`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }
            if (runAsSystem !== undefined) {
                localVarQueryParameter['run_as_system'] = runAsSystem;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(adminExecuteFunctionSourceRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
         * @summary Retrieve a Function
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} functionId The unique &#x60;_id&#x60; value of a function.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetFunction: (groupId, appId, functionId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetFunction', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetFunction', 'appId', appId);
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('adminGetFunction', 'functionId', functionId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/functions/{functionId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List [Functions](https://www.mongodb.com/docs/realm/functions#std-label-functions).
         * @summary List Functions
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListFunctions: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminListFunctions', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminListFunctions', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/functions`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
         * @summary Update a Function
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} functionId The unique &#x60;_id&#x60; value of a function.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateFunction: (groupId, appId, functionId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminUpdateFunction', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminUpdateFunction', 'appId', appId);
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('adminUpdateFunction', 'functionId', functionId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/functions/{functionId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * FunctionsApi - functional programming interface
 * @export
 */
export const FunctionsApiFp = function (configuration) {
    const localVarAxiosParamCreator = FunctionsApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a new [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
         * @summary Create a new Function
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {NewFunction} newFunction The function to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateFunction(groupId, appId, newFunction, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminCreateFunction(groupId, appId, newFunction, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Delete a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
         * @summary Delete a Function
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} functionId The unique &#x60;_id&#x60; value of a function.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteFunction(groupId, appId, functionId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminDeleteFunction(groupId, appId, functionId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Execute a [function](https://www.mongodb.com/docs/realm/functions#std-label-functions) for testing.
         * @summary Execute a function
         * @param {any} userId The user as which to execute the function. Either &#x60;user_id&#x60; or &#x60;run_as_system&#x60; is required. You cannot specify both.
         * @param {any} runAsSystem Determine whether or not to run as system user. Either &#x60;run_as_system&#x60; or &#x60;user_id&#x60; is required. You cannot specify both.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminExecuteFunctionRequest} adminExecuteFunctionRequest The function to execute.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminExecuteFunction(userId, runAsSystem, groupId, appId, adminExecuteFunctionRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminExecuteFunction(userId, runAsSystem, groupId, appId, adminExecuteFunctionRequest, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Execute a [function](https://www.mongodb.com/docs/realm/functions#std-label-functions)\'s source code for testing.
         * @summary Execute a function\'s source code for testing
         * @param {any} userId The user as which to execute the function. Either &#x60;user_id&#x60; or &#x60;run_as_system&#x60; is required. You cannot specify both.
         * @param {any} runAsSystem Determine whether or not to run as system user. Either &#x60;run_as_system&#x60; or &#x60;user_id&#x60; is required. You cannot specify both.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminExecuteFunctionSourceRequest} adminExecuteFunctionSourceRequest The source to execute.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminExecuteFunctionSource(userId, runAsSystem, groupId, appId, adminExecuteFunctionSourceRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminExecuteFunctionSource(userId, runAsSystem, groupId, appId, adminExecuteFunctionSourceRequest, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Retrieve a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
         * @summary Retrieve a Function
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} functionId The unique &#x60;_id&#x60; value of a function.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetFunction(groupId, appId, functionId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetFunction(groupId, appId, functionId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * List [Functions](https://www.mongodb.com/docs/realm/functions#std-label-functions).
         * @summary List Functions
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListFunctions(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminListFunctions(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Update a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
         * @summary Update a Function
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} functionId The unique &#x60;_id&#x60; value of a function.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateFunction(groupId, appId, functionId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminUpdateFunction(groupId, appId, functionId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * FunctionsApi - factory interface
 * @export
 */
export const FunctionsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = FunctionsApiFp(configuration);
    return {
        /**
         * Create a new [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
         * @summary Create a new Function
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {NewFunction} newFunction The function to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateFunction(groupId, appId, newFunction, options) {
            return localVarFp.adminCreateFunction(groupId, appId, newFunction, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
         * @summary Delete a Function
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} functionId The unique &#x60;_id&#x60; value of a function.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteFunction(groupId, appId, functionId, options) {
            return localVarFp.adminDeleteFunction(groupId, appId, functionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Execute a [function](https://www.mongodb.com/docs/realm/functions#std-label-functions) for testing.
         * @summary Execute a function
         * @param {any} userId The user as which to execute the function. Either &#x60;user_id&#x60; or &#x60;run_as_system&#x60; is required. You cannot specify both.
         * @param {any} runAsSystem Determine whether or not to run as system user. Either &#x60;run_as_system&#x60; or &#x60;user_id&#x60; is required. You cannot specify both.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminExecuteFunctionRequest} adminExecuteFunctionRequest The function to execute.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminExecuteFunction(userId, runAsSystem, groupId, appId, adminExecuteFunctionRequest, options) {
            return localVarFp.adminExecuteFunction(userId, runAsSystem, groupId, appId, adminExecuteFunctionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Execute a [function](https://www.mongodb.com/docs/realm/functions#std-label-functions)\'s source code for testing.
         * @summary Execute a function\'s source code for testing
         * @param {any} userId The user as which to execute the function. Either &#x60;user_id&#x60; or &#x60;run_as_system&#x60; is required. You cannot specify both.
         * @param {any} runAsSystem Determine whether or not to run as system user. Either &#x60;run_as_system&#x60; or &#x60;user_id&#x60; is required. You cannot specify both.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminExecuteFunctionSourceRequest} adminExecuteFunctionSourceRequest The source to execute.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminExecuteFunctionSource(userId, runAsSystem, groupId, appId, adminExecuteFunctionSourceRequest, options) {
            return localVarFp.adminExecuteFunctionSource(userId, runAsSystem, groupId, appId, adminExecuteFunctionSourceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
         * @summary Retrieve a Function
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} functionId The unique &#x60;_id&#x60; value of a function.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetFunction(groupId, appId, functionId, options) {
            return localVarFp.adminGetFunction(groupId, appId, functionId, options).then((request) => request(axios, basePath));
        },
        /**
         * List [Functions](https://www.mongodb.com/docs/realm/functions#std-label-functions).
         * @summary List Functions
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListFunctions(groupId, appId, options) {
            return localVarFp.adminListFunctions(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
         * @summary Update a Function
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} functionId The unique &#x60;_id&#x60; value of a function.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateFunction(groupId, appId, functionId, options) {
            return localVarFp.adminUpdateFunction(groupId, appId, functionId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * FunctionsApi - object-oriented interface
 * @export
 * @class FunctionsApi
 * @extends {BaseAPI}
 */
export class FunctionsApi extends BaseAPI {
    /**
     * Create a new [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary Create a new Function
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {NewFunction} newFunction The function to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApi
     */
    adminCreateFunction(groupId, appId, newFunction, options) {
        return FunctionsApiFp(this.configuration).adminCreateFunction(groupId, appId, newFunction, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary Delete a Function
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} functionId The unique &#x60;_id&#x60; value of a function.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApi
     */
    adminDeleteFunction(groupId, appId, functionId, options) {
        return FunctionsApiFp(this.configuration).adminDeleteFunction(groupId, appId, functionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Execute a [function](https://www.mongodb.com/docs/realm/functions#std-label-functions) for testing.
     * @summary Execute a function
     * @param {any} userId The user as which to execute the function. Either &#x60;user_id&#x60; or &#x60;run_as_system&#x60; is required. You cannot specify both.
     * @param {any} runAsSystem Determine whether or not to run as system user. Either &#x60;run_as_system&#x60; or &#x60;user_id&#x60; is required. You cannot specify both.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminExecuteFunctionRequest} adminExecuteFunctionRequest The function to execute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApi
     */
    adminExecuteFunction(userId, runAsSystem, groupId, appId, adminExecuteFunctionRequest, options) {
        return FunctionsApiFp(this.configuration).adminExecuteFunction(userId, runAsSystem, groupId, appId, adminExecuteFunctionRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Execute a [function](https://www.mongodb.com/docs/realm/functions#std-label-functions)\'s source code for testing.
     * @summary Execute a function\'s source code for testing
     * @param {any} userId The user as which to execute the function. Either &#x60;user_id&#x60; or &#x60;run_as_system&#x60; is required. You cannot specify both.
     * @param {any} runAsSystem Determine whether or not to run as system user. Either &#x60;run_as_system&#x60; or &#x60;user_id&#x60; is required. You cannot specify both.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminExecuteFunctionSourceRequest} adminExecuteFunctionSourceRequest The source to execute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApi
     */
    adminExecuteFunctionSource(userId, runAsSystem, groupId, appId, adminExecuteFunctionSourceRequest, options) {
        return FunctionsApiFp(this.configuration).adminExecuteFunctionSource(userId, runAsSystem, groupId, appId, adminExecuteFunctionSourceRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary Retrieve a Function
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} functionId The unique &#x60;_id&#x60; value of a function.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApi
     */
    adminGetFunction(groupId, appId, functionId, options) {
        return FunctionsApiFp(this.configuration).adminGetFunction(groupId, appId, functionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List [Functions](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary List Functions
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApi
     */
    adminListFunctions(groupId, appId, options) {
        return FunctionsApiFp(this.configuration).adminListFunctions(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
     * @summary Update a Function
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} functionId The unique &#x60;_id&#x60; value of a function.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApi
     */
    adminUpdateFunction(groupId, appId, functionId, options) {
        return FunctionsApiFp(this.configuration).adminUpdateFunction(groupId, appId, functionId, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * GraphqlApi - axios parameter creator
 * @export
 */
export const GraphqlApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a new [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/).
         * @summary Create a custom resolver
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {CustomResolver} customResolver A valid [custom resolver configuration](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-custom-resolver) object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateCustomResolver: (groupId, appId, customResolver, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminCreateCustomResolver', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminCreateCustomResolver', 'appId', appId);
            // verify required parameter 'customResolver' is not null or undefined
            assertParamExists('adminCreateCustomResolver', 'customResolver', customResolver);
            const localVarPath = `/groups/{groupId}/apps/{appId}/graphql/custom_resolvers`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(customResolver, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an existing [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
         * @summary Delete a custom resolver
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} customResolverId The unique &#x60;_id&#x60; value of a custom resolver.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteCustomResolver: (groupId, appId, customResolverId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminDeleteCustomResolver', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminDeleteCustomResolver', 'appId', appId);
            // verify required parameter 'customResolverId' is not null or undefined
            assertParamExists('adminDeleteCustomResolver', 'customResolverId', customResolverId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/graphql/custom_resolvers/{customResolverId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"customResolverId"}}`, encodeURIComponent(String(customResolverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get all [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configurations from your app\'s GraphQL API.
         * @summary Get all custom resolvers
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAllCustomResolvers: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetAllCustomResolvers', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetAllCustomResolvers', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/graphql/custom_resolvers`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a specific [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
         * @summary Get a custom resolver
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} customResolverId The unique &#x60;_id&#x60; value of a custom resolver.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCustomResolver: (groupId, appId, customResolverId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetCustomResolver', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetCustomResolver', 'appId', appId);
            // verify required parameter 'customResolverId' is not null or undefined
            assertParamExists('adminGetCustomResolver', 'customResolverId', customResolverId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/graphql/custom_resolvers/{customResolverId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"customResolverId"}}`, encodeURIComponent(String(customResolverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get your app\'s [GraphQL API](https://www.mongodb.com/docs/atlas/app-services/graphql/) configuration.
         * @summary Get GraphQL API Configuration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetGraphQLConfig: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetGraphQLConfig', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetGraphQLConfig', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/graphql/config`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the current validation level and action for reads and writes.
         * @summary Get validation settings
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetGraphQLValidationSettings: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetGraphQLValidationSettings', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetGraphQLValidationSettings', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/validation_settings/graphql`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify an existing [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
         * @summary Modify a custom resolver
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} customResolverId The unique &#x60;_id&#x60; value of a custom resolver.
         * @param {CustomResolver} customResolver A valid, updated [custom resolver configuration](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-custom-resolver) object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminModifyCustomResolver: (groupId, appId, customResolverId, customResolver, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminModifyCustomResolver', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminModifyCustomResolver', 'appId', appId);
            // verify required parameter 'customResolverId' is not null or undefined
            assertParamExists('adminModifyCustomResolver', 'customResolverId', customResolverId);
            // verify required parameter 'customResolver' is not null or undefined
            assertParamExists('adminModifyCustomResolver', 'customResolver', customResolver);
            const localVarPath = `/groups/{groupId}/apps/{appId}/graphql/custom_resolvers/{customResolverId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"customResolverId"}}`, encodeURIComponent(String(customResolverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(customResolver, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Run a query or mutation as a system user that bypasses authentication and data access rules. You can access metadata about your API, including its schema, with an [introspection](https://graphql.org/learn/introspection/) query.
         * @summary Run a query or mutation
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminRunGraphQLOperationRequest} [adminRunGraphQLOperationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminRunGraphQLOperation: (groupId, appId, adminRunGraphQLOperationRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminRunGraphQLOperation', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminRunGraphQLOperation', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/graphql`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(adminRunGraphQLOperationRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Set the validation level and action for reads and writes.
         * @summary Modify validation settings
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {GraphQLValidationSettings} graphQLValidationSettings The updated validation levels and actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSetGraphQLValidationSettings: (groupId, appId, graphQLValidationSettings, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminSetGraphQLValidationSettings', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminSetGraphQLValidationSettings', 'appId', appId);
            // verify required parameter 'graphQLValidationSettings' is not null or undefined
            assertParamExists('adminSetGraphQLValidationSettings', 'graphQLValidationSettings', graphQLValidationSettings);
            const localVarPath = `/groups/{groupId}/apps/{appId}/validation_settings/graphql`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(graphQLValidationSettings, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update your app\'s [GraphQL API](https://www.mongodb.com/docs/atlas/app-services/graphql/) configuration.
         * @summary Update GraphQL API Configuration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {GraphQLConfig} graphQLConfig A valid [GraphQL API configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-graphql).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateGraphQLConfig: (groupId, appId, graphQLConfig, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminUpdateGraphQLConfig', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminUpdateGraphQLConfig', 'appId', appId);
            // verify required parameter 'graphQLConfig' is not null or undefined
            assertParamExists('adminUpdateGraphQLConfig', 'graphQLConfig', graphQLConfig);
            const localVarPath = `/groups/{groupId}/apps/{appId}/graphql/config`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(graphQLConfig, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * GraphqlApi - functional programming interface
 * @export
 */
export const GraphqlApiFp = function (configuration) {
    const localVarAxiosParamCreator = GraphqlApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a new [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/).
         * @summary Create a custom resolver
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {CustomResolver} customResolver A valid [custom resolver configuration](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-custom-resolver) object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateCustomResolver(groupId, appId, customResolver, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminCreateCustomResolver(groupId, appId, customResolver, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Delete an existing [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
         * @summary Delete a custom resolver
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} customResolverId The unique &#x60;_id&#x60; value of a custom resolver.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteCustomResolver(groupId, appId, customResolverId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminDeleteCustomResolver(groupId, appId, customResolverId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Get all [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configurations from your app\'s GraphQL API.
         * @summary Get all custom resolvers
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAllCustomResolvers(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetAllCustomResolvers(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Get a specific [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
         * @summary Get a custom resolver
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} customResolverId The unique &#x60;_id&#x60; value of a custom resolver.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCustomResolver(groupId, appId, customResolverId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetCustomResolver(groupId, appId, customResolverId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Get your app\'s [GraphQL API](https://www.mongodb.com/docs/atlas/app-services/graphql/) configuration.
         * @summary Get GraphQL API Configuration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetGraphQLConfig(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetGraphQLConfig(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Get the current validation level and action for reads and writes.
         * @summary Get validation settings
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetGraphQLValidationSettings(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetGraphQLValidationSettings(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Modify an existing [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
         * @summary Modify a custom resolver
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} customResolverId The unique &#x60;_id&#x60; value of a custom resolver.
         * @param {CustomResolver} customResolver A valid, updated [custom resolver configuration](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-custom-resolver) object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminModifyCustomResolver(groupId, appId, customResolverId, customResolver, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminModifyCustomResolver(groupId, appId, customResolverId, customResolver, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Run a query or mutation as a system user that bypasses authentication and data access rules. You can access metadata about your API, including its schema, with an [introspection](https://graphql.org/learn/introspection/) query.
         * @summary Run a query or mutation
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminRunGraphQLOperationRequest} [adminRunGraphQLOperationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminRunGraphQLOperation(groupId, appId, adminRunGraphQLOperationRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminRunGraphQLOperation(groupId, appId, adminRunGraphQLOperationRequest, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Set the validation level and action for reads and writes.
         * @summary Modify validation settings
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {GraphQLValidationSettings} graphQLValidationSettings The updated validation levels and actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSetGraphQLValidationSettings(groupId, appId, graphQLValidationSettings, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminSetGraphQLValidationSettings(groupId, appId, graphQLValidationSettings, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Update your app\'s [GraphQL API](https://www.mongodb.com/docs/atlas/app-services/graphql/) configuration.
         * @summary Update GraphQL API Configuration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {GraphQLConfig} graphQLConfig A valid [GraphQL API configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-graphql).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateGraphQLConfig(groupId, appId, graphQLConfig, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminUpdateGraphQLConfig(groupId, appId, graphQLConfig, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * GraphqlApi - factory interface
 * @export
 */
export const GraphqlApiFactory = function (configuration, basePath, axios) {
    const localVarFp = GraphqlApiFp(configuration);
    return {
        /**
         * Create a new [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/).
         * @summary Create a custom resolver
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {CustomResolver} customResolver A valid [custom resolver configuration](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-custom-resolver) object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateCustomResolver(groupId, appId, customResolver, options) {
            return localVarFp.adminCreateCustomResolver(groupId, appId, customResolver, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an existing [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
         * @summary Delete a custom resolver
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} customResolverId The unique &#x60;_id&#x60; value of a custom resolver.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteCustomResolver(groupId, appId, customResolverId, options) {
            return localVarFp.adminDeleteCustomResolver(groupId, appId, customResolverId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configurations from your app\'s GraphQL API.
         * @summary Get all custom resolvers
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAllCustomResolvers(groupId, appId, options) {
            return localVarFp.adminGetAllCustomResolvers(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
         * @summary Get a custom resolver
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} customResolverId The unique &#x60;_id&#x60; value of a custom resolver.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCustomResolver(groupId, appId, customResolverId, options) {
            return localVarFp.adminGetCustomResolver(groupId, appId, customResolverId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get your app\'s [GraphQL API](https://www.mongodb.com/docs/atlas/app-services/graphql/) configuration.
         * @summary Get GraphQL API Configuration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetGraphQLConfig(groupId, appId, options) {
            return localVarFp.adminGetGraphQLConfig(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current validation level and action for reads and writes.
         * @summary Get validation settings
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetGraphQLValidationSettings(groupId, appId, options) {
            return localVarFp.adminGetGraphQLValidationSettings(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify an existing [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
         * @summary Modify a custom resolver
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} customResolverId The unique &#x60;_id&#x60; value of a custom resolver.
         * @param {CustomResolver} customResolver A valid, updated [custom resolver configuration](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-custom-resolver) object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminModifyCustomResolver(groupId, appId, customResolverId, customResolver, options) {
            return localVarFp.adminModifyCustomResolver(groupId, appId, customResolverId, customResolver, options).then((request) => request(axios, basePath));
        },
        /**
         * Run a query or mutation as a system user that bypasses authentication and data access rules. You can access metadata about your API, including its schema, with an [introspection](https://graphql.org/learn/introspection/) query.
         * @summary Run a query or mutation
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminRunGraphQLOperationRequest} [adminRunGraphQLOperationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminRunGraphQLOperation(groupId, appId, adminRunGraphQLOperationRequest, options) {
            return localVarFp.adminRunGraphQLOperation(groupId, appId, adminRunGraphQLOperationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the validation level and action for reads and writes.
         * @summary Modify validation settings
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {GraphQLValidationSettings} graphQLValidationSettings The updated validation levels and actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSetGraphQLValidationSettings(groupId, appId, graphQLValidationSettings, options) {
            return localVarFp.adminSetGraphQLValidationSettings(groupId, appId, graphQLValidationSettings, options).then((request) => request(axios, basePath));
        },
        /**
         * Update your app\'s [GraphQL API](https://www.mongodb.com/docs/atlas/app-services/graphql/) configuration.
         * @summary Update GraphQL API Configuration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {GraphQLConfig} graphQLConfig A valid [GraphQL API configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-graphql).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateGraphQLConfig(groupId, appId, graphQLConfig, options) {
            return localVarFp.adminUpdateGraphQLConfig(groupId, appId, graphQLConfig, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * GraphqlApi - object-oriented interface
 * @export
 * @class GraphqlApi
 * @extends {BaseAPI}
 */
export class GraphqlApi extends BaseAPI {
    /**
     * Create a new [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/).
     * @summary Create a custom resolver
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {CustomResolver} customResolver A valid [custom resolver configuration](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-custom-resolver) object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApi
     */
    adminCreateCustomResolver(groupId, appId, customResolver, options) {
        return GraphqlApiFp(this.configuration).adminCreateCustomResolver(groupId, appId, customResolver, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an existing [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
     * @summary Delete a custom resolver
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} customResolverId The unique &#x60;_id&#x60; value of a custom resolver.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApi
     */
    adminDeleteCustomResolver(groupId, appId, customResolverId, options) {
        return GraphqlApiFp(this.configuration).adminDeleteCustomResolver(groupId, appId, customResolverId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configurations from your app\'s GraphQL API.
     * @summary Get all custom resolvers
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApi
     */
    adminGetAllCustomResolvers(groupId, appId, options) {
        return GraphqlApiFp(this.configuration).adminGetAllCustomResolvers(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a specific [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
     * @summary Get a custom resolver
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} customResolverId The unique &#x60;_id&#x60; value of a custom resolver.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApi
     */
    adminGetCustomResolver(groupId, appId, customResolverId, options) {
        return GraphqlApiFp(this.configuration).adminGetCustomResolver(groupId, appId, customResolverId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get your app\'s [GraphQL API](https://www.mongodb.com/docs/atlas/app-services/graphql/) configuration.
     * @summary Get GraphQL API Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApi
     */
    adminGetGraphQLConfig(groupId, appId, options) {
        return GraphqlApiFp(this.configuration).adminGetGraphQLConfig(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the current validation level and action for reads and writes.
     * @summary Get validation settings
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApi
     */
    adminGetGraphQLValidationSettings(groupId, appId, options) {
        return GraphqlApiFp(this.configuration).adminGetGraphQLValidationSettings(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify an existing [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
     * @summary Modify a custom resolver
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} customResolverId The unique &#x60;_id&#x60; value of a custom resolver.
     * @param {CustomResolver} customResolver A valid, updated [custom resolver configuration](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-custom-resolver) object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApi
     */
    adminModifyCustomResolver(groupId, appId, customResolverId, customResolver, options) {
        return GraphqlApiFp(this.configuration).adminModifyCustomResolver(groupId, appId, customResolverId, customResolver, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Run a query or mutation as a system user that bypasses authentication and data access rules. You can access metadata about your API, including its schema, with an [introspection](https://graphql.org/learn/introspection/) query.
     * @summary Run a query or mutation
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminRunGraphQLOperationRequest} [adminRunGraphQLOperationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApi
     */
    adminRunGraphQLOperation(groupId, appId, adminRunGraphQLOperationRequest, options) {
        return GraphqlApiFp(this.configuration).adminRunGraphQLOperation(groupId, appId, adminRunGraphQLOperationRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Set the validation level and action for reads and writes.
     * @summary Modify validation settings
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {GraphQLValidationSettings} graphQLValidationSettings The updated validation levels and actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApi
     */
    adminSetGraphQLValidationSettings(groupId, appId, graphQLValidationSettings, options) {
        return GraphqlApiFp(this.configuration).adminSetGraphQLValidationSettings(groupId, appId, graphQLValidationSettings, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update your app\'s [GraphQL API](https://www.mongodb.com/docs/atlas/app-services/graphql/) configuration.
     * @summary Update GraphQL API Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {GraphQLConfig} graphQLConfig A valid [GraphQL API configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-graphql).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApi
     */
    adminUpdateGraphQLConfig(groupId, appId, graphQLConfig, options) {
        return GraphqlApiFp(this.configuration).adminUpdateGraphQLConfig(groupId, appId, graphQLConfig, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * HostingApi - axios parameter creator
 * @export
 */
export const HostingApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Enable or disable App Services Hosting for your app. Changes to hosting can take up to 15 minutes to take effect. This endpoint does not notify you when the changes have taken effect, only that the change operation was successfully received by the server.  You can see if the hosting enablement/disablement is complete by calling the [Get Hosting Configuration](#operation/adminGetHostingConfig) endpoint.
         * @summary Enable/Disable Hosting
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminEnableDisableHostingRequest} [adminEnableDisableHostingRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminEnableDisableHosting: (groupId, appId, adminEnableDisableHostingRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminEnableDisableHosting', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminEnableDisableHosting', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/hosting/config`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(adminEnableDisableHostingRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary List all hosted assets
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAllHostedAssets: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetAllHostedAssets', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetAllHostedAssets', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/hosting/assets`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieve metadata for a specific hosted asset
         * @param {any} path The resource path of a hosted asset.
         * @param {any} [prefix] Return only those assets where the resource path begins with the specified prefix.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetHostedAsset: (path, prefix, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'path' is not null or undefined
            assertParamExists('adminGetHostedAsset', 'path', path);
            const localVarPath = `/groups/{groupId}/apps/{appId}/hosting/assets/asset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }
            if (prefix !== undefined) {
                localVarQueryParameter['prefix'] = prefix;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns the current hosting configuration. Hosting is active if the response includes `status: \"setup_ok\"`.
         * @summary Get Hosting Configuration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetHostingConfig: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetHostingConfig', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetHostingConfig', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/hosting/config`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Move or copy a hosted asset to a new resource path.
         * @summary Move or copy a hosted asset
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminMoveCopyHostedAssetRequest} adminMoveCopyHostedAssetRequest The hosted asset file and its metadata. (Must use &#x60;Content-Type: multipart/mixed&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminMoveCopyHostedAsset: (groupId, appId, adminMoveCopyHostedAssetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminMoveCopyHostedAsset', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminMoveCopyHostedAsset', 'appId', appId);
            // verify required parameter 'adminMoveCopyHostedAssetRequest' is not null or undefined
            assertParamExists('adminMoveCopyHostedAsset', 'adminMoveCopyHostedAssetRequest', adminMoveCopyHostedAssetRequest);
            const localVarPath = `/groups/{groupId}/apps/{appId}/hosting/assets`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(adminMoveCopyHostedAssetRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update the metadata attributes of a hosted asset at a specific resource path.
         * @summary Update the metadata attributes of a hosted asset
         * @param {any} path The resource path of a hosted asset.
         * @param {AdminUpdateHostedAssetRequest} adminUpdateHostedAssetRequest The new metadata attributes for the hosted asset. These attributes replace all existing attributes for the file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateHostedAsset: (path, adminUpdateHostedAssetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'path' is not null or undefined
            assertParamExists('adminUpdateHostedAsset', 'path', path);
            // verify required parameter 'adminUpdateHostedAssetRequest' is not null or undefined
            assertParamExists('adminUpdateHostedAsset', 'adminUpdateHostedAssetRequest', adminUpdateHostedAssetRequest);
            const localVarPath = `/groups/{groupId}/apps/{appId}/hosting/assets/asset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(adminUpdateHostedAssetRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Upload or replace a hosted asset at a specific resource path.
         * @summary Upload or replace a hosted asset
         * @param {any} path The resource path of a hosted asset.
         * @param {AdminUploadHostedAssetRequest} adminUploadHostedAssetRequest The hosted asset file and its metadata. (Must use &#x60;Content-Type: multipart/mixed&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUploadHostedAsset: (path, adminUploadHostedAssetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'path' is not null or undefined
            assertParamExists('adminUploadHostedAsset', 'path', path);
            // verify required parameter 'adminUploadHostedAssetRequest' is not null or undefined
            assertParamExists('adminUploadHostedAsset', 'adminUploadHostedAssetRequest', adminUploadHostedAssetRequest);
            const localVarPath = `/groups/{groupId}/apps/{appId}/hosting/assets/asset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(adminUploadHostedAssetRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * HostingApi - functional programming interface
 * @export
 */
export const HostingApiFp = function (configuration) {
    const localVarAxiosParamCreator = HostingApiAxiosParamCreator(configuration);
    return {
        /**
         * Enable or disable App Services Hosting for your app. Changes to hosting can take up to 15 minutes to take effect. This endpoint does not notify you when the changes have taken effect, only that the change operation was successfully received by the server.  You can see if the hosting enablement/disablement is complete by calling the [Get Hosting Configuration](#operation/adminGetHostingConfig) endpoint.
         * @summary Enable/Disable Hosting
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminEnableDisableHostingRequest} [adminEnableDisableHostingRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminEnableDisableHosting(groupId, appId, adminEnableDisableHostingRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminEnableDisableHosting(groupId, appId, adminEnableDisableHostingRequest, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary List all hosted assets
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAllHostedAssets(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetAllHostedAssets(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieve metadata for a specific hosted asset
         * @param {any} path The resource path of a hosted asset.
         * @param {any} [prefix] Return only those assets where the resource path begins with the specified prefix.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetHostedAsset(path, prefix, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetHostedAsset(path, prefix, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns the current hosting configuration. Hosting is active if the response includes `status: \"setup_ok\"`.
         * @summary Get Hosting Configuration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetHostingConfig(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetHostingConfig(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Move or copy a hosted asset to a new resource path.
         * @summary Move or copy a hosted asset
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminMoveCopyHostedAssetRequest} adminMoveCopyHostedAssetRequest The hosted asset file and its metadata. (Must use &#x60;Content-Type: multipart/mixed&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminMoveCopyHostedAsset(groupId, appId, adminMoveCopyHostedAssetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminMoveCopyHostedAsset(groupId, appId, adminMoveCopyHostedAssetRequest, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Update the metadata attributes of a hosted asset at a specific resource path.
         * @summary Update the metadata attributes of a hosted asset
         * @param {any} path The resource path of a hosted asset.
         * @param {AdminUpdateHostedAssetRequest} adminUpdateHostedAssetRequest The new metadata attributes for the hosted asset. These attributes replace all existing attributes for the file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateHostedAsset(path, adminUpdateHostedAssetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminUpdateHostedAsset(path, adminUpdateHostedAssetRequest, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Upload or replace a hosted asset at a specific resource path.
         * @summary Upload or replace a hosted asset
         * @param {any} path The resource path of a hosted asset.
         * @param {AdminUploadHostedAssetRequest} adminUploadHostedAssetRequest The hosted asset file and its metadata. (Must use &#x60;Content-Type: multipart/mixed&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUploadHostedAsset(path, adminUploadHostedAssetRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminUploadHostedAsset(path, adminUploadHostedAssetRequest, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * HostingApi - factory interface
 * @export
 */
export const HostingApiFactory = function (configuration, basePath, axios) {
    const localVarFp = HostingApiFp(configuration);
    return {
        /**
         * Enable or disable App Services Hosting for your app. Changes to hosting can take up to 15 minutes to take effect. This endpoint does not notify you when the changes have taken effect, only that the change operation was successfully received by the server.  You can see if the hosting enablement/disablement is complete by calling the [Get Hosting Configuration](#operation/adminGetHostingConfig) endpoint.
         * @summary Enable/Disable Hosting
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminEnableDisableHostingRequest} [adminEnableDisableHostingRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminEnableDisableHosting(groupId, appId, adminEnableDisableHostingRequest, options) {
            return localVarFp.adminEnableDisableHosting(groupId, appId, adminEnableDisableHostingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List all hosted assets
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAllHostedAssets(groupId, appId, options) {
            return localVarFp.adminGetAllHostedAssets(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieve metadata for a specific hosted asset
         * @param {any} path The resource path of a hosted asset.
         * @param {any} [prefix] Return only those assets where the resource path begins with the specified prefix.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetHostedAsset(path, prefix, options) {
            return localVarFp.adminGetHostedAsset(path, prefix, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the current hosting configuration. Hosting is active if the response includes `status: \"setup_ok\"`.
         * @summary Get Hosting Configuration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetHostingConfig(groupId, appId, options) {
            return localVarFp.adminGetHostingConfig(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Move or copy a hosted asset to a new resource path.
         * @summary Move or copy a hosted asset
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminMoveCopyHostedAssetRequest} adminMoveCopyHostedAssetRequest The hosted asset file and its metadata. (Must use &#x60;Content-Type: multipart/mixed&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminMoveCopyHostedAsset(groupId, appId, adminMoveCopyHostedAssetRequest, options) {
            return localVarFp.adminMoveCopyHostedAsset(groupId, appId, adminMoveCopyHostedAssetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the metadata attributes of a hosted asset at a specific resource path.
         * @summary Update the metadata attributes of a hosted asset
         * @param {any} path The resource path of a hosted asset.
         * @param {AdminUpdateHostedAssetRequest} adminUpdateHostedAssetRequest The new metadata attributes for the hosted asset. These attributes replace all existing attributes for the file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateHostedAsset(path, adminUpdateHostedAssetRequest, options) {
            return localVarFp.adminUpdateHostedAsset(path, adminUpdateHostedAssetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload or replace a hosted asset at a specific resource path.
         * @summary Upload or replace a hosted asset
         * @param {any} path The resource path of a hosted asset.
         * @param {AdminUploadHostedAssetRequest} adminUploadHostedAssetRequest The hosted asset file and its metadata. (Must use &#x60;Content-Type: multipart/mixed&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUploadHostedAsset(path, adminUploadHostedAssetRequest, options) {
            return localVarFp.adminUploadHostedAsset(path, adminUploadHostedAssetRequest, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * HostingApi - object-oriented interface
 * @export
 * @class HostingApi
 * @extends {BaseAPI}
 */
export class HostingApi extends BaseAPI {
    /**
     * Enable or disable App Services Hosting for your app. Changes to hosting can take up to 15 minutes to take effect. This endpoint does not notify you when the changes have taken effect, only that the change operation was successfully received by the server.  You can see if the hosting enablement/disablement is complete by calling the [Get Hosting Configuration](#operation/adminGetHostingConfig) endpoint.
     * @summary Enable/Disable Hosting
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminEnableDisableHostingRequest} [adminEnableDisableHostingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HostingApi
     */
    adminEnableDisableHosting(groupId, appId, adminEnableDisableHostingRequest, options) {
        return HostingApiFp(this.configuration).adminEnableDisableHosting(groupId, appId, adminEnableDisableHostingRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List all hosted assets
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HostingApi
     */
    adminGetAllHostedAssets(groupId, appId, options) {
        return HostingApiFp(this.configuration).adminGetAllHostedAssets(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieve metadata for a specific hosted asset
     * @param {any} path The resource path of a hosted asset.
     * @param {any} [prefix] Return only those assets where the resource path begins with the specified prefix.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HostingApi
     */
    adminGetHostedAsset(path, prefix, options) {
        return HostingApiFp(this.configuration).adminGetHostedAsset(path, prefix, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the current hosting configuration. Hosting is active if the response includes `status: \"setup_ok\"`.
     * @summary Get Hosting Configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HostingApi
     */
    adminGetHostingConfig(groupId, appId, options) {
        return HostingApiFp(this.configuration).adminGetHostingConfig(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Move or copy a hosted asset to a new resource path.
     * @summary Move or copy a hosted asset
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminMoveCopyHostedAssetRequest} adminMoveCopyHostedAssetRequest The hosted asset file and its metadata. (Must use &#x60;Content-Type: multipart/mixed&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HostingApi
     */
    adminMoveCopyHostedAsset(groupId, appId, adminMoveCopyHostedAssetRequest, options) {
        return HostingApiFp(this.configuration).adminMoveCopyHostedAsset(groupId, appId, adminMoveCopyHostedAssetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the metadata attributes of a hosted asset at a specific resource path.
     * @summary Update the metadata attributes of a hosted asset
     * @param {any} path The resource path of a hosted asset.
     * @param {AdminUpdateHostedAssetRequest} adminUpdateHostedAssetRequest The new metadata attributes for the hosted asset. These attributes replace all existing attributes for the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HostingApi
     */
    adminUpdateHostedAsset(path, adminUpdateHostedAssetRequest, options) {
        return HostingApiFp(this.configuration).adminUpdateHostedAsset(path, adminUpdateHostedAssetRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Upload or replace a hosted asset at a specific resource path.
     * @summary Upload or replace a hosted asset
     * @param {any} path The resource path of a hosted asset.
     * @param {AdminUploadHostedAssetRequest} adminUploadHostedAssetRequest The hosted asset file and its metadata. (Must use &#x60;Content-Type: multipart/mixed&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HostingApi
     */
    adminUploadHostedAsset(path, adminUploadHostedAssetRequest, options) {
        return HostingApiFp(this.configuration).adminUploadHostedAsset(path, adminUploadHostedAssetRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * LogForwardersApi - axios parameter creator
 * @export
 */
export const LogForwardersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create a log forwarder.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {LogForwarder} body A log forwarder configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLogForwarder: (groupId, appId, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('createLogForwarder', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('createLogForwarder', 'appId', appId);
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createLogForwarder', 'body', body);
            const localVarPath = `/groups/{groupId}/apps/{appId}/log_forwarders`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete a log forwarder.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} forwarderId The _id ObjectID of a log forwarder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGwarder: (groupId, appId, forwarderId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('deleteGwarder', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('deleteGwarder', 'appId', appId);
            // verify required parameter 'forwarderId' is not null or undefined
            assertParamExists('deleteGwarder', 'forwarderId', forwarderId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/log_forwarders/{forwarderId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"forwarderId"}}`, encodeURIComponent(String(forwarderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Disable a log forwarder.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} forwarderId The _id ObjectID of a log forwarder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableLogForwarder: (groupId, appId, forwarderId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('disableLogForwarder', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('disableLogForwarder', 'appId', appId);
            // verify required parameter 'forwarderId' is not null or undefined
            assertParamExists('disableLogForwarder', 'forwarderId', forwarderId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/log_forwarders/{forwarderId}/disable`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"forwarderId"}}`, encodeURIComponent(String(forwarderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Enable a log forwarder.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} forwarderId The _id ObjectID of a log forwarder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableLogForwarder: (groupId, appId, forwarderId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('enableLogForwarder', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('enableLogForwarder', 'appId', appId);
            // verify required parameter 'forwarderId' is not null or undefined
            assertParamExists('enableLogForwarder', 'forwarderId', forwarderId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/log_forwarders/{forwarderId}/enable`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"forwarderId"}}`, encodeURIComponent(String(forwarderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get a specific log forwarder.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} forwarderId The _id ObjectID of a log forwarder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogForwarder: (groupId, appId, forwarderId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getLogForwarder', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('getLogForwarder', 'appId', appId);
            // verify required parameter 'forwarderId' is not null or undefined
            assertParamExists('getLogForwarder', 'forwarderId', forwarderId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/log_forwarders/{forwarderId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"forwarderId"}}`, encodeURIComponent(String(forwarderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary List log forwarders.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLogForwarders: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('listLogForwarders', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('listLogForwarders', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/log_forwarders`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update a log forwarder.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} forwarderId The _id ObjectID of a log forwarder.
         * @param {LogForwarder} body A log forwarder configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLogForwarder: (groupId, appId, forwarderId, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('updateLogForwarder', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('updateLogForwarder', 'appId', appId);
            // verify required parameter 'forwarderId' is not null or undefined
            assertParamExists('updateLogForwarder', 'forwarderId', forwarderId);
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateLogForwarder', 'body', body);
            const localVarPath = `/groups/{groupId}/apps/{appId}/log_forwarders/{forwarderId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"forwarderId"}}`, encodeURIComponent(String(forwarderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * LogForwardersApi - functional programming interface
 * @export
 */
export const LogForwardersApiFp = function (configuration) {
    const localVarAxiosParamCreator = LogForwardersApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Create a log forwarder.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {LogForwarder} body A log forwarder configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLogForwarder(groupId, appId, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createLogForwarder(groupId, appId, body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Delete a log forwarder.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} forwarderId The _id ObjectID of a log forwarder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGwarder(groupId, appId, forwarderId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteGwarder(groupId, appId, forwarderId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Disable a log forwarder.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} forwarderId The _id ObjectID of a log forwarder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableLogForwarder(groupId, appId, forwarderId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.disableLogForwarder(groupId, appId, forwarderId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Enable a log forwarder.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} forwarderId The _id ObjectID of a log forwarder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableLogForwarder(groupId, appId, forwarderId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.enableLogForwarder(groupId, appId, forwarderId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get a specific log forwarder.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} forwarderId The _id ObjectID of a log forwarder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogForwarder(groupId, appId, forwarderId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getLogForwarder(groupId, appId, forwarderId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary List log forwarders.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLogForwarders(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listLogForwarders(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Update a log forwarder.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} forwarderId The _id ObjectID of a log forwarder.
         * @param {LogForwarder} body A log forwarder configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLogForwarder(groupId, appId, forwarderId, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateLogForwarder(groupId, appId, forwarderId, body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * LogForwardersApi - factory interface
 * @export
 */
export const LogForwardersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = LogForwardersApiFp(configuration);
    return {
        /**
         *
         * @summary Create a log forwarder.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {LogForwarder} body A log forwarder configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLogForwarder(groupId, appId, body, options) {
            return localVarFp.createLogForwarder(groupId, appId, body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a log forwarder.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} forwarderId The _id ObjectID of a log forwarder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGwarder(groupId, appId, forwarderId, options) {
            return localVarFp.deleteGwarder(groupId, appId, forwarderId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Disable a log forwarder.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} forwarderId The _id ObjectID of a log forwarder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableLogForwarder(groupId, appId, forwarderId, options) {
            return localVarFp.disableLogForwarder(groupId, appId, forwarderId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Enable a log forwarder.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} forwarderId The _id ObjectID of a log forwarder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableLogForwarder(groupId, appId, forwarderId, options) {
            return localVarFp.enableLogForwarder(groupId, appId, forwarderId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a specific log forwarder.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} forwarderId The _id ObjectID of a log forwarder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogForwarder(groupId, appId, forwarderId, options) {
            return localVarFp.getLogForwarder(groupId, appId, forwarderId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List log forwarders.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLogForwarders(groupId, appId, options) {
            return localVarFp.listLogForwarders(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a log forwarder.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} forwarderId The _id ObjectID of a log forwarder.
         * @param {LogForwarder} body A log forwarder configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLogForwarder(groupId, appId, forwarderId, body, options) {
            return localVarFp.updateLogForwarder(groupId, appId, forwarderId, body, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * LogForwardersApi - object-oriented interface
 * @export
 * @class LogForwardersApi
 * @extends {BaseAPI}
 */
export class LogForwardersApi extends BaseAPI {
    /**
     *
     * @summary Create a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {LogForwarder} body A log forwarder configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogForwardersApi
     */
    createLogForwarder(groupId, appId, body, options) {
        return LogForwardersApiFp(this.configuration).createLogForwarder(groupId, appId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogForwardersApi
     */
    deleteGwarder(groupId, appId, forwarderId, options) {
        return LogForwardersApiFp(this.configuration).deleteGwarder(groupId, appId, forwarderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Disable a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogForwardersApi
     */
    disableLogForwarder(groupId, appId, forwarderId, options) {
        return LogForwardersApiFp(this.configuration).disableLogForwarder(groupId, appId, forwarderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Enable a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogForwardersApi
     */
    enableLogForwarder(groupId, appId, forwarderId, options) {
        return LogForwardersApiFp(this.configuration).enableLogForwarder(groupId, appId, forwarderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a specific log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogForwardersApi
     */
    getLogForwarder(groupId, appId, forwarderId, options) {
        return LogForwardersApiFp(this.configuration).getLogForwarder(groupId, appId, forwarderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List log forwarders.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogForwardersApi
     */
    listLogForwarders(groupId, appId, options) {
        return LogForwardersApiFp(this.configuration).listLogForwarders(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update a log forwarder.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} forwarderId The _id ObjectID of a log forwarder.
     * @param {LogForwarder} body A log forwarder configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogForwardersApi
     */
    updateLogForwarder(groupId, appId, forwarderId, body, options) {
        return LogForwardersApiFp(this.configuration).updateLogForwarder(groupId, appId, forwarderId, body, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * LogsApi - axios parameter creator
 * @export
 */
export const LogsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Retrieve App Services logs
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} [coId] Return only log messages associated with the given request Correlation ID.
         * @param {any} [errorsOnly] The value of this field does not matter. If included in the request, this endpoint only returns error logs (even if the value is set to &#x60;false&#x60;). If this field is excluded from the request, this endpoint only returns non-error logs.
         * @param {any} [userId] Return only log messages associated with the given &#x60;user_id&#x60;.
         * @param {any} [startDate] The date and time in ISO 8601 at which to begin returning results, exclusive.
         * @param {any} [endDate] The date and time in ISO 8601 at which to cease returning results, inclusive.
         * @param {any} [skip] The offset number of matching log entries to skip before including them in the response.
         * @param {any} [limit] The maximum number of log entries to include in the response. If the query matches more than this many logs, it returns documents in ascending order by date until the limit is reached.
         * @param {AdminGetLogsTypeEnum} [type] The kind of log you would like to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetLogs: (groupId, appId, coId, errorsOnly, userId, startDate, endDate, skip, limit, type, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetLogs', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetLogs', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/logs`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (coId !== undefined) {
                localVarQueryParameter['co_id'] = coId;
            }
            if (errorsOnly !== undefined) {
                localVarQueryParameter['errors_only'] = errorsOnly;
            }
            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }
            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * LogsApi - functional programming interface
 * @export
 */
export const LogsApiFp = function (configuration) {
    const localVarAxiosParamCreator = LogsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Retrieve App Services logs
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} [coId] Return only log messages associated with the given request Correlation ID.
         * @param {any} [errorsOnly] The value of this field does not matter. If included in the request, this endpoint only returns error logs (even if the value is set to &#x60;false&#x60;). If this field is excluded from the request, this endpoint only returns non-error logs.
         * @param {any} [userId] Return only log messages associated with the given &#x60;user_id&#x60;.
         * @param {any} [startDate] The date and time in ISO 8601 at which to begin returning results, exclusive.
         * @param {any} [endDate] The date and time in ISO 8601 at which to cease returning results, inclusive.
         * @param {any} [skip] The offset number of matching log entries to skip before including them in the response.
         * @param {any} [limit] The maximum number of log entries to include in the response. If the query matches more than this many logs, it returns documents in ascending order by date until the limit is reached.
         * @param {AdminGetLogsTypeEnum} [type] The kind of log you would like to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetLogs(groupId, appId, coId, errorsOnly, userId, startDate, endDate, skip, limit, type, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetLogs(groupId, appId, coId, errorsOnly, userId, startDate, endDate, skip, limit, type, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * LogsApi - factory interface
 * @export
 */
export const LogsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = LogsApiFp(configuration);
    return {
        /**
         *
         * @summary Retrieve App Services logs
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} [coId] Return only log messages associated with the given request Correlation ID.
         * @param {any} [errorsOnly] The value of this field does not matter. If included in the request, this endpoint only returns error logs (even if the value is set to &#x60;false&#x60;). If this field is excluded from the request, this endpoint only returns non-error logs.
         * @param {any} [userId] Return only log messages associated with the given &#x60;user_id&#x60;.
         * @param {any} [startDate] The date and time in ISO 8601 at which to begin returning results, exclusive.
         * @param {any} [endDate] The date and time in ISO 8601 at which to cease returning results, inclusive.
         * @param {any} [skip] The offset number of matching log entries to skip before including them in the response.
         * @param {any} [limit] The maximum number of log entries to include in the response. If the query matches more than this many logs, it returns documents in ascending order by date until the limit is reached.
         * @param {AdminGetLogsTypeEnum} [type] The kind of log you would like to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetLogs(groupId, appId, coId, errorsOnly, userId, startDate, endDate, skip, limit, type, options) {
            return localVarFp.adminGetLogs(groupId, appId, coId, errorsOnly, userId, startDate, endDate, skip, limit, type, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * LogsApi - object-oriented interface
 * @export
 * @class LogsApi
 * @extends {BaseAPI}
 */
export class LogsApi extends BaseAPI {
    /**
     *
     * @summary Retrieve App Services logs
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [coId] Return only log messages associated with the given request Correlation ID.
     * @param {any} [errorsOnly] The value of this field does not matter. If included in the request, this endpoint only returns error logs (even if the value is set to &#x60;false&#x60;). If this field is excluded from the request, this endpoint only returns non-error logs.
     * @param {any} [userId] Return only log messages associated with the given &#x60;user_id&#x60;.
     * @param {any} [startDate] The date and time in ISO 8601 at which to begin returning results, exclusive.
     * @param {any} [endDate] The date and time in ISO 8601 at which to cease returning results, inclusive.
     * @param {any} [skip] The offset number of matching log entries to skip before including them in the response.
     * @param {any} [limit] The maximum number of log entries to include in the response. If the query matches more than this many logs, it returns documents in ascending order by date until the limit is reached.
     * @param {AdminGetLogsTypeEnum} [type] The kind of log you would like to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogsApi
     */
    adminGetLogs(groupId, appId, coId, errorsOnly, userId, startDate, endDate, skip, limit, type, options) {
        return LogsApiFp(this.configuration).adminGetLogs(groupId, appId, coId, errorsOnly, userId, startDate, endDate, skip, limit, type, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * @export
 */
export const AdminGetLogsTypeEnum = {
    TriggerFailure: 'TRIGGER_FAILURE',
    DbTrigger: 'DB_TRIGGER',
    AuthTrigger: 'AUTH_TRIGGER',
    ScheduledTrigger: 'SCHEDULED_TRIGGER',
    Function: 'FUNCTION',
    ServiceFunction: 'SERVICE_FUNCTION',
    StreamFunction: 'STREAM_FUNCTION',
    ServiceStreamFunction: 'SERVICE_STREAM_FUNCTION',
    Auth: 'AUTH',
    Webhook: 'WEBHOOK',
    Endpoint: 'ENDPOINT',
    Push: 'PUSH',
    Api: 'API',
    ApiKey: 'API_KEY',
    Graphql: 'GRAPHQL',
    SyncConnectionStart: 'SYNC_CONNECTION_START',
    SyncConnectionEnd: 'SYNC_CONNECTION_END',
    SyncSessionStart: 'SYNC_SESSION_START',
    SyncSessionEnd: 'SYNC_SESSION_END',
    SyncClientWrite: 'SYNC_CLIENT_WRITE',
    SyncError: 'SYNC_ERROR',
    SyncOther: 'SYNC_OTHER',
    SchemaAdditiveChange: 'SCHEMA_ADDITIVE_CHANGE',
    SchemaGeneration: 'SCHEMA_GENERATION',
    SchemaValidation: 'SCHEMA_VALIDATION',
    LogForwarder: 'LOG_FORWARDER'
};
/**
 * MetricsApi - axios parameter creator
 * @export
 */
export const MetricsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Retrieves a variety of metrics, including: Compute Time, Data Transfer, Sync Minutes, Requests Succeeded, Requests Failed. For a complete list of available metrics, see [App Services Metrics Reference](https://mongodb.com/docs/atlas/app-services/reference/metrics).
         * @summary Retrieve App Services metrics
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} start The ISO-8601 date and time of the start of the query period (e.g. \&quot;2022-10-27T14:01:01Z\&quot;).
         * @param {any} end The ISO-8601 date and time of the end of the query period (e.g. \&quot;2022-12-27T14:01:01Z\&quot;).
         * @param {any} granularity Specifies the granularity of the query period as an [ISO-8601 duration value](https://en.wikipedia.org/wiki/ISO_8601#Durations). Examples include \&quot;P31D\&quot; (31 day), \&quot;PT1H\&quot; (1 hour), and \&quot;PT5M\&quot; (5 minutes).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetMetrics: (groupId, appId, start, end, granularity, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetMetrics', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetMetrics', 'appId', appId);
            // verify required parameter 'start' is not null or undefined
            assertParamExists('adminGetMetrics', 'start', start);
            // verify required parameter 'end' is not null or undefined
            assertParamExists('adminGetMetrics', 'end', end);
            // verify required parameter 'granularity' is not null or undefined
            assertParamExists('adminGetMetrics', 'granularity', granularity);
            const localVarPath = `/groups/{groupId}/apps/{appId}/metrics`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }
            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = granularity;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * MetricsApi - functional programming interface
 * @export
 */
export const MetricsApiFp = function (configuration) {
    const localVarAxiosParamCreator = MetricsApiAxiosParamCreator(configuration);
    return {
        /**
         * Retrieves a variety of metrics, including: Compute Time, Data Transfer, Sync Minutes, Requests Succeeded, Requests Failed. For a complete list of available metrics, see [App Services Metrics Reference](https://mongodb.com/docs/atlas/app-services/reference/metrics).
         * @summary Retrieve App Services metrics
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} start The ISO-8601 date and time of the start of the query period (e.g. \&quot;2022-10-27T14:01:01Z\&quot;).
         * @param {any} end The ISO-8601 date and time of the end of the query period (e.g. \&quot;2022-12-27T14:01:01Z\&quot;).
         * @param {any} granularity Specifies the granularity of the query period as an [ISO-8601 duration value](https://en.wikipedia.org/wiki/ISO_8601#Durations). Examples include \&quot;P31D\&quot; (31 day), \&quot;PT1H\&quot; (1 hour), and \&quot;PT5M\&quot; (5 minutes).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetMetrics(groupId, appId, start, end, granularity, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetMetrics(groupId, appId, start, end, granularity, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * MetricsApi - factory interface
 * @export
 */
export const MetricsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = MetricsApiFp(configuration);
    return {
        /**
         * Retrieves a variety of metrics, including: Compute Time, Data Transfer, Sync Minutes, Requests Succeeded, Requests Failed. For a complete list of available metrics, see [App Services Metrics Reference](https://mongodb.com/docs/atlas/app-services/reference/metrics).
         * @summary Retrieve App Services metrics
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} start The ISO-8601 date and time of the start of the query period (e.g. \&quot;2022-10-27T14:01:01Z\&quot;).
         * @param {any} end The ISO-8601 date and time of the end of the query period (e.g. \&quot;2022-12-27T14:01:01Z\&quot;).
         * @param {any} granularity Specifies the granularity of the query period as an [ISO-8601 duration value](https://en.wikipedia.org/wiki/ISO_8601#Durations). Examples include \&quot;P31D\&quot; (31 day), \&quot;PT1H\&quot; (1 hour), and \&quot;PT5M\&quot; (5 minutes).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetMetrics(groupId, appId, start, end, granularity, options) {
            return localVarFp.adminGetMetrics(groupId, appId, start, end, granularity, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * MetricsApi - object-oriented interface
 * @export
 * @class MetricsApi
 * @extends {BaseAPI}
 */
export class MetricsApi extends BaseAPI {
    /**
     * Retrieves a variety of metrics, including: Compute Time, Data Transfer, Sync Minutes, Requests Succeeded, Requests Failed. For a complete list of available metrics, see [App Services Metrics Reference](https://mongodb.com/docs/atlas/app-services/reference/metrics).
     * @summary Retrieve App Services metrics
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} start The ISO-8601 date and time of the start of the query period (e.g. \&quot;2022-10-27T14:01:01Z\&quot;).
     * @param {any} end The ISO-8601 date and time of the end of the query period (e.g. \&quot;2022-12-27T14:01:01Z\&quot;).
     * @param {any} granularity Specifies the granularity of the query period as an [ISO-8601 duration value](https://en.wikipedia.org/wiki/ISO_8601#Durations). Examples include \&quot;P31D\&quot; (31 day), \&quot;PT1H\&quot; (1 hour), and \&quot;PT5M\&quot; (5 minutes).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    adminGetMetrics(groupId, appId, start, end, granularity, options) {
        return MetricsApiFp(this.configuration).adminGetMetrics(groupId, appId, start, end, granularity, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * NotificationsApi - axios parameter creator
 * @export
 */
export const NotificationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
         * @summary Create a push notification
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {NewMessage} newMessage The notification to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateNotification: (groupId, appId, newMessage, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminCreateNotification', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminCreateNotification', 'appId', appId);
            // verify required parameter 'newMessage' is not null or undefined
            assertParamExists('adminCreateNotification', 'newMessage', newMessage);
            const localVarPath = `/groups/{groupId}/apps/{appId}/push/notifications`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(newMessage, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) message.
         * @summary Delete a push notification message
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} messageId Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteMessage: (groupId, appId, messageId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminDeleteMessage', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminDeleteMessage', 'appId', appId);
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('adminDeleteMessage', 'messageId', messageId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/push/notifications/{messageId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) message.
         * @summary Retrieve a push notification message
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} messageId Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetMessage: (groupId, appId, messageId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetMessage', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetMessage', 'appId', appId);
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('adminGetMessage', 'messageId', messageId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/push/notifications/{messageId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List [push notifications](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
         * @summary List push notifications
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {MessageState} [state] Only list notifications with the given state.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListNotifications: (groupId, appId, state, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminListNotifications', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminListNotifications', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/push/notifications`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Send a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
         * @summary Send a push notification
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} messageId Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSendMessage: (groupId, appId, messageId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminSendMessage', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminSendMessage', 'appId', appId);
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('adminSendMessage', 'messageId', messageId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/push/notifications/{messageId}/send`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Set a [push notification\'s](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) type.
         * @summary Set a push notification\'s type
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} messageId Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSetMessageType: (groupId, appId, messageId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminSetMessageType', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminSetMessageType', 'appId', appId);
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('adminSetMessageType', 'messageId', messageId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/push/notifications/{messageId}/type`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) message.
         * @summary Update a push notification
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} messageId Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateMessage: (groupId, appId, messageId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminUpdateMessage', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminUpdateMessage', 'appId', appId);
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('adminUpdateMessage', 'messageId', messageId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/push/notifications/{messageId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * NotificationsApi - functional programming interface
 * @export
 */
export const NotificationsApiFp = function (configuration) {
    const localVarAxiosParamCreator = NotificationsApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
         * @summary Create a push notification
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {NewMessage} newMessage The notification to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateNotification(groupId, appId, newMessage, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminCreateNotification(groupId, appId, newMessage, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Delete a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) message.
         * @summary Delete a push notification message
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} messageId Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteMessage(groupId, appId, messageId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminDeleteMessage(groupId, appId, messageId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Retrieve a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) message.
         * @summary Retrieve a push notification message
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} messageId Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetMessage(groupId, appId, messageId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetMessage(groupId, appId, messageId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * List [push notifications](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
         * @summary List push notifications
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {MessageState} [state] Only list notifications with the given state.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListNotifications(groupId, appId, state, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminListNotifications(groupId, appId, state, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Send a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
         * @summary Send a push notification
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} messageId Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSendMessage(groupId, appId, messageId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminSendMessage(groupId, appId, messageId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Set a [push notification\'s](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) type.
         * @summary Set a push notification\'s type
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} messageId Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSetMessageType(groupId, appId, messageId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminSetMessageType(groupId, appId, messageId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Update a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) message.
         * @summary Update a push notification
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} messageId Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateMessage(groupId, appId, messageId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminUpdateMessage(groupId, appId, messageId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * NotificationsApi - factory interface
 * @export
 */
export const NotificationsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = NotificationsApiFp(configuration);
    return {
        /**
         * Create a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
         * @summary Create a push notification
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {NewMessage} newMessage The notification to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateNotification(groupId, appId, newMessage, options) {
            return localVarFp.adminCreateNotification(groupId, appId, newMessage, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) message.
         * @summary Delete a push notification message
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} messageId Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteMessage(groupId, appId, messageId, options) {
            return localVarFp.adminDeleteMessage(groupId, appId, messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) message.
         * @summary Retrieve a push notification message
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} messageId Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetMessage(groupId, appId, messageId, options) {
            return localVarFp.adminGetMessage(groupId, appId, messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * List [push notifications](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
         * @summary List push notifications
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {MessageState} [state] Only list notifications with the given state.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListNotifications(groupId, appId, state, options) {
            return localVarFp.adminListNotifications(groupId, appId, state, options).then((request) => request(axios, basePath));
        },
        /**
         * Send a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
         * @summary Send a push notification
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} messageId Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSendMessage(groupId, appId, messageId, options) {
            return localVarFp.adminSendMessage(groupId, appId, messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Set a [push notification\'s](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) type.
         * @summary Set a push notification\'s type
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} messageId Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSetMessageType(groupId, appId, messageId, options) {
            return localVarFp.adminSetMessageType(groupId, appId, messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) message.
         * @summary Update a push notification
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} messageId Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateMessage(groupId, appId, messageId, options) {
            return localVarFp.adminUpdateMessage(groupId, appId, messageId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
export class NotificationsApi extends BaseAPI {
    /**
     * Create a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
     * @summary Create a push notification
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {NewMessage} newMessage The notification to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    adminCreateNotification(groupId, appId, newMessage, options) {
        return NotificationsApiFp(this.configuration).adminCreateNotification(groupId, appId, newMessage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) message.
     * @summary Delete a push notification message
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    adminDeleteMessage(groupId, appId, messageId, options) {
        return NotificationsApiFp(this.configuration).adminDeleteMessage(groupId, appId, messageId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) message.
     * @summary Retrieve a push notification message
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    adminGetMessage(groupId, appId, messageId, options) {
        return NotificationsApiFp(this.configuration).adminGetMessage(groupId, appId, messageId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List [push notifications](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
     * @summary List push notifications
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {MessageState} [state] Only list notifications with the given state.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    adminListNotifications(groupId, appId, state, options) {
        return NotificationsApiFp(this.configuration).adminListNotifications(groupId, appId, state, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Send a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
     * @summary Send a push notification
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    adminSendMessage(groupId, appId, messageId, options) {
        return NotificationsApiFp(this.configuration).adminSendMessage(groupId, appId, messageId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Set a [push notification\'s](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) type.
     * @summary Set a push notification\'s type
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    adminSetMessageType(groupId, appId, messageId, options) {
        return NotificationsApiFp(this.configuration).adminSetMessageType(groupId, appId, messageId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a [push notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications) message.
     * @summary Update a push notification
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    adminUpdateMessage(groupId, appId, messageId, options) {
        return NotificationsApiFp(this.configuration).adminUpdateMessage(groupId, appId, messageId, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * RulesApi - axios parameter creator
 * @export
 */
export const RulesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) for a data source.
         * @summary Create default roles and filters
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {DefaultRule} defaultRule A default rule configuration object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateDefaultRule: (groupId, appId, serviceId, defaultRule, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminCreateDefaultRule', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminCreateDefaultRule', 'appId', appId);
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('adminCreateDefaultRule', 'serviceId', serviceId);
            // verify required parameter 'defaultRule' is not null or undefined
            assertParamExists('adminCreateDefaultRule', 'defaultRule', defaultRule);
            const localVarPath = `/groups/{groupId}/apps/{appId}/services/{serviceId}/default_rule`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(defaultRule, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
         * @summary Create a rule
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} body The rule to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateRule: (groupId, appId, serviceId, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminCreateRule', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminCreateRule', 'appId', appId);
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('adminCreateRule', 'serviceId', serviceId);
            // verify required parameter 'body' is not null or undefined
            assertParamExists('adminCreateRule', 'body', body);
            const localVarPath = `/groups/{groupId}/apps/{appId}/services/{serviceId}/rules`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete the [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) of a data source.
         * @summary Delete default roles and filters
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteDefaultRule: (groupId, appId, serviceId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminDeleteDefaultRule', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminDeleteDefaultRule', 'appId', appId);
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('adminDeleteDefaultRule', 'serviceId', serviceId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/services/{serviceId}/default_rule`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
         * @summary Delete a rule
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} ruleId The unique &#x60;_id&#x60; value of a rule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteRule: (groupId, appId, serviceId, ruleId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminDeleteRule', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminDeleteRule', 'appId', appId);
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('adminDeleteRule', 'serviceId', serviceId);
            // verify required parameter 'ruleId' is not null or undefined
            assertParamExists('adminDeleteRule', 'ruleId', ruleId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/services/{serviceId}/rules/{ruleId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)))
                .replace(`{${"ruleId"}}`, encodeURIComponent(String(ruleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the current [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules).
         * @summary Get default roles and filters
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetDefaultRule: (groupId, appId, serviceId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetDefaultRule', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetDefaultRule', 'appId', appId);
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('adminGetDefaultRule', 'serviceId', serviceId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/services/{serviceId}/default_rule`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a specific [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
         * @summary Get a rule
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} ruleId The unique &#x60;_id&#x60; value of a rule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetRule: (groupId, appId, serviceId, ruleId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetRule', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetRule', 'appId', appId);
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('adminGetRule', 'serviceId', serviceId);
            // verify required parameter 'ruleId' is not null or undefined
            assertParamExists('adminGetRule', 'ruleId', ruleId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/services/{serviceId}/rules/{ruleId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)))
                .replace(`{${"ruleId"}}`, encodeURIComponent(String(ruleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List all [data access rules](https://www.mongodb.com/docs/atlas/app-services/rules).
         * @summary Get all rules
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListRules: (groupId, appId, serviceId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminListRules', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminListRules', 'appId', appId);
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('adminListRules', 'serviceId', serviceId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/services/{serviceId}/rules`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify the [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) of a data source.
         * @summary Update default roles and filters
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} body The updated default rule configuration object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateDefaultRule: (groupId, appId, serviceId, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminUpdateDefaultRule', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminUpdateDefaultRule', 'appId', appId);
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('adminUpdateDefaultRule', 'serviceId', serviceId);
            // verify required parameter 'body' is not null or undefined
            assertParamExists('adminUpdateDefaultRule', 'body', body);
            const localVarPath = `/groups/{groupId}/apps/{appId}/services/{serviceId}/default_rule`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
         * @summary Update a rule
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} ruleId The unique &#x60;_id&#x60; value of a rule.
         * @param {any} body The new state of the rule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateRule: (groupId, appId, serviceId, ruleId, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminUpdateRule', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminUpdateRule', 'appId', appId);
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('adminUpdateRule', 'serviceId', serviceId);
            // verify required parameter 'ruleId' is not null or undefined
            assertParamExists('adminUpdateRule', 'ruleId', ruleId);
            // verify required parameter 'body' is not null or undefined
            assertParamExists('adminUpdateRule', 'body', body);
            const localVarPath = `/groups/{groupId}/apps/{appId}/services/{serviceId}/rules/{ruleId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)))
                .replace(`{${"ruleId"}}`, encodeURIComponent(String(ruleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * RulesApi - functional programming interface
 * @export
 */
export const RulesApiFp = function (configuration) {
    const localVarAxiosParamCreator = RulesApiAxiosParamCreator(configuration);
    return {
        /**
         * Create [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) for a data source.
         * @summary Create default roles and filters
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {DefaultRule} defaultRule A default rule configuration object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateDefaultRule(groupId, appId, serviceId, defaultRule, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminCreateDefaultRule(groupId, appId, serviceId, defaultRule, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Create a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
         * @summary Create a rule
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} body The rule to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateRule(groupId, appId, serviceId, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminCreateRule(groupId, appId, serviceId, body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Delete the [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) of a data source.
         * @summary Delete default roles and filters
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteDefaultRule(groupId, appId, serviceId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminDeleteDefaultRule(groupId, appId, serviceId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Delete a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
         * @summary Delete a rule
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} ruleId The unique &#x60;_id&#x60; value of a rule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteRule(groupId, appId, serviceId, ruleId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminDeleteRule(groupId, appId, serviceId, ruleId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Get the current [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules).
         * @summary Get default roles and filters
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetDefaultRule(groupId, appId, serviceId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetDefaultRule(groupId, appId, serviceId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Get a specific [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
         * @summary Get a rule
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} ruleId The unique &#x60;_id&#x60; value of a rule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetRule(groupId, appId, serviceId, ruleId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetRule(groupId, appId, serviceId, ruleId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * List all [data access rules](https://www.mongodb.com/docs/atlas/app-services/rules).
         * @summary Get all rules
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListRules(groupId, appId, serviceId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminListRules(groupId, appId, serviceId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Modify the [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) of a data source.
         * @summary Update default roles and filters
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} body The updated default rule configuration object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateDefaultRule(groupId, appId, serviceId, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminUpdateDefaultRule(groupId, appId, serviceId, body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Update a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
         * @summary Update a rule
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} ruleId The unique &#x60;_id&#x60; value of a rule.
         * @param {any} body The new state of the rule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateRule(groupId, appId, serviceId, ruleId, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminUpdateRule(groupId, appId, serviceId, ruleId, body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * RulesApi - factory interface
 * @export
 */
export const RulesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = RulesApiFp(configuration);
    return {
        /**
         * Create [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) for a data source.
         * @summary Create default roles and filters
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {DefaultRule} defaultRule A default rule configuration object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateDefaultRule(groupId, appId, serviceId, defaultRule, options) {
            return localVarFp.adminCreateDefaultRule(groupId, appId, serviceId, defaultRule, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
         * @summary Create a rule
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} body The rule to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateRule(groupId, appId, serviceId, body, options) {
            return localVarFp.adminCreateRule(groupId, appId, serviceId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) of a data source.
         * @summary Delete default roles and filters
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteDefaultRule(groupId, appId, serviceId, options) {
            return localVarFp.adminDeleteDefaultRule(groupId, appId, serviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
         * @summary Delete a rule
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} ruleId The unique &#x60;_id&#x60; value of a rule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteRule(groupId, appId, serviceId, ruleId, options) {
            return localVarFp.adminDeleteRule(groupId, appId, serviceId, ruleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules).
         * @summary Get default roles and filters
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetDefaultRule(groupId, appId, serviceId, options) {
            return localVarFp.adminGetDefaultRule(groupId, appId, serviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
         * @summary Get a rule
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} ruleId The unique &#x60;_id&#x60; value of a rule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetRule(groupId, appId, serviceId, ruleId, options) {
            return localVarFp.adminGetRule(groupId, appId, serviceId, ruleId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all [data access rules](https://www.mongodb.com/docs/atlas/app-services/rules).
         * @summary Get all rules
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListRules(groupId, appId, serviceId, options) {
            return localVarFp.adminListRules(groupId, appId, serviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify the [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) of a data source.
         * @summary Update default roles and filters
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} body The updated default rule configuration object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateDefaultRule(groupId, appId, serviceId, body, options) {
            return localVarFp.adminUpdateDefaultRule(groupId, appId, serviceId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
         * @summary Update a rule
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} ruleId The unique &#x60;_id&#x60; value of a rule.
         * @param {any} body The new state of the rule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateRule(groupId, appId, serviceId, ruleId, body, options) {
            return localVarFp.adminUpdateRule(groupId, appId, serviceId, ruleId, body, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * RulesApi - object-oriented interface
 * @export
 * @class RulesApi
 * @extends {BaseAPI}
 */
export class RulesApi extends BaseAPI {
    /**
     * Create [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) for a data source.
     * @summary Create default roles and filters
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {DefaultRule} defaultRule A default rule configuration object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApi
     */
    adminCreateDefaultRule(groupId, appId, serviceId, defaultRule, options) {
        return RulesApiFp(this.configuration).adminCreateDefaultRule(groupId, appId, serviceId, defaultRule, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Create a rule
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} body The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApi
     */
    adminCreateRule(groupId, appId, serviceId, body, options) {
        return RulesApiFp(this.configuration).adminCreateRule(groupId, appId, serviceId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete the [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) of a data source.
     * @summary Delete default roles and filters
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApi
     */
    adminDeleteDefaultRule(groupId, appId, serviceId, options) {
        return RulesApiFp(this.configuration).adminDeleteDefaultRule(groupId, appId, serviceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Delete a rule
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} ruleId The unique &#x60;_id&#x60; value of a rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApi
     */
    adminDeleteRule(groupId, appId, serviceId, ruleId, options) {
        return RulesApiFp(this.configuration).adminDeleteRule(groupId, appId, serviceId, ruleId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the current [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules).
     * @summary Get default roles and filters
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApi
     */
    adminGetDefaultRule(groupId, appId, serviceId, options) {
        return RulesApiFp(this.configuration).adminGetDefaultRule(groupId, appId, serviceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a specific [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Get a rule
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} ruleId The unique &#x60;_id&#x60; value of a rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApi
     */
    adminGetRule(groupId, appId, serviceId, ruleId, options) {
        return RulesApiFp(this.configuration).adminGetRule(groupId, appId, serviceId, ruleId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all [data access rules](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Get all rules
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApi
     */
    adminListRules(groupId, appId, serviceId, options) {
        return RulesApiFp(this.configuration).adminListRules(groupId, appId, serviceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify the [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) of a data source.
     * @summary Update default roles and filters
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} body The updated default rule configuration object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApi
     */
    adminUpdateDefaultRule(groupId, appId, serviceId, body, options) {
        return RulesApiFp(this.configuration).adminUpdateDefaultRule(groupId, appId, serviceId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
     * @summary Update a rule
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} ruleId The unique &#x60;_id&#x60; value of a rule.
     * @param {any} body The new state of the rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApi
     */
    adminUpdateRule(groupId, appId, serviceId, ruleId, body, options) {
        return RulesApiFp(this.configuration).adminUpdateRule(groupId, appId, serviceId, ruleId, body, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * SchemasApi - axios parameter creator
 * @export
 */
export const SchemasApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Define a new [schema](https://www.mongodb.com/docs/realm/schemas) for a linked collection.
         * @summary Create a schema
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminCreateSchemaRequest} adminCreateSchemaRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateSchema: (groupId, appId, adminCreateSchemaRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminCreateSchema', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminCreateSchema', 'appId', appId);
            // verify required parameter 'adminCreateSchemaRequest' is not null or undefined
            assertParamExists('adminCreateSchema', 'adminCreateSchemaRequest', adminCreateSchemaRequest);
            const localVarPath = `/groups/{groupId}/apps/{appId}/schemas`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(adminCreateSchemaRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a specific [schema](https://www.mongodb.com/docs/realm/schemas) by its `_id` value.
         * @summary Delete a schema
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} schemaId The unique &#x60;_id&#x60; value of a schema.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteSchema: (groupId, appId, schemaId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminDeleteSchema', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminDeleteSchema', 'appId', appId);
            // verify required parameter 'schemaId' is not null or undefined
            assertParamExists('adminDeleteSchema', 'schemaId', schemaId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/schemas/{schemaId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"schemaId"}}`, encodeURIComponent(String(schemaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Check if [null type schema validation](https://www.mongodb.com/docs/atlas/app-services/schemas/enforce-a-schema/#validate-null-types) is enabled.
         * @summary Get Null Type Schema Validation Setting
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetNullTypeSchemaValidationSetting: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetNullTypeSchemaValidationSetting', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetNullTypeSchemaValidationSetting', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/validation_settings/null_type_schema_validation`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a specific [schema](https://www.mongodb.com/docs/realm/schemas) by its `_id` value.
         * @summary Get a schema
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} schemaId The unique &#x60;_id&#x60; value of a schema.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetSchema: (groupId, appId, schemaId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetSchema', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetSchema', 'appId', appId);
            // verify required parameter 'schemaId' is not null or undefined
            assertParamExists('adminGetSchema', 'schemaId', schemaId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/schemas/{schemaId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"schemaId"}}`, encodeURIComponent(String(schemaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List all defined [schemas](https://www.mongodb.com/docs/realm/schemas).
         * @summary List schemas
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListSchemas: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminListSchemas', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminListSchemas', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/schemas`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Enable or disable [null type schema validation](https://www.mongodb.com/docs/atlas/app-services/schemas/enforce-a-schema/#validate-null-types).
         * @summary Set Null Type Schema Validation Setting
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {NullTypeSchemaValidationSetting} nullTypeSchemaValidationSetting
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSetNullTypeSchemaValidationSetting: (groupId, appId, nullTypeSchemaValidationSetting, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminSetNullTypeSchemaValidationSetting', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminSetNullTypeSchemaValidationSetting', 'appId', appId);
            // verify required parameter 'nullTypeSchemaValidationSetting' is not null or undefined
            assertParamExists('adminSetNullTypeSchemaValidationSetting', 'nullTypeSchemaValidationSetting', nullTypeSchemaValidationSetting);
            const localVarPath = `/groups/{groupId}/apps/{appId}/validation_settings/null_type_schema_validation`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(nullTypeSchemaValidationSetting, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace an existing [schema](https://www.mongodb.com/docs/realm/schemas) with a new one.
         * @summary Update a schema
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} schemaId The unique &#x60;_id&#x60; value of a schema.
         * @param {AdminUpdateSchemaRequest} adminUpdateSchemaRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateSchema: (groupId, appId, schemaId, adminUpdateSchemaRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminUpdateSchema', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminUpdateSchema', 'appId', appId);
            // verify required parameter 'schemaId' is not null or undefined
            assertParamExists('adminUpdateSchema', 'schemaId', schemaId);
            // verify required parameter 'adminUpdateSchemaRequest' is not null or undefined
            assertParamExists('adminUpdateSchema', 'adminUpdateSchemaRequest', adminUpdateSchemaRequest);
            const localVarPath = `/groups/{groupId}/apps/{appId}/schemas/{schemaId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"schemaId"}}`, encodeURIComponent(String(schemaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(adminUpdateSchemaRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Query a subset of documents in a collection and validate each match against a schema.
         * @summary Sample & Validate Documents
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} datasourceId The unique &#x60;_id&#x60; value of a MongoDB data source.
         * @param {AdminValidateDocumentsRequest} adminValidateDocumentsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminValidateDocuments: (groupId, appId, datasourceId, adminValidateDocumentsRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminValidateDocuments', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminValidateDocuments', 'appId', appId);
            // verify required parameter 'datasourceId' is not null or undefined
            assertParamExists('adminValidateDocuments', 'datasourceId', datasourceId);
            // verify required parameter 'adminValidateDocumentsRequest' is not null or undefined
            assertParamExists('adminValidateDocuments', 'adminValidateDocumentsRequest', adminValidateDocumentsRequest);
            const localVarPath = `/groups/{groupId}/apps/{appId}/services/{datasourceId}/commands/validate_documents`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"datasourceId"}}`, encodeURIComponent(String(datasourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(adminValidateDocumentsRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SchemasApi - functional programming interface
 * @export
 */
export const SchemasApiFp = function (configuration) {
    const localVarAxiosParamCreator = SchemasApiAxiosParamCreator(configuration);
    return {
        /**
         * Define a new [schema](https://www.mongodb.com/docs/realm/schemas) for a linked collection.
         * @summary Create a schema
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminCreateSchemaRequest} adminCreateSchemaRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateSchema(groupId, appId, adminCreateSchemaRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminCreateSchema(groupId, appId, adminCreateSchemaRequest, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Delete a specific [schema](https://www.mongodb.com/docs/realm/schemas) by its `_id` value.
         * @summary Delete a schema
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} schemaId The unique &#x60;_id&#x60; value of a schema.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteSchema(groupId, appId, schemaId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminDeleteSchema(groupId, appId, schemaId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Check if [null type schema validation](https://www.mongodb.com/docs/atlas/app-services/schemas/enforce-a-schema/#validate-null-types) is enabled.
         * @summary Get Null Type Schema Validation Setting
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetNullTypeSchemaValidationSetting(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetNullTypeSchemaValidationSetting(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Get a specific [schema](https://www.mongodb.com/docs/realm/schemas) by its `_id` value.
         * @summary Get a schema
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} schemaId The unique &#x60;_id&#x60; value of a schema.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetSchema(groupId, appId, schemaId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetSchema(groupId, appId, schemaId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * List all defined [schemas](https://www.mongodb.com/docs/realm/schemas).
         * @summary List schemas
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListSchemas(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminListSchemas(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Enable or disable [null type schema validation](https://www.mongodb.com/docs/atlas/app-services/schemas/enforce-a-schema/#validate-null-types).
         * @summary Set Null Type Schema Validation Setting
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {NullTypeSchemaValidationSetting} nullTypeSchemaValidationSetting
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSetNullTypeSchemaValidationSetting(groupId, appId, nullTypeSchemaValidationSetting, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminSetNullTypeSchemaValidationSetting(groupId, appId, nullTypeSchemaValidationSetting, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Replace an existing [schema](https://www.mongodb.com/docs/realm/schemas) with a new one.
         * @summary Update a schema
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} schemaId The unique &#x60;_id&#x60; value of a schema.
         * @param {AdminUpdateSchemaRequest} adminUpdateSchemaRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateSchema(groupId, appId, schemaId, adminUpdateSchemaRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminUpdateSchema(groupId, appId, schemaId, adminUpdateSchemaRequest, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Query a subset of documents in a collection and validate each match against a schema.
         * @summary Sample & Validate Documents
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} datasourceId The unique &#x60;_id&#x60; value of a MongoDB data source.
         * @param {AdminValidateDocumentsRequest} adminValidateDocumentsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminValidateDocuments(groupId, appId, datasourceId, adminValidateDocumentsRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminValidateDocuments(groupId, appId, datasourceId, adminValidateDocumentsRequest, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * SchemasApi - factory interface
 * @export
 */
export const SchemasApiFactory = function (configuration, basePath, axios) {
    const localVarFp = SchemasApiFp(configuration);
    return {
        /**
         * Define a new [schema](https://www.mongodb.com/docs/realm/schemas) for a linked collection.
         * @summary Create a schema
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminCreateSchemaRequest} adminCreateSchemaRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateSchema(groupId, appId, adminCreateSchemaRequest, options) {
            return localVarFp.adminCreateSchema(groupId, appId, adminCreateSchemaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific [schema](https://www.mongodb.com/docs/realm/schemas) by its `_id` value.
         * @summary Delete a schema
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} schemaId The unique &#x60;_id&#x60; value of a schema.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteSchema(groupId, appId, schemaId, options) {
            return localVarFp.adminDeleteSchema(groupId, appId, schemaId, options).then((request) => request(axios, basePath));
        },
        /**
         * Check if [null type schema validation](https://www.mongodb.com/docs/atlas/app-services/schemas/enforce-a-schema/#validate-null-types) is enabled.
         * @summary Get Null Type Schema Validation Setting
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetNullTypeSchemaValidationSetting(groupId, appId, options) {
            return localVarFp.adminGetNullTypeSchemaValidationSetting(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific [schema](https://www.mongodb.com/docs/realm/schemas) by its `_id` value.
         * @summary Get a schema
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} schemaId The unique &#x60;_id&#x60; value of a schema.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetSchema(groupId, appId, schemaId, options) {
            return localVarFp.adminGetSchema(groupId, appId, schemaId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all defined [schemas](https://www.mongodb.com/docs/realm/schemas).
         * @summary List schemas
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListSchemas(groupId, appId, options) {
            return localVarFp.adminListSchemas(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable or disable [null type schema validation](https://www.mongodb.com/docs/atlas/app-services/schemas/enforce-a-schema/#validate-null-types).
         * @summary Set Null Type Schema Validation Setting
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {NullTypeSchemaValidationSetting} nullTypeSchemaValidationSetting
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSetNullTypeSchemaValidationSetting(groupId, appId, nullTypeSchemaValidationSetting, options) {
            return localVarFp.adminSetNullTypeSchemaValidationSetting(groupId, appId, nullTypeSchemaValidationSetting, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace an existing [schema](https://www.mongodb.com/docs/realm/schemas) with a new one.
         * @summary Update a schema
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} schemaId The unique &#x60;_id&#x60; value of a schema.
         * @param {AdminUpdateSchemaRequest} adminUpdateSchemaRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateSchema(groupId, appId, schemaId, adminUpdateSchemaRequest, options) {
            return localVarFp.adminUpdateSchema(groupId, appId, schemaId, adminUpdateSchemaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Query a subset of documents in a collection and validate each match against a schema.
         * @summary Sample & Validate Documents
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} datasourceId The unique &#x60;_id&#x60; value of a MongoDB data source.
         * @param {AdminValidateDocumentsRequest} adminValidateDocumentsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminValidateDocuments(groupId, appId, datasourceId, adminValidateDocumentsRequest, options) {
            return localVarFp.adminValidateDocuments(groupId, appId, datasourceId, adminValidateDocumentsRequest, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * SchemasApi - object-oriented interface
 * @export
 * @class SchemasApi
 * @extends {BaseAPI}
 */
export class SchemasApi extends BaseAPI {
    /**
     * Define a new [schema](https://www.mongodb.com/docs/realm/schemas) for a linked collection.
     * @summary Create a schema
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminCreateSchemaRequest} adminCreateSchemaRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    adminCreateSchema(groupId, appId, adminCreateSchemaRequest, options) {
        return SchemasApiFp(this.configuration).adminCreateSchema(groupId, appId, adminCreateSchemaRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a specific [schema](https://www.mongodb.com/docs/realm/schemas) by its `_id` value.
     * @summary Delete a schema
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} schemaId The unique &#x60;_id&#x60; value of a schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    adminDeleteSchema(groupId, appId, schemaId, options) {
        return SchemasApiFp(this.configuration).adminDeleteSchema(groupId, appId, schemaId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Check if [null type schema validation](https://www.mongodb.com/docs/atlas/app-services/schemas/enforce-a-schema/#validate-null-types) is enabled.
     * @summary Get Null Type Schema Validation Setting
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    adminGetNullTypeSchemaValidationSetting(groupId, appId, options) {
        return SchemasApiFp(this.configuration).adminGetNullTypeSchemaValidationSetting(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a specific [schema](https://www.mongodb.com/docs/realm/schemas) by its `_id` value.
     * @summary Get a schema
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} schemaId The unique &#x60;_id&#x60; value of a schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    adminGetSchema(groupId, appId, schemaId, options) {
        return SchemasApiFp(this.configuration).adminGetSchema(groupId, appId, schemaId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all defined [schemas](https://www.mongodb.com/docs/realm/schemas).
     * @summary List schemas
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    adminListSchemas(groupId, appId, options) {
        return SchemasApiFp(this.configuration).adminListSchemas(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Enable or disable [null type schema validation](https://www.mongodb.com/docs/atlas/app-services/schemas/enforce-a-schema/#validate-null-types).
     * @summary Set Null Type Schema Validation Setting
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {NullTypeSchemaValidationSetting} nullTypeSchemaValidationSetting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    adminSetNullTypeSchemaValidationSetting(groupId, appId, nullTypeSchemaValidationSetting, options) {
        return SchemasApiFp(this.configuration).adminSetNullTypeSchemaValidationSetting(groupId, appId, nullTypeSchemaValidationSetting, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace an existing [schema](https://www.mongodb.com/docs/realm/schemas) with a new one.
     * @summary Update a schema
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} schemaId The unique &#x60;_id&#x60; value of a schema.
     * @param {AdminUpdateSchemaRequest} adminUpdateSchemaRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    adminUpdateSchema(groupId, appId, schemaId, adminUpdateSchemaRequest, options) {
        return SchemasApiFp(this.configuration).adminUpdateSchema(groupId, appId, schemaId, adminUpdateSchemaRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Query a subset of documents in a collection and validate each match against a schema.
     * @summary Sample & Validate Documents
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} datasourceId The unique &#x60;_id&#x60; value of a MongoDB data source.
     * @param {AdminValidateDocumentsRequest} adminValidateDocumentsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    adminValidateDocuments(groupId, appId, datasourceId, adminValidateDocumentsRequest, options) {
        return SchemasApiFp(this.configuration).adminValidateDocuments(groupId, appId, datasourceId, adminValidateDocumentsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * SecretsApi - axios parameter creator
 * @export
 */
export const SecretsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a new [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets).
         * @summary Create a new Secret
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminCreateASecretRequest} adminCreateASecretRequest The Secret to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateASecret: (groupId, appId, adminCreateASecretRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminCreateASecret', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminCreateASecret', 'appId', appId);
            // verify required parameter 'adminCreateASecretRequest' is not null or undefined
            assertParamExists('adminCreateASecret', 'adminCreateASecretRequest', adminCreateASecretRequest);
            const localVarPath = `/groups/{groupId}/apps/{appId}/secrets`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(adminCreateASecretRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets) associated with a Atlas App Services App.
         * @summary Delete a Secret
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} secretId The unique &#x60;_id&#x60; value of a secret.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteSecret: (groupId, appId, secretId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminDeleteSecret', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminDeleteSecret', 'appId', appId);
            // verify required parameter 'secretId' is not null or undefined
            assertParamExists('adminDeleteSecret', 'secretId', secretId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/secrets/{secretId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"secretId"}}`, encodeURIComponent(String(secretId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List [secrets](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets#std-label-define-secret) associated with a Atlas App Services App.
         * @summary List secrets
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAllSecrets: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetAllSecrets', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetAllSecrets', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/secrets`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify a [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets) associated with a Atlas App Services App.
         * @summary Modify a Secret
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} secretId The unique &#x60;_id&#x60; value of a secret.
         * @param {AdminModifyASecretRequest} adminModifyASecretRequest The modified value of the Secret.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminModifyASecret: (groupId, appId, secretId, adminModifyASecretRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminModifyASecret', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminModifyASecret', 'appId', appId);
            // verify required parameter 'secretId' is not null or undefined
            assertParamExists('adminModifyASecret', 'secretId', secretId);
            // verify required parameter 'adminModifyASecretRequest' is not null or undefined
            assertParamExists('adminModifyASecret', 'adminModifyASecretRequest', adminModifyASecretRequest);
            const localVarPath = `/groups/{groupId}/apps/{appId}/secrets/{secretId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"secretId"}}`, encodeURIComponent(String(secretId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(adminModifyASecretRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SecretsApi - functional programming interface
 * @export
 */
export const SecretsApiFp = function (configuration) {
    const localVarAxiosParamCreator = SecretsApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a new [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets).
         * @summary Create a new Secret
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminCreateASecretRequest} adminCreateASecretRequest The Secret to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateASecret(groupId, appId, adminCreateASecretRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminCreateASecret(groupId, appId, adminCreateASecretRequest, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Delete a [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets) associated with a Atlas App Services App.
         * @summary Delete a Secret
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} secretId The unique &#x60;_id&#x60; value of a secret.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteSecret(groupId, appId, secretId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminDeleteSecret(groupId, appId, secretId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * List [secrets](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets#std-label-define-secret) associated with a Atlas App Services App.
         * @summary List secrets
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAllSecrets(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetAllSecrets(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Modify a [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets) associated with a Atlas App Services App.
         * @summary Modify a Secret
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} secretId The unique &#x60;_id&#x60; value of a secret.
         * @param {AdminModifyASecretRequest} adminModifyASecretRequest The modified value of the Secret.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminModifyASecret(groupId, appId, secretId, adminModifyASecretRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminModifyASecret(groupId, appId, secretId, adminModifyASecretRequest, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * SecretsApi - factory interface
 * @export
 */
export const SecretsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = SecretsApiFp(configuration);
    return {
        /**
         * Create a new [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets).
         * @summary Create a new Secret
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminCreateASecretRequest} adminCreateASecretRequest The Secret to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateASecret(groupId, appId, adminCreateASecretRequest, options) {
            return localVarFp.adminCreateASecret(groupId, appId, adminCreateASecretRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets) associated with a Atlas App Services App.
         * @summary Delete a Secret
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} secretId The unique &#x60;_id&#x60; value of a secret.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteSecret(groupId, appId, secretId, options) {
            return localVarFp.adminDeleteSecret(groupId, appId, secretId, options).then((request) => request(axios, basePath));
        },
        /**
         * List [secrets](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets#std-label-define-secret) associated with a Atlas App Services App.
         * @summary List secrets
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAllSecrets(groupId, appId, options) {
            return localVarFp.adminGetAllSecrets(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify a [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets) associated with a Atlas App Services App.
         * @summary Modify a Secret
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} secretId The unique &#x60;_id&#x60; value of a secret.
         * @param {AdminModifyASecretRequest} adminModifyASecretRequest The modified value of the Secret.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminModifyASecret(groupId, appId, secretId, adminModifyASecretRequest, options) {
            return localVarFp.adminModifyASecret(groupId, appId, secretId, adminModifyASecretRequest, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * SecretsApi - object-oriented interface
 * @export
 * @class SecretsApi
 * @extends {BaseAPI}
 */
export class SecretsApi extends BaseAPI {
    /**
     * Create a new [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets).
     * @summary Create a new Secret
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminCreateASecretRequest} adminCreateASecretRequest The Secret to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretsApi
     */
    adminCreateASecret(groupId, appId, adminCreateASecretRequest, options) {
        return SecretsApiFp(this.configuration).adminCreateASecret(groupId, appId, adminCreateASecretRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets) associated with a Atlas App Services App.
     * @summary Delete a Secret
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} secretId The unique &#x60;_id&#x60; value of a secret.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretsApi
     */
    adminDeleteSecret(groupId, appId, secretId, options) {
        return SecretsApiFp(this.configuration).adminDeleteSecret(groupId, appId, secretId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List [secrets](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets#std-label-define-secret) associated with a Atlas App Services App.
     * @summary List secrets
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretsApi
     */
    adminGetAllSecrets(groupId, appId, options) {
        return SecretsApiFp(this.configuration).adminGetAllSecrets(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify a [Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets) associated with a Atlas App Services App.
     * @summary Modify a Secret
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} secretId The unique &#x60;_id&#x60; value of a secret.
     * @param {AdminModifyASecretRequest} adminModifyASecretRequest The modified value of the Secret.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretsApi
     */
    adminModifyASecret(groupId, appId, secretId, adminModifyASecretRequest, options) {
        return SecretsApiFp(this.configuration).adminModifyASecret(groupId, appId, secretId, adminModifyASecretRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * SecurityApi - axios parameter creator
 * @export
 */
export const SecurityApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Configure a new private endpoint for the App.
         * @summary Create a VPC Private Endpoint
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {PrivateEndpoint} privateEndpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreatePrivateEndpoint: (groupId, appId, privateEndpoint, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminCreatePrivateEndpoint', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminCreatePrivateEndpoint', 'appId', appId);
            // verify required parameter 'privateEndpoint' is not null or undefined
            assertParamExists('adminCreatePrivateEndpoint', 'privateEndpoint', privateEndpoint);
            const localVarPath = `/groups/{groupId}/apps/{appId}/security/private_endpoints`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(privateEndpoint, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a private endpoint.
         * @summary Delete a VPC Private Endpoint
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} privateEndpointId The _id ObjectID of a VPC private endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeletePrivateEndpoint: (groupId, appId, privateEndpointId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminDeletePrivateEndpoint', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminDeletePrivateEndpoint', 'appId', appId);
            // verify required parameter 'privateEndpointId' is not null or undefined
            assertParamExists('adminDeletePrivateEndpoint', 'privateEndpointId', privateEndpointId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/security/private_endpoints/{privateEndpointId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"privateEndpointId"}}`, encodeURIComponent(String(privateEndpointId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a specific private endpoint configuration.
         * @summary Get a VPC Private Endpoint
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} privateEndpointId The _id ObjectID of a VPC private endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetPrivateEndpoint: (groupId, appId, privateEndpointId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetPrivateEndpoint', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetPrivateEndpoint', 'appId', appId);
            // verify required parameter 'privateEndpointId' is not null or undefined
            assertParamExists('adminGetPrivateEndpoint', 'privateEndpointId', privateEndpointId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/security/private_endpoints/{privateEndpointId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"privateEndpointId"}}`, encodeURIComponent(String(privateEndpointId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a list of all private endpoints configured for the App.
         * @summary List VPC Private Endpoints
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetPrivateEndpoints: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetPrivateEndpoints', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetPrivateEndpoints', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/security/private_endpoints`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the current expiration time in seconds for user session refresh tokens.
         * @summary Get User Refresh Token Expiration Time
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetRefreshTokenExpiration: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetRefreshTokenExpiration', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetRefreshTokenExpiration', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/security/refresh_token_expiration`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List the allowed [HTTP origins](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin) from which App Services should allow requests.
         * @summary List allowed HTTP origins
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListAllowedRequestOrigins: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminListAllowedRequestOrigins', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminListAllowedRequestOrigins', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/security/allowed_request_origins`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a list of all private endpoint services configured for the App.
         * @summary List VPC Private Endpoint Services
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListPrivateEndpointServices: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminListPrivateEndpointServices', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminListPrivateEndpointServices', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/security/private_endpoint_service_infos`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Set the allowed [HTTP origins](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin) from which App Services should allow requests.
         * @summary Set allowed HTTP origins
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} body A list of HTTP origins.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSetAllowedRequestOrigins: (groupId, appId, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminSetAllowedRequestOrigins', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminSetAllowedRequestOrigins', 'appId', appId);
            // verify required parameter 'body' is not null or undefined
            assertParamExists('adminSetAllowedRequestOrigins', 'body', body);
            const localVarPath = `/groups/{groupId}/apps/{appId}/security/allowed_request_origins`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Set the expiration time in seconds for user session refresh tokens.
         * @summary Set User Refresh Token Expiration Time
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {RefreshTokenExpiration} refreshTokenExpiration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSetRefreshTokenExpiration: (groupId, appId, refreshTokenExpiration, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminSetRefreshTokenExpiration', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminSetRefreshTokenExpiration', 'appId', appId);
            // verify required parameter 'refreshTokenExpiration' is not null or undefined
            assertParamExists('adminSetRefreshTokenExpiration', 'refreshTokenExpiration', refreshTokenExpiration);
            const localVarPath = `/groups/{groupId}/apps/{appId}/security/refresh_token_expiration`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(refreshTokenExpiration, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update the configuration of a private endpoint.
         * @summary Modify a VPC Private Endpoint
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} privateEndpointId The _id ObjectID of a VPC private endpoint.
         * @param {PrivateEndpoint} privateEndpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdatePrivateEndpoint: (groupId, appId, privateEndpointId, privateEndpoint, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminUpdatePrivateEndpoint', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminUpdatePrivateEndpoint', 'appId', appId);
            // verify required parameter 'privateEndpointId' is not null or undefined
            assertParamExists('adminUpdatePrivateEndpoint', 'privateEndpointId', privateEndpointId);
            // verify required parameter 'privateEndpoint' is not null or undefined
            assertParamExists('adminUpdatePrivateEndpoint', 'privateEndpoint', privateEndpoint);
            const localVarPath = `/groups/{groupId}/apps/{appId}/security/private_endpoints/{privateEndpointId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"privateEndpointId"}}`, encodeURIComponent(String(privateEndpointId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(privateEndpoint, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create an IP address or CIDR block in the Access List for your App Services app.
         * @summary Create an IP address or CIDR block in the Access List
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AllowedIPAccessListCreateRequest} allowedIPAccessListCreateRequest The IP Access List entry to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowedIPAccessListCreate: (groupId, appId, allowedIPAccessListCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('allowedIPAccessListCreate', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('allowedIPAccessListCreate', 'appId', appId);
            // verify required parameter 'allowedIPAccessListCreateRequest' is not null or undefined
            assertParamExists('allowedIPAccessListCreate', 'allowedIPAccessListCreateRequest', allowedIPAccessListCreateRequest);
            const localVarPath = `/groups/{groupId}/apps/{appId}/security/access_list`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(allowedIPAccessListCreateRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an IP address or CIDR block from the Access List of your App Services app
         * @summary Delete an IP address or CIDR block from the Access List
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} ipId The IP address entry denoted by &#x60;ip_id&#x60; with the information given in the request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowedIPAccessListDelete: (groupId, appId, ipId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('allowedIPAccessListDelete', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('allowedIPAccessListDelete', 'appId', appId);
            // verify required parameter 'ipId' is not null or undefined
            assertParamExists('allowedIPAccessListDelete', 'ipId', ipId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/security/access_list/{ipId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"ipId"}}`, encodeURIComponent(String(ipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List the allowed entries in the Access List of your Atlas App Services App.
         * @summary List the allowed entries in the Access List
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowedIPAccessListGet: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('allowedIPAccessListGet', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('allowedIPAccessListGet', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/security/access_list`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify an IP address or CIDR block in the Access List of your App Services app
         * @summary Modify an IP address or CIDR block in the Access List
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} ipId The IP address entry denoted by &#x60;ip_id&#x60; with the information given in the request body
         * @param {AllowedIPAccessListUpdateRequest} allowedIPAccessListUpdateRequest The updated value of the IP Access List entry.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowedIPAccessListUpdate: (groupId, appId, ipId, allowedIPAccessListUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('allowedIPAccessListUpdate', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('allowedIPAccessListUpdate', 'appId', appId);
            // verify required parameter 'ipId' is not null or undefined
            assertParamExists('allowedIPAccessListUpdate', 'ipId', ipId);
            // verify required parameter 'allowedIPAccessListUpdateRequest' is not null or undefined
            assertParamExists('allowedIPAccessListUpdate', 'allowedIPAccessListUpdateRequest', allowedIPAccessListUpdateRequest);
            const localVarPath = `/groups/{groupId}/apps/{appId}/security/access_list/{ipId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"ipId"}}`, encodeURIComponent(String(ipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(allowedIPAccessListUpdateRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SecurityApi - functional programming interface
 * @export
 */
export const SecurityApiFp = function (configuration) {
    const localVarAxiosParamCreator = SecurityApiAxiosParamCreator(configuration);
    return {
        /**
         * Configure a new private endpoint for the App.
         * @summary Create a VPC Private Endpoint
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {PrivateEndpoint} privateEndpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreatePrivateEndpoint(groupId, appId, privateEndpoint, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminCreatePrivateEndpoint(groupId, appId, privateEndpoint, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Delete a private endpoint.
         * @summary Delete a VPC Private Endpoint
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} privateEndpointId The _id ObjectID of a VPC private endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeletePrivateEndpoint(groupId, appId, privateEndpointId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminDeletePrivateEndpoint(groupId, appId, privateEndpointId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Get a specific private endpoint configuration.
         * @summary Get a VPC Private Endpoint
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} privateEndpointId The _id ObjectID of a VPC private endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetPrivateEndpoint(groupId, appId, privateEndpointId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetPrivateEndpoint(groupId, appId, privateEndpointId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Get a list of all private endpoints configured for the App.
         * @summary List VPC Private Endpoints
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetPrivateEndpoints(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetPrivateEndpoints(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Get the current expiration time in seconds for user session refresh tokens.
         * @summary Get User Refresh Token Expiration Time
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetRefreshTokenExpiration(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetRefreshTokenExpiration(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * List the allowed [HTTP origins](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin) from which App Services should allow requests.
         * @summary List allowed HTTP origins
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListAllowedRequestOrigins(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminListAllowedRequestOrigins(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Get a list of all private endpoint services configured for the App.
         * @summary List VPC Private Endpoint Services
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListPrivateEndpointServices(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminListPrivateEndpointServices(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Set the allowed [HTTP origins](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin) from which App Services should allow requests.
         * @summary Set allowed HTTP origins
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} body A list of HTTP origins.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSetAllowedRequestOrigins(groupId, appId, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminSetAllowedRequestOrigins(groupId, appId, body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Set the expiration time in seconds for user session refresh tokens.
         * @summary Set User Refresh Token Expiration Time
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {RefreshTokenExpiration} refreshTokenExpiration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSetRefreshTokenExpiration(groupId, appId, refreshTokenExpiration, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminSetRefreshTokenExpiration(groupId, appId, refreshTokenExpiration, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Update the configuration of a private endpoint.
         * @summary Modify a VPC Private Endpoint
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} privateEndpointId The _id ObjectID of a VPC private endpoint.
         * @param {PrivateEndpoint} privateEndpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdatePrivateEndpoint(groupId, appId, privateEndpointId, privateEndpoint, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminUpdatePrivateEndpoint(groupId, appId, privateEndpointId, privateEndpoint, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Create an IP address or CIDR block in the Access List for your App Services app.
         * @summary Create an IP address or CIDR block in the Access List
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AllowedIPAccessListCreateRequest} allowedIPAccessListCreateRequest The IP Access List entry to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowedIPAccessListCreate(groupId, appId, allowedIPAccessListCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.allowedIPAccessListCreate(groupId, appId, allowedIPAccessListCreateRequest, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Delete an IP address or CIDR block from the Access List of your App Services app
         * @summary Delete an IP address or CIDR block from the Access List
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} ipId The IP address entry denoted by &#x60;ip_id&#x60; with the information given in the request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowedIPAccessListDelete(groupId, appId, ipId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.allowedIPAccessListDelete(groupId, appId, ipId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * List the allowed entries in the Access List of your Atlas App Services App.
         * @summary List the allowed entries in the Access List
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowedIPAccessListGet(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.allowedIPAccessListGet(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Modify an IP address or CIDR block in the Access List of your App Services app
         * @summary Modify an IP address or CIDR block in the Access List
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} ipId The IP address entry denoted by &#x60;ip_id&#x60; with the information given in the request body
         * @param {AllowedIPAccessListUpdateRequest} allowedIPAccessListUpdateRequest The updated value of the IP Access List entry.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowedIPAccessListUpdate(groupId, appId, ipId, allowedIPAccessListUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.allowedIPAccessListUpdate(groupId, appId, ipId, allowedIPAccessListUpdateRequest, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * SecurityApi - factory interface
 * @export
 */
export const SecurityApiFactory = function (configuration, basePath, axios) {
    const localVarFp = SecurityApiFp(configuration);
    return {
        /**
         * Configure a new private endpoint for the App.
         * @summary Create a VPC Private Endpoint
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {PrivateEndpoint} privateEndpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreatePrivateEndpoint(groupId, appId, privateEndpoint, options) {
            return localVarFp.adminCreatePrivateEndpoint(groupId, appId, privateEndpoint, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a private endpoint.
         * @summary Delete a VPC Private Endpoint
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} privateEndpointId The _id ObjectID of a VPC private endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeletePrivateEndpoint(groupId, appId, privateEndpointId, options) {
            return localVarFp.adminDeletePrivateEndpoint(groupId, appId, privateEndpointId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific private endpoint configuration.
         * @summary Get a VPC Private Endpoint
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} privateEndpointId The _id ObjectID of a VPC private endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetPrivateEndpoint(groupId, appId, privateEndpointId, options) {
            return localVarFp.adminGetPrivateEndpoint(groupId, appId, privateEndpointId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all private endpoints configured for the App.
         * @summary List VPC Private Endpoints
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetPrivateEndpoints(groupId, appId, options) {
            return localVarFp.adminGetPrivateEndpoints(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current expiration time in seconds for user session refresh tokens.
         * @summary Get User Refresh Token Expiration Time
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetRefreshTokenExpiration(groupId, appId, options) {
            return localVarFp.adminGetRefreshTokenExpiration(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * List the allowed [HTTP origins](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin) from which App Services should allow requests.
         * @summary List allowed HTTP origins
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListAllowedRequestOrigins(groupId, appId, options) {
            return localVarFp.adminListAllowedRequestOrigins(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all private endpoint services configured for the App.
         * @summary List VPC Private Endpoint Services
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListPrivateEndpointServices(groupId, appId, options) {
            return localVarFp.adminListPrivateEndpointServices(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the allowed [HTTP origins](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin) from which App Services should allow requests.
         * @summary Set allowed HTTP origins
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} body A list of HTTP origins.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSetAllowedRequestOrigins(groupId, appId, body, options) {
            return localVarFp.adminSetAllowedRequestOrigins(groupId, appId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the expiration time in seconds for user session refresh tokens.
         * @summary Set User Refresh Token Expiration Time
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {RefreshTokenExpiration} refreshTokenExpiration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSetRefreshTokenExpiration(groupId, appId, refreshTokenExpiration, options) {
            return localVarFp.adminSetRefreshTokenExpiration(groupId, appId, refreshTokenExpiration, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the configuration of a private endpoint.
         * @summary Modify a VPC Private Endpoint
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} privateEndpointId The _id ObjectID of a VPC private endpoint.
         * @param {PrivateEndpoint} privateEndpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdatePrivateEndpoint(groupId, appId, privateEndpointId, privateEndpoint, options) {
            return localVarFp.adminUpdatePrivateEndpoint(groupId, appId, privateEndpointId, privateEndpoint, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an IP address or CIDR block in the Access List for your App Services app.
         * @summary Create an IP address or CIDR block in the Access List
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AllowedIPAccessListCreateRequest} allowedIPAccessListCreateRequest The IP Access List entry to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowedIPAccessListCreate(groupId, appId, allowedIPAccessListCreateRequest, options) {
            return localVarFp.allowedIPAccessListCreate(groupId, appId, allowedIPAccessListCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an IP address or CIDR block from the Access List of your App Services app
         * @summary Delete an IP address or CIDR block from the Access List
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} ipId The IP address entry denoted by &#x60;ip_id&#x60; with the information given in the request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowedIPAccessListDelete(groupId, appId, ipId, options) {
            return localVarFp.allowedIPAccessListDelete(groupId, appId, ipId, options).then((request) => request(axios, basePath));
        },
        /**
         * List the allowed entries in the Access List of your Atlas App Services App.
         * @summary List the allowed entries in the Access List
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowedIPAccessListGet(groupId, appId, options) {
            return localVarFp.allowedIPAccessListGet(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify an IP address or CIDR block in the Access List of your App Services app
         * @summary Modify an IP address or CIDR block in the Access List
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} ipId The IP address entry denoted by &#x60;ip_id&#x60; with the information given in the request body
         * @param {AllowedIPAccessListUpdateRequest} allowedIPAccessListUpdateRequest The updated value of the IP Access List entry.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowedIPAccessListUpdate(groupId, appId, ipId, allowedIPAccessListUpdateRequest, options) {
            return localVarFp.allowedIPAccessListUpdate(groupId, appId, ipId, allowedIPAccessListUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * SecurityApi - object-oriented interface
 * @export
 * @class SecurityApi
 * @extends {BaseAPI}
 */
export class SecurityApi extends BaseAPI {
    /**
     * Configure a new private endpoint for the App.
     * @summary Create a VPC Private Endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {PrivateEndpoint} privateEndpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    adminCreatePrivateEndpoint(groupId, appId, privateEndpoint, options) {
        return SecurityApiFp(this.configuration).adminCreatePrivateEndpoint(groupId, appId, privateEndpoint, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a private endpoint.
     * @summary Delete a VPC Private Endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} privateEndpointId The _id ObjectID of a VPC private endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    adminDeletePrivateEndpoint(groupId, appId, privateEndpointId, options) {
        return SecurityApiFp(this.configuration).adminDeletePrivateEndpoint(groupId, appId, privateEndpointId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a specific private endpoint configuration.
     * @summary Get a VPC Private Endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} privateEndpointId The _id ObjectID of a VPC private endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    adminGetPrivateEndpoint(groupId, appId, privateEndpointId, options) {
        return SecurityApiFp(this.configuration).adminGetPrivateEndpoint(groupId, appId, privateEndpointId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of all private endpoints configured for the App.
     * @summary List VPC Private Endpoints
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    adminGetPrivateEndpoints(groupId, appId, options) {
        return SecurityApiFp(this.configuration).adminGetPrivateEndpoints(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the current expiration time in seconds for user session refresh tokens.
     * @summary Get User Refresh Token Expiration Time
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    adminGetRefreshTokenExpiration(groupId, appId, options) {
        return SecurityApiFp(this.configuration).adminGetRefreshTokenExpiration(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List the allowed [HTTP origins](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin) from which App Services should allow requests.
     * @summary List allowed HTTP origins
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    adminListAllowedRequestOrigins(groupId, appId, options) {
        return SecurityApiFp(this.configuration).adminListAllowedRequestOrigins(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of all private endpoint services configured for the App.
     * @summary List VPC Private Endpoint Services
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    adminListPrivateEndpointServices(groupId, appId, options) {
        return SecurityApiFp(this.configuration).adminListPrivateEndpointServices(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Set the allowed [HTTP origins](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin) from which App Services should allow requests.
     * @summary Set allowed HTTP origins
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} body A list of HTTP origins.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    adminSetAllowedRequestOrigins(groupId, appId, body, options) {
        return SecurityApiFp(this.configuration).adminSetAllowedRequestOrigins(groupId, appId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Set the expiration time in seconds for user session refresh tokens.
     * @summary Set User Refresh Token Expiration Time
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {RefreshTokenExpiration} refreshTokenExpiration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    adminSetRefreshTokenExpiration(groupId, appId, refreshTokenExpiration, options) {
        return SecurityApiFp(this.configuration).adminSetRefreshTokenExpiration(groupId, appId, refreshTokenExpiration, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the configuration of a private endpoint.
     * @summary Modify a VPC Private Endpoint
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} privateEndpointId The _id ObjectID of a VPC private endpoint.
     * @param {PrivateEndpoint} privateEndpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    adminUpdatePrivateEndpoint(groupId, appId, privateEndpointId, privateEndpoint, options) {
        return SecurityApiFp(this.configuration).adminUpdatePrivateEndpoint(groupId, appId, privateEndpointId, privateEndpoint, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create an IP address or CIDR block in the Access List for your App Services app.
     * @summary Create an IP address or CIDR block in the Access List
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AllowedIPAccessListCreateRequest} allowedIPAccessListCreateRequest The IP Access List entry to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    allowedIPAccessListCreate(groupId, appId, allowedIPAccessListCreateRequest, options) {
        return SecurityApiFp(this.configuration).allowedIPAccessListCreate(groupId, appId, allowedIPAccessListCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an IP address or CIDR block from the Access List of your App Services app
     * @summary Delete an IP address or CIDR block from the Access List
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} ipId The IP address entry denoted by &#x60;ip_id&#x60; with the information given in the request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    allowedIPAccessListDelete(groupId, appId, ipId, options) {
        return SecurityApiFp(this.configuration).allowedIPAccessListDelete(groupId, appId, ipId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List the allowed entries in the Access List of your Atlas App Services App.
     * @summary List the allowed entries in the Access List
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    allowedIPAccessListGet(groupId, appId, options) {
        return SecurityApiFp(this.configuration).allowedIPAccessListGet(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify an IP address or CIDR block in the Access List of your App Services app
     * @summary Modify an IP address or CIDR block in the Access List
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} ipId The IP address entry denoted by &#x60;ip_id&#x60; with the information given in the request body
     * @param {AllowedIPAccessListUpdateRequest} allowedIPAccessListUpdateRequest The updated value of the IP Access List entry.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    allowedIPAccessListUpdate(groupId, appId, ipId, allowedIPAccessListUpdateRequest, options) {
        return SecurityApiFp(this.configuration).allowedIPAccessListUpdate(groupId, appId, ipId, allowedIPAccessListUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * ServicesApi - axios parameter creator
 * @export
 */
export const ServicesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
         * @summary Create a data source or third-party service
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateService: (groupId, appId, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminCreateService', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminCreateService', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/services`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
         * @summary Delete a data source or third-party service
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteService: (groupId, appId, serviceId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminDeleteService', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminDeleteService', 'appId', appId);
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('adminDeleteService', 'serviceId', serviceId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/services/{serviceId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Sample a subset of documents in a collection to generate a JSON schema.
         * @summary Generate a JSON schema from sample
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {AdminGenerateSchemaRequest} adminGenerateSchemaRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGenerateSchema: (groupId, appId, serviceId, adminGenerateSchemaRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGenerateSchema', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGenerateSchema', 'appId', appId);
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('adminGenerateSchema', 'serviceId', serviceId);
            // verify required parameter 'adminGenerateSchemaRequest' is not null or undefined
            assertParamExists('adminGenerateSchema', 'adminGenerateSchemaRequest', adminGenerateSchemaRequest);
            const localVarPath = `/groups/{groupId}/apps/{appId}/services/{serviceId}/commands/generate_schema`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(adminGenerateSchemaRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
         * @summary Get a data source or third-party service
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetService: (groupId, appId, serviceId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetService', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetService', 'appId', appId);
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('adminGetService', 'serviceId', serviceId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/services/{serviceId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve a [service\'s](https://www.mongodb.com/docs/realm/services#std-label-services) configuration.
         * @summary Retrieve a service\'s configuration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetServiceConfig: (groupId, appId, serviceId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetServiceConfig', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetServiceConfig', 'appId', appId);
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('adminGetServiceConfig', 'serviceId', serviceId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/services/{serviceId}/config`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List all [data sources](https://www.mongodb.com/docs/atlas/app-services/mongodb/) and [third-party services [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
         * @summary List all data sources and third-party services
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListServices: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminListServices', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminListServices', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/services`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Run a command associated with a [service](https://www.mongodb.com/docs/realm/services#std-label-services).
         * @summary Run a command associated with a service
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} commandName Command name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminRunCommand: (groupId, appId, serviceId, commandName, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminRunCommand', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminRunCommand', 'appId', appId);
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('adminRunCommand', 'serviceId', serviceId);
            // verify required parameter 'commandName' is not null or undefined
            assertParamExists('adminRunCommand', 'commandName', commandName);
            const localVarPath = `/groups/{groupId}/apps/{appId}/services/{serviceId}/commands/{commandName}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)))
                .replace(`{${"commandName"}}`, encodeURIComponent(String(commandName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update a [service](https://www.mongodb.com/docs/realm/services#std-label-services).
         * @summary Update a service
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateService: (groupId, appId, serviceId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminUpdateService', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminUpdateService', 'appId', appId);
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('adminUpdateService', 'serviceId', serviceId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/services/{serviceId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update a [service\'s](https://www.mongodb.com/docs/realm/services#std-label-services) configuration.
         * @summary Update a service\'s configuration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateServiceConfig: (groupId, appId, serviceId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminUpdateServiceConfig', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminUpdateServiceConfig', 'appId', appId);
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('adminUpdateServiceConfig', 'serviceId', serviceId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/services/{serviceId}/config`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get information about the underlying Atlas mongod
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuildInfo: (groupId, appId, serviceId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getBuildInfo', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('getBuildInfo', 'appId', appId);
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('getBuildInfo', 'serviceId', serviceId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/services/{serviceId}/commands/build_info`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ServicesApi - functional programming interface
 * @export
 */
export const ServicesApiFp = function (configuration) {
    const localVarAxiosParamCreator = ServicesApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
         * @summary Create a data source or third-party service
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateService(groupId, appId, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminCreateService(groupId, appId, body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Delete a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
         * @summary Delete a data source or third-party service
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteService(groupId, appId, serviceId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminDeleteService(groupId, appId, serviceId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Sample a subset of documents in a collection to generate a JSON schema.
         * @summary Generate a JSON schema from sample
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {AdminGenerateSchemaRequest} adminGenerateSchemaRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGenerateSchema(groupId, appId, serviceId, adminGenerateSchemaRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGenerateSchema(groupId, appId, serviceId, adminGenerateSchemaRequest, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Get a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
         * @summary Get a data source or third-party service
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetService(groupId, appId, serviceId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetService(groupId, appId, serviceId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Retrieve a [service\'s](https://www.mongodb.com/docs/realm/services#std-label-services) configuration.
         * @summary Retrieve a service\'s configuration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetServiceConfig(groupId, appId, serviceId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetServiceConfig(groupId, appId, serviceId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * List all [data sources](https://www.mongodb.com/docs/atlas/app-services/mongodb/) and [third-party services [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
         * @summary List all data sources and third-party services
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListServices(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminListServices(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Run a command associated with a [service](https://www.mongodb.com/docs/realm/services#std-label-services).
         * @summary Run a command associated with a service
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} commandName Command name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminRunCommand(groupId, appId, serviceId, commandName, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminRunCommand(groupId, appId, serviceId, commandName, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Update a [service](https://www.mongodb.com/docs/realm/services#std-label-services).
         * @summary Update a service
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateService(groupId, appId, serviceId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminUpdateService(groupId, appId, serviceId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Update a [service\'s](https://www.mongodb.com/docs/realm/services#std-label-services) configuration.
         * @summary Update a service\'s configuration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateServiceConfig(groupId, appId, serviceId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminUpdateServiceConfig(groupId, appId, serviceId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get information about the underlying Atlas mongod
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuildInfo(groupId, appId, serviceId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getBuildInfo(groupId, appId, serviceId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * ServicesApi - factory interface
 * @export
 */
export const ServicesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ServicesApiFp(configuration);
    return {
        /**
         * Create a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
         * @summary Create a data source or third-party service
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateService(groupId, appId, body, options) {
            return localVarFp.adminCreateService(groupId, appId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
         * @summary Delete a data source or third-party service
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteService(groupId, appId, serviceId, options) {
            return localVarFp.adminDeleteService(groupId, appId, serviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample a subset of documents in a collection to generate a JSON schema.
         * @summary Generate a JSON schema from sample
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {AdminGenerateSchemaRequest} adminGenerateSchemaRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGenerateSchema(groupId, appId, serviceId, adminGenerateSchemaRequest, options) {
            return localVarFp.adminGenerateSchema(groupId, appId, serviceId, adminGenerateSchemaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
         * @summary Get a data source or third-party service
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetService(groupId, appId, serviceId, options) {
            return localVarFp.adminGetService(groupId, appId, serviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a [service\'s](https://www.mongodb.com/docs/realm/services#std-label-services) configuration.
         * @summary Retrieve a service\'s configuration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetServiceConfig(groupId, appId, serviceId, options) {
            return localVarFp.adminGetServiceConfig(groupId, appId, serviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all [data sources](https://www.mongodb.com/docs/atlas/app-services/mongodb/) and [third-party services [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
         * @summary List all data sources and third-party services
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListServices(groupId, appId, options) {
            return localVarFp.adminListServices(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Run a command associated with a [service](https://www.mongodb.com/docs/realm/services#std-label-services).
         * @summary Run a command associated with a service
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} commandName Command name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminRunCommand(groupId, appId, serviceId, commandName, options) {
            return localVarFp.adminRunCommand(groupId, appId, serviceId, commandName, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a [service](https://www.mongodb.com/docs/realm/services#std-label-services).
         * @summary Update a service
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateService(groupId, appId, serviceId, options) {
            return localVarFp.adminUpdateService(groupId, appId, serviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a [service\'s](https://www.mongodb.com/docs/realm/services#std-label-services) configuration.
         * @summary Update a service\'s configuration
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateServiceConfig(groupId, appId, serviceId, options) {
            return localVarFp.adminUpdateServiceConfig(groupId, appId, serviceId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get information about the underlying Atlas mongod
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuildInfo(groupId, appId, serviceId, options) {
            return localVarFp.getBuildInfo(groupId, appId, serviceId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ServicesApi - object-oriented interface
 * @export
 * @class ServicesApi
 * @extends {BaseAPI}
 */
export class ServicesApi extends BaseAPI {
    /**
     * Create a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
     * @summary Create a data source or third-party service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    adminCreateService(groupId, appId, body, options) {
        return ServicesApiFp(this.configuration).adminCreateService(groupId, appId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
     * @summary Delete a data source or third-party service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    adminDeleteService(groupId, appId, serviceId, options) {
        return ServicesApiFp(this.configuration).adminDeleteService(groupId, appId, serviceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Sample a subset of documents in a collection to generate a JSON schema.
     * @summary Generate a JSON schema from sample
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {AdminGenerateSchemaRequest} adminGenerateSchemaRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    adminGenerateSchema(groupId, appId, serviceId, adminGenerateSchemaRequest, options) {
        return ServicesApiFp(this.configuration).adminGenerateSchema(groupId, appId, serviceId, adminGenerateSchemaRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
     * @summary Get a data source or third-party service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    adminGetService(groupId, appId, serviceId, options) {
        return ServicesApiFp(this.configuration).adminGetService(groupId, appId, serviceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a [service\'s](https://www.mongodb.com/docs/realm/services#std-label-services) configuration.
     * @summary Retrieve a service\'s configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    adminGetServiceConfig(groupId, appId, serviceId, options) {
        return ServicesApiFp(this.configuration).adminGetServiceConfig(groupId, appId, serviceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all [data sources](https://www.mongodb.com/docs/atlas/app-services/mongodb/) and [third-party services [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
     * @summary List all data sources and third-party services
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    adminListServices(groupId, appId, options) {
        return ServicesApiFp(this.configuration).adminListServices(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Run a command associated with a [service](https://www.mongodb.com/docs/realm/services#std-label-services).
     * @summary Run a command associated with a service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} commandName Command name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    adminRunCommand(groupId, appId, serviceId, commandName, options) {
        return ServicesApiFp(this.configuration).adminRunCommand(groupId, appId, serviceId, commandName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a [service](https://www.mongodb.com/docs/realm/services#std-label-services).
     * @summary Update a service
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    adminUpdateService(groupId, appId, serviceId, options) {
        return ServicesApiFp(this.configuration).adminUpdateService(groupId, appId, serviceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a [service\'s](https://www.mongodb.com/docs/realm/services#std-label-services) configuration.
     * @summary Update a service\'s configuration
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    adminUpdateServiceConfig(groupId, appId, serviceId, options) {
        return ServicesApiFp(this.configuration).adminUpdateServiceConfig(groupId, appId, serviceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get information about the underlying Atlas mongod
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    getBuildInfo(groupId, appId, serviceId, options) {
        return ServicesApiFp(this.configuration).getBuildInfo(groupId, appId, serviceId, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * SyncApi - axios parameter creator
 * @export
 */
export const SyncApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Retrieve sync data for a specific Atlas App Services App when using  [Flexible Sync](https://www.mongodb.com/docs/atlas/app-services/sync/get-started/).
         * @summary Get Flexible Sync information
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetFlexSync: (groupId, appId, serviceId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetFlexSync', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetFlexSync', 'appId', appId);
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('adminGetFlexSync', 'serviceId', serviceId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/service/{serviceId}/config`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve partition field data when using  [Partition-Based Sync](https://www.mongodb.com/docs/realm/reference/partition-based-sync/).
         * @summary Get Partition-Based Sync information
         * @param {any} serviceId The Service ID for the linked cluster.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetSync: (serviceId, groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('adminGetSync', 'serviceId', serviceId);
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetSync', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetSync', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/sync/data`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (serviceId !== undefined) {
                localVarQueryParameter['service_id'] = serviceId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SyncApi - functional programming interface
 * @export
 */
export const SyncApiFp = function (configuration) {
    const localVarAxiosParamCreator = SyncApiAxiosParamCreator(configuration);
    return {
        /**
         * Retrieve sync data for a specific Atlas App Services App when using  [Flexible Sync](https://www.mongodb.com/docs/atlas/app-services/sync/get-started/).
         * @summary Get Flexible Sync information
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetFlexSync(groupId, appId, serviceId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetFlexSync(groupId, appId, serviceId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Retrieve partition field data when using  [Partition-Based Sync](https://www.mongodb.com/docs/realm/reference/partition-based-sync/).
         * @summary Get Partition-Based Sync information
         * @param {any} serviceId The Service ID for the linked cluster.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetSync(serviceId, groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetSync(serviceId, groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * SyncApi - factory interface
 * @export
 */
export const SyncApiFactory = function (configuration, basePath, axios) {
    const localVarFp = SyncApiFp(configuration);
    return {
        /**
         * Retrieve sync data for a specific Atlas App Services App when using  [Flexible Sync](https://www.mongodb.com/docs/atlas/app-services/sync/get-started/).
         * @summary Get Flexible Sync information
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetFlexSync(groupId, appId, serviceId, options) {
            return localVarFp.adminGetFlexSync(groupId, appId, serviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve partition field data when using  [Partition-Based Sync](https://www.mongodb.com/docs/realm/reference/partition-based-sync/).
         * @summary Get Partition-Based Sync information
         * @param {any} serviceId The Service ID for the linked cluster.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetSync(serviceId, groupId, appId, options) {
            return localVarFp.adminGetSync(serviceId, groupId, appId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * SyncApi - object-oriented interface
 * @export
 * @class SyncApi
 * @extends {BaseAPI}
 */
export class SyncApi extends BaseAPI {
    /**
     * Retrieve sync data for a specific Atlas App Services App when using  [Flexible Sync](https://www.mongodb.com/docs/atlas/app-services/sync/get-started/).
     * @summary Get Flexible Sync information
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApi
     */
    adminGetFlexSync(groupId, appId, serviceId, options) {
        return SyncApiFp(this.configuration).adminGetFlexSync(groupId, appId, serviceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve partition field data when using  [Partition-Based Sync](https://www.mongodb.com/docs/realm/reference/partition-based-sync/).
     * @summary Get Partition-Based Sync information
     * @param {any} serviceId The Service ID for the linked cluster.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApi
     */
    adminGetSync(serviceId, groupId, appId, options) {
        return SyncApiFp(this.configuration).adminGetSync(serviceId, groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * TriggersApi - axios parameter creator
 * @export
 */
export const TriggersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a new [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
         * @summary Create a trigger
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} body A configuration for a database, scheduled, or authentication trigger.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateTrigger: (groupId, appId, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminCreateTrigger', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminCreateTrigger', 'appId', appId);
            // verify required parameter 'body' is not null or undefined
            assertParamExists('adminCreateTrigger', 'body', body);
            const localVarPath = `/groups/{groupId}/apps/{appId}/triggers`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) from your application.
         * @summary Delete a trigger
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteTrigger: (groupId, appId, triggerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminDeleteTrigger', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminDeleteTrigger', 'appId', appId);
            // verify required parameter 'triggerId' is not null or undefined
            assertParamExists('adminDeleteTrigger', 'triggerId', triggerId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/triggers/{triggerId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"triggerId"}}`, encodeURIComponent(String(triggerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the configuration for an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
         * @summary Get a trigger
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetTrigger: (groupId, appId, triggerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetTrigger', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetTrigger', 'appId', appId);
            // verify required parameter 'triggerId' is not null or undefined
            assertParamExists('adminGetTrigger', 'triggerId', triggerId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/triggers/{triggerId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"triggerId"}}`, encodeURIComponent(String(triggerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a list of all [triggers](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
         * @summary Get all triggers
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListTriggers: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminListTriggers', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminListTriggers', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/triggers`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Resume a [suspended](https://www.mongodb.com/docs/atlas/app-services/triggers/database-triggers/#suspended-triggers) database trigger.
         * @summary Resume a suspended trigger
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
         * @param {AdminResumeTriggerRequest} [adminResumeTriggerRequest] Configuration options for the resume operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminResumeTrigger: (groupId, appId, triggerId, adminResumeTriggerRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminResumeTrigger', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminResumeTrigger', 'appId', appId);
            // verify required parameter 'triggerId' is not null or undefined
            assertParamExists('adminResumeTrigger', 'triggerId', triggerId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/triggers/{triggerId}/resume`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"triggerId"}}`, encodeURIComponent(String(triggerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(adminResumeTriggerRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
         * @summary Update a trigger
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
         * @param {any} body The updated trigger configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateTrigger: (groupId, appId, triggerId, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminUpdateTrigger', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminUpdateTrigger', 'appId', appId);
            // verify required parameter 'triggerId' is not null or undefined
            assertParamExists('adminUpdateTrigger', 'triggerId', triggerId);
            // verify required parameter 'body' is not null or undefined
            assertParamExists('adminUpdateTrigger', 'body', body);
            const localVarPath = `/groups/{groupId}/apps/{appId}/triggers/{triggerId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"triggerId"}}`, encodeURIComponent(String(triggerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * TriggersApi - functional programming interface
 * @export
 */
export const TriggersApiFp = function (configuration) {
    const localVarAxiosParamCreator = TriggersApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a new [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
         * @summary Create a trigger
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} body A configuration for a database, scheduled, or authentication trigger.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateTrigger(groupId, appId, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminCreateTrigger(groupId, appId, body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Remove an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) from your application.
         * @summary Delete a trigger
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteTrigger(groupId, appId, triggerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminDeleteTrigger(groupId, appId, triggerId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Get the configuration for an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
         * @summary Get a trigger
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetTrigger(groupId, appId, triggerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetTrigger(groupId, appId, triggerId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Get a list of all [triggers](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
         * @summary Get all triggers
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListTriggers(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminListTriggers(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Resume a [suspended](https://www.mongodb.com/docs/atlas/app-services/triggers/database-triggers/#suspended-triggers) database trigger.
         * @summary Resume a suspended trigger
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
         * @param {AdminResumeTriggerRequest} [adminResumeTriggerRequest] Configuration options for the resume operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminResumeTrigger(groupId, appId, triggerId, adminResumeTriggerRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminResumeTrigger(groupId, appId, triggerId, adminResumeTriggerRequest, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Modify an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
         * @summary Update a trigger
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
         * @param {any} body The updated trigger configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateTrigger(groupId, appId, triggerId, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminUpdateTrigger(groupId, appId, triggerId, body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * TriggersApi - factory interface
 * @export
 */
export const TriggersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = TriggersApiFp(configuration);
    return {
        /**
         * Create a new [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
         * @summary Create a trigger
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} body A configuration for a database, scheduled, or authentication trigger.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateTrigger(groupId, appId, body, options) {
            return localVarFp.adminCreateTrigger(groupId, appId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) from your application.
         * @summary Delete a trigger
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteTrigger(groupId, appId, triggerId, options) {
            return localVarFp.adminDeleteTrigger(groupId, appId, triggerId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the configuration for an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
         * @summary Get a trigger
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetTrigger(groupId, appId, triggerId, options) {
            return localVarFp.adminGetTrigger(groupId, appId, triggerId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all [triggers](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
         * @summary Get all triggers
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListTriggers(groupId, appId, options) {
            return localVarFp.adminListTriggers(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Resume a [suspended](https://www.mongodb.com/docs/atlas/app-services/triggers/database-triggers/#suspended-triggers) database trigger.
         * @summary Resume a suspended trigger
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
         * @param {AdminResumeTriggerRequest} [adminResumeTriggerRequest] Configuration options for the resume operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminResumeTrigger(groupId, appId, triggerId, adminResumeTriggerRequest, options) {
            return localVarFp.adminResumeTrigger(groupId, appId, triggerId, adminResumeTriggerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
         * @summary Update a trigger
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
         * @param {any} body The updated trigger configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateTrigger(groupId, appId, triggerId, body, options) {
            return localVarFp.adminUpdateTrigger(groupId, appId, triggerId, body, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * TriggersApi - object-oriented interface
 * @export
 * @class TriggersApi
 * @extends {BaseAPI}
 */
export class TriggersApi extends BaseAPI {
    /**
     * Create a new [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
     * @summary Create a trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} body A configuration for a database, scheduled, or authentication trigger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApi
     */
    adminCreateTrigger(groupId, appId, body, options) {
        return TriggersApiFp(this.configuration).adminCreateTrigger(groupId, appId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) from your application.
     * @summary Delete a trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApi
     */
    adminDeleteTrigger(groupId, appId, triggerId, options) {
        return TriggersApiFp(this.configuration).adminDeleteTrigger(groupId, appId, triggerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the configuration for an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
     * @summary Get a trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApi
     */
    adminGetTrigger(groupId, appId, triggerId, options) {
        return TriggersApiFp(this.configuration).adminGetTrigger(groupId, appId, triggerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of all [triggers](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
     * @summary Get all triggers
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApi
     */
    adminListTriggers(groupId, appId, options) {
        return TriggersApiFp(this.configuration).adminListTriggers(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Resume a [suspended](https://www.mongodb.com/docs/atlas/app-services/triggers/database-triggers/#suspended-triggers) database trigger.
     * @summary Resume a suspended trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
     * @param {AdminResumeTriggerRequest} [adminResumeTriggerRequest] Configuration options for the resume operation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApi
     */
    adminResumeTrigger(groupId, appId, triggerId, adminResumeTriggerRequest, options) {
        return TriggersApiFp(this.configuration).adminResumeTrigger(groupId, appId, triggerId, adminResumeTriggerRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
     * @summary Update a trigger
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} triggerId The unique &#x60;_id&#x60; value of a trigger.
     * @param {any} body The updated trigger configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApi
     */
    adminUpdateTrigger(groupId, appId, triggerId, body, options) {
        return TriggersApiFp(this.configuration).adminUpdateTrigger(groupId, appId, triggerId, body, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a new [email/password](https://www.mongodb.com/docs/atlas/app-services/authentication/email-password/) user account.  *Note:* You cannot create user accounts through the Admin API for any authentication provider other than email/password.
         * @summary Create a user
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminCreateUserRequest} adminCreateUserRequest The user to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateUser: (groupId, appId, adminCreateUserRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminCreateUser', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminCreateUser', 'appId', appId);
            // verify required parameter 'adminCreateUserRequest' is not null or undefined
            assertParamExists('adminCreateUser', 'adminCreateUserRequest', adminCreateUserRequest);
            const localVarPath = `/groups/{groupId}/apps/{appId}/users`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(adminCreateUserRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a pending [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
         * @summary Delete a pending email/password authentication user
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} email Email address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeletePendingEmailPasswordUser: (groupId, appId, email, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminDeletePendingEmailPasswordUser', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminDeletePendingEmailPasswordUser', 'appId', appId);
            // verify required parameter 'email' is not null or undefined
            assertParamExists('adminDeletePendingEmailPasswordUser', 'email', email);
            const localVarPath = `/groups/{groupId}/apps/{appId}/user_registrations/by_email/{email}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a specific [user account](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts) by ID.
         * @summary Delete a user
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} userId User Account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteUser: (groupId, appId, userId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminDeleteUser', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminDeleteUser', 'appId', appId);
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('adminDeleteUser', 'userId', userId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/users/{userId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Disable a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
         * @summary Disable a user
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} userId User Account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDisableUser: (groupId, appId, userId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminDisableUser', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminDisableUser', 'appId', appId);
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('adminDisableUser', 'userId', userId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/users/{userId}/disable`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Enable a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
         * @summary Enable a user
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} userId User Account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminEnableUser: (groupId, appId, userId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminEnableUser', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminEnableUser', 'appId', appId);
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('adminEnableUser', 'userId', userId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/users/{userId}/enable`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a specific [user account](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts) by ID.
         * @summary Get a User
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} userId User Account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetUser: (groupId, appId, userId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetUser', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetUser', 'appId', appId);
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('adminGetUser', 'userId', userId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/users/{userId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary List a user\'s devices
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} userId User Account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListDevices: (groupId, appId, userId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminListDevices', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminListDevices', 'appId', appId);
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('adminListDevices', 'userId', userId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/users/{userId}/devices`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List pending user account registrations. Returns up to 50 pending users in a call.
         * @summary List pending users
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} [after] The unique &#x60;&#x60;_id&#x60;&#x60; for a pending user. &#x60;&#x60;List pending users&#x60;&#x60; can return 50 pending users at a time. To view additional results, find the &#x60;&#x60;_id&#x60;&#x60; of the last pending user listed in the previous call to &#x60;&#x60;list pending users&#x60;&#x60;. Call &#x60;&#x60;list pending users&#x60;&#x60; again, passing the &#x60;&#x60;_id&#x60;&#x60; to the after parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListPendingUsers: (groupId, appId, after, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminListPendingUsers', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminListPendingUsers', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/user_registrations/pending_users`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List confirmed [user accounts](https://www.mongodb.com/docs/atlas/app-services/authentication#std-label-user-accounts).
         * @summary List users
         * @param {any} [after] The &#x60;id&#x60; of the last user returned by a previous paginated request.
         * @param {any} [sort] The field name to sort results by. The only valid value is the default: &#x60;_id&#x60;.
         * @param {any} [desc] If &#x60;true&#x60;, returns sorted results in descending order. If not specified or set to &#x60;false&#x60;, results return in ascending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListUsers: (after, sort, desc, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/groups/{groupId}/apps/{appId}/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            if (desc !== undefined) {
                localVarQueryParameter['desc'] = desc;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Change the email address for an [email/password user](https://www.mongodb.com/docs/atlas/app-services/authentication/email-password/) by ID.
         * @summary Change a user\'s email
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} userId User Account ID
         * @param {AdminResetUserEmailRequest} adminResetUserEmailRequest The new email address for the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminResetUserEmail: (groupId, appId, userId, adminResetUserEmailRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminResetUserEmail', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminResetUserEmail', 'appId', appId);
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('adminResetUserEmail', 'userId', userId);
            // verify required parameter 'adminResetUserEmailRequest' is not null or undefined
            assertParamExists('adminResetUserEmail', 'adminResetUserEmailRequest', adminResetUserEmailRequest);
            const localVarPath = `/groups/{groupId}/apps/{appId}/users/{userId}/reset_email`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(adminResetUserEmailRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Revoke all of a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts)\'s sessions.
         * @summary Revoke user sessions
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} userId User Account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUserLogout: (groupId, appId, userId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminUserLogout', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminUserLogout', 'appId', appId);
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('adminUserLogout', 'userId', userId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/users/{userId}/logout`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Verify a that a user\'s client access token is valid.
         * @summary Verify & decode an access token
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminVerifyUserAccessTokenRequest} adminVerifyUserAccessTokenRequest The user\&#39;s client access token. The access token represents a logged in application user. This is not the same as the [&#x60;&#x60;access_token&#x60;&#x60;](https://www.mongodb.com/docs/atlas/app-services/admin/api/v3/#section/Get-Authentication-Tokens) that you use to work with the Admin API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminVerifyUserAccessToken: (groupId, appId, adminVerifyUserAccessTokenRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminVerifyUserAccessToken', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminVerifyUserAccessToken', 'appId', appId);
            // verify required parameter 'adminVerifyUserAccessTokenRequest' is not null or undefined
            assertParamExists('adminVerifyUserAccessToken', 'adminVerifyUserAccessTokenRequest', adminVerifyUserAccessTokenRequest);
            const localVarPath = `/groups/{groupId}/apps/{appId}/users/verify_token`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(adminVerifyUserAccessTokenRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a new [email/password](https://www.mongodb.com/docs/atlas/app-services/authentication/email-password/) user account.  *Note:* You cannot create user accounts through the Admin API for any authentication provider other than email/password.
         * @summary Create a user
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminCreateUserRequest} adminCreateUserRequest The user to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateUser(groupId, appId, adminCreateUserRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminCreateUser(groupId, appId, adminCreateUserRequest, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Delete a pending [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
         * @summary Delete a pending email/password authentication user
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} email Email address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeletePendingEmailPasswordUser(groupId, appId, email, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminDeletePendingEmailPasswordUser(groupId, appId, email, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Delete a specific [user account](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts) by ID.
         * @summary Delete a user
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} userId User Account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteUser(groupId, appId, userId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminDeleteUser(groupId, appId, userId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Disable a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
         * @summary Disable a user
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} userId User Account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDisableUser(groupId, appId, userId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminDisableUser(groupId, appId, userId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Enable a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
         * @summary Enable a user
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} userId User Account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminEnableUser(groupId, appId, userId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminEnableUser(groupId, appId, userId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Get a specific [user account](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts) by ID.
         * @summary Get a User
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} userId User Account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetUser(groupId, appId, userId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetUser(groupId, appId, userId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary List a user\'s devices
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} userId User Account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListDevices(groupId, appId, userId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminListDevices(groupId, appId, userId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * List pending user account registrations. Returns up to 50 pending users in a call.
         * @summary List pending users
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} [after] The unique &#x60;&#x60;_id&#x60;&#x60; for a pending user. &#x60;&#x60;List pending users&#x60;&#x60; can return 50 pending users at a time. To view additional results, find the &#x60;&#x60;_id&#x60;&#x60; of the last pending user listed in the previous call to &#x60;&#x60;list pending users&#x60;&#x60;. Call &#x60;&#x60;list pending users&#x60;&#x60; again, passing the &#x60;&#x60;_id&#x60;&#x60; to the after parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListPendingUsers(groupId, appId, after, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminListPendingUsers(groupId, appId, after, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * List confirmed [user accounts](https://www.mongodb.com/docs/atlas/app-services/authentication#std-label-user-accounts).
         * @summary List users
         * @param {any} [after] The &#x60;id&#x60; of the last user returned by a previous paginated request.
         * @param {any} [sort] The field name to sort results by. The only valid value is the default: &#x60;_id&#x60;.
         * @param {any} [desc] If &#x60;true&#x60;, returns sorted results in descending order. If not specified or set to &#x60;false&#x60;, results return in ascending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListUsers(after, sort, desc, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminListUsers(after, sort, desc, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Change the email address for an [email/password user](https://www.mongodb.com/docs/atlas/app-services/authentication/email-password/) by ID.
         * @summary Change a user\'s email
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} userId User Account ID
         * @param {AdminResetUserEmailRequest} adminResetUserEmailRequest The new email address for the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminResetUserEmail(groupId, appId, userId, adminResetUserEmailRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminResetUserEmail(groupId, appId, userId, adminResetUserEmailRequest, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Revoke all of a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts)\'s sessions.
         * @summary Revoke user sessions
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} userId User Account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUserLogout(groupId, appId, userId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminUserLogout(groupId, appId, userId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Verify a that a user\'s client access token is valid.
         * @summary Verify & decode an access token
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminVerifyUserAccessTokenRequest} adminVerifyUserAccessTokenRequest The user\&#39;s client access token. The access token represents a logged in application user. This is not the same as the [&#x60;&#x60;access_token&#x60;&#x60;](https://www.mongodb.com/docs/atlas/app-services/admin/api/v3/#section/Get-Authentication-Tokens) that you use to work with the Admin API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminVerifyUserAccessToken(groupId, appId, adminVerifyUserAccessTokenRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminVerifyUserAccessToken(groupId, appId, adminVerifyUserAccessTokenRequest, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = UsersApiFp(configuration);
    return {
        /**
         * Create a new [email/password](https://www.mongodb.com/docs/atlas/app-services/authentication/email-password/) user account.  *Note:* You cannot create user accounts through the Admin API for any authentication provider other than email/password.
         * @summary Create a user
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminCreateUserRequest} adminCreateUserRequest The user to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateUser(groupId, appId, adminCreateUserRequest, options) {
            return localVarFp.adminCreateUser(groupId, appId, adminCreateUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a pending [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
         * @summary Delete a pending email/password authentication user
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} email Email address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeletePendingEmailPasswordUser(groupId, appId, email, options) {
            return localVarFp.adminDeletePendingEmailPasswordUser(groupId, appId, email, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific [user account](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts) by ID.
         * @summary Delete a user
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} userId User Account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteUser(groupId, appId, userId, options) {
            return localVarFp.adminDeleteUser(groupId, appId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Disable a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
         * @summary Disable a user
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} userId User Account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDisableUser(groupId, appId, userId, options) {
            return localVarFp.adminDisableUser(groupId, appId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
         * @summary Enable a user
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} userId User Account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminEnableUser(groupId, appId, userId, options) {
            return localVarFp.adminEnableUser(groupId, appId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific [user account](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts) by ID.
         * @summary Get a User
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} userId User Account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetUser(groupId, appId, userId, options) {
            return localVarFp.adminGetUser(groupId, appId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List a user\'s devices
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} userId User Account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListDevices(groupId, appId, userId, options) {
            return localVarFp.adminListDevices(groupId, appId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * List pending user account registrations. Returns up to 50 pending users in a call.
         * @summary List pending users
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} [after] The unique &#x60;&#x60;_id&#x60;&#x60; for a pending user. &#x60;&#x60;List pending users&#x60;&#x60; can return 50 pending users at a time. To view additional results, find the &#x60;&#x60;_id&#x60;&#x60; of the last pending user listed in the previous call to &#x60;&#x60;list pending users&#x60;&#x60;. Call &#x60;&#x60;list pending users&#x60;&#x60; again, passing the &#x60;&#x60;_id&#x60;&#x60; to the after parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListPendingUsers(groupId, appId, after, options) {
            return localVarFp.adminListPendingUsers(groupId, appId, after, options).then((request) => request(axios, basePath));
        },
        /**
         * List confirmed [user accounts](https://www.mongodb.com/docs/atlas/app-services/authentication#std-label-user-accounts).
         * @summary List users
         * @param {any} [after] The &#x60;id&#x60; of the last user returned by a previous paginated request.
         * @param {any} [sort] The field name to sort results by. The only valid value is the default: &#x60;_id&#x60;.
         * @param {any} [desc] If &#x60;true&#x60;, returns sorted results in descending order. If not specified or set to &#x60;false&#x60;, results return in ascending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListUsers(after, sort, desc, options) {
            return localVarFp.adminListUsers(after, sort, desc, options).then((request) => request(axios, basePath));
        },
        /**
         * Change the email address for an [email/password user](https://www.mongodb.com/docs/atlas/app-services/authentication/email-password/) by ID.
         * @summary Change a user\'s email
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} userId User Account ID
         * @param {AdminResetUserEmailRequest} adminResetUserEmailRequest The new email address for the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminResetUserEmail(groupId, appId, userId, adminResetUserEmailRequest, options) {
            return localVarFp.adminResetUserEmail(groupId, appId, userId, adminResetUserEmailRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Revoke all of a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts)\'s sessions.
         * @summary Revoke user sessions
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} userId User Account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUserLogout(groupId, appId, userId, options) {
            return localVarFp.adminUserLogout(groupId, appId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify a that a user\'s client access token is valid.
         * @summary Verify & decode an access token
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {AdminVerifyUserAccessTokenRequest} adminVerifyUserAccessTokenRequest The user\&#39;s client access token. The access token represents a logged in application user. This is not the same as the [&#x60;&#x60;access_token&#x60;&#x60;](https://www.mongodb.com/docs/atlas/app-services/admin/api/v3/#section/Get-Authentication-Tokens) that you use to work with the Admin API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminVerifyUserAccessToken(groupId, appId, adminVerifyUserAccessTokenRequest, options) {
            return localVarFp.adminVerifyUserAccessToken(groupId, appId, adminVerifyUserAccessTokenRequest, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Create a new [email/password](https://www.mongodb.com/docs/atlas/app-services/authentication/email-password/) user account.  *Note:* You cannot create user accounts through the Admin API for any authentication provider other than email/password.
     * @summary Create a user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminCreateUserRequest} adminCreateUserRequest The user to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    adminCreateUser(groupId, appId, adminCreateUserRequest, options) {
        return UsersApiFp(this.configuration).adminCreateUser(groupId, appId, adminCreateUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a pending [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Delete a pending email/password authentication user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} email Email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    adminDeletePendingEmailPasswordUser(groupId, appId, email, options) {
        return UsersApiFp(this.configuration).adminDeletePendingEmailPasswordUser(groupId, appId, email, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a specific [user account](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts) by ID.
     * @summary Delete a user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    adminDeleteUser(groupId, appId, userId, options) {
        return UsersApiFp(this.configuration).adminDeleteUser(groupId, appId, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Disable a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Disable a user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    adminDisableUser(groupId, appId, userId, options) {
        return UsersApiFp(this.configuration).adminDisableUser(groupId, appId, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Enable a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
     * @summary Enable a user
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    adminEnableUser(groupId, appId, userId, options) {
        return UsersApiFp(this.configuration).adminEnableUser(groupId, appId, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a specific [user account](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts) by ID.
     * @summary Get a User
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    adminGetUser(groupId, appId, userId, options) {
        return UsersApiFp(this.configuration).adminGetUser(groupId, appId, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List a user\'s devices
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    adminListDevices(groupId, appId, userId, options) {
        return UsersApiFp(this.configuration).adminListDevices(groupId, appId, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List pending user account registrations. Returns up to 50 pending users in a call.
     * @summary List pending users
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} [after] The unique &#x60;&#x60;_id&#x60;&#x60; for a pending user. &#x60;&#x60;List pending users&#x60;&#x60; can return 50 pending users at a time. To view additional results, find the &#x60;&#x60;_id&#x60;&#x60; of the last pending user listed in the previous call to &#x60;&#x60;list pending users&#x60;&#x60;. Call &#x60;&#x60;list pending users&#x60;&#x60; again, passing the &#x60;&#x60;_id&#x60;&#x60; to the after parameter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    adminListPendingUsers(groupId, appId, after, options) {
        return UsersApiFp(this.configuration).adminListPendingUsers(groupId, appId, after, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List confirmed [user accounts](https://www.mongodb.com/docs/atlas/app-services/authentication#std-label-user-accounts).
     * @summary List users
     * @param {any} [after] The &#x60;id&#x60; of the last user returned by a previous paginated request.
     * @param {any} [sort] The field name to sort results by. The only valid value is the default: &#x60;_id&#x60;.
     * @param {any} [desc] If &#x60;true&#x60;, returns sorted results in descending order. If not specified or set to &#x60;false&#x60;, results return in ascending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    adminListUsers(after, sort, desc, options) {
        return UsersApiFp(this.configuration).adminListUsers(after, sort, desc, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Change the email address for an [email/password user](https://www.mongodb.com/docs/atlas/app-services/authentication/email-password/) by ID.
     * @summary Change a user\'s email
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {AdminResetUserEmailRequest} adminResetUserEmailRequest The new email address for the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    adminResetUserEmail(groupId, appId, userId, adminResetUserEmailRequest, options) {
        return UsersApiFp(this.configuration).adminResetUserEmail(groupId, appId, userId, adminResetUserEmailRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Revoke all of a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts)\'s sessions.
     * @summary Revoke user sessions
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} userId User Account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    adminUserLogout(groupId, appId, userId, options) {
        return UsersApiFp(this.configuration).adminUserLogout(groupId, appId, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Verify a that a user\'s client access token is valid.
     * @summary Verify & decode an access token
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {AdminVerifyUserAccessTokenRequest} adminVerifyUserAccessTokenRequest The user\&#39;s client access token. The access token represents a logged in application user. This is not the same as the [&#x60;&#x60;access_token&#x60;&#x60;](https://www.mongodb.com/docs/atlas/app-services/admin/api/v3/#section/Get-Authentication-Tokens) that you use to work with the Admin API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    adminVerifyUserAccessToken(groupId, appId, adminVerifyUserAccessTokenRequest, options) {
        return UsersApiFp(this.configuration).adminVerifyUserAccessToken(groupId, appId, adminVerifyUserAccessTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * ValuesApi - axios parameter creator
 * @export
 */
export const ValuesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Define a [Value](https://www.mongodb.com/docs/realm/values-and-secrets) in an application.
         * @summary Define a Value in an application
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {NewValue} newValue The value to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateValue: (groupId, appId, newValue, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminCreateValue', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminCreateValue', 'appId', appId);
            // verify required parameter 'newValue' is not null or undefined
            assertParamExists('adminCreateValue', 'newValue', newValue);
            const localVarPath = `/groups/{groupId}/apps/{appId}/values`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(newValue, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a [value](https://www.mongodb.com/docs/realm/values-and-secrets) defined in an application.
         * @summary Delete a value defined in an application.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} valueId The unique &#x60;_id&#x60; value of a value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteValue: (groupId, appId, valueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminDeleteValue', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminDeleteValue', 'appId', appId);
            // verify required parameter 'valueId' is not null or undefined
            assertParamExists('adminDeleteValue', 'valueId', valueId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/values/{valueId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"valueId"}}`, encodeURIComponent(String(valueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve a [value](https://www.mongodb.com/docs/realm/values-and-secrets) definition from an application.
         * @summary Retrieve a value definition from an application
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} valueId The unique &#x60;_id&#x60; value of a value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetValue: (groupId, appId, valueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetValue', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetValue', 'appId', appId);
            // verify required parameter 'valueId' is not null or undefined
            assertParamExists('adminGetValue', 'valueId', valueId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/values/{valueId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"valueId"}}`, encodeURIComponent(String(valueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List all [values](https://www.mongodb.com/docs/realm/values-and-secrets) defined in an application.
         * @summary List all values defined in an application.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListValues: (groupId, appId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminListValues', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminListValues', 'appId', appId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/values`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update a [value](https://www.mongodb.com/docs/realm/values-and-secrets) definition in an application.
         * @summary Update a value definition in an application
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} valueId The unique &#x60;_id&#x60; value of a value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateValue: (groupId, appId, valueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminUpdateValue', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminUpdateValue', 'appId', appId);
            // verify required parameter 'valueId' is not null or undefined
            assertParamExists('adminUpdateValue', 'valueId', valueId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/values/{valueId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"valueId"}}`, encodeURIComponent(String(valueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ValuesApi - functional programming interface
 * @export
 */
export const ValuesApiFp = function (configuration) {
    const localVarAxiosParamCreator = ValuesApiAxiosParamCreator(configuration);
    return {
        /**
         * Define a [Value](https://www.mongodb.com/docs/realm/values-and-secrets) in an application.
         * @summary Define a Value in an application
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {NewValue} newValue The value to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateValue(groupId, appId, newValue, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminCreateValue(groupId, appId, newValue, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Delete a [value](https://www.mongodb.com/docs/realm/values-and-secrets) defined in an application.
         * @summary Delete a value defined in an application.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} valueId The unique &#x60;_id&#x60; value of a value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteValue(groupId, appId, valueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminDeleteValue(groupId, appId, valueId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Retrieve a [value](https://www.mongodb.com/docs/realm/values-and-secrets) definition from an application.
         * @summary Retrieve a value definition from an application
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} valueId The unique &#x60;_id&#x60; value of a value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetValue(groupId, appId, valueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetValue(groupId, appId, valueId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * List all [values](https://www.mongodb.com/docs/realm/values-and-secrets) defined in an application.
         * @summary List all values defined in an application.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListValues(groupId, appId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminListValues(groupId, appId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Update a [value](https://www.mongodb.com/docs/realm/values-and-secrets) definition in an application.
         * @summary Update a value definition in an application
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} valueId The unique &#x60;_id&#x60; value of a value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateValue(groupId, appId, valueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminUpdateValue(groupId, appId, valueId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * ValuesApi - factory interface
 * @export
 */
export const ValuesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ValuesApiFp(configuration);
    return {
        /**
         * Define a [Value](https://www.mongodb.com/docs/realm/values-and-secrets) in an application.
         * @summary Define a Value in an application
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {NewValue} newValue The value to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateValue(groupId, appId, newValue, options) {
            return localVarFp.adminCreateValue(groupId, appId, newValue, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a [value](https://www.mongodb.com/docs/realm/values-and-secrets) defined in an application.
         * @summary Delete a value defined in an application.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} valueId The unique &#x60;_id&#x60; value of a value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteValue(groupId, appId, valueId, options) {
            return localVarFp.adminDeleteValue(groupId, appId, valueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a [value](https://www.mongodb.com/docs/realm/values-and-secrets) definition from an application.
         * @summary Retrieve a value definition from an application
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} valueId The unique &#x60;_id&#x60; value of a value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetValue(groupId, appId, valueId, options) {
            return localVarFp.adminGetValue(groupId, appId, valueId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all [values](https://www.mongodb.com/docs/realm/values-and-secrets) defined in an application.
         * @summary List all values defined in an application.
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListValues(groupId, appId, options) {
            return localVarFp.adminListValues(groupId, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a [value](https://www.mongodb.com/docs/realm/values-and-secrets) definition in an application.
         * @summary Update a value definition in an application
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} valueId The unique &#x60;_id&#x60; value of a value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateValue(groupId, appId, valueId, options) {
            return localVarFp.adminUpdateValue(groupId, appId, valueId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ValuesApi - object-oriented interface
 * @export
 * @class ValuesApi
 * @extends {BaseAPI}
 */
export class ValuesApi extends BaseAPI {
    /**
     * Define a [Value](https://www.mongodb.com/docs/realm/values-and-secrets) in an application.
     * @summary Define a Value in an application
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {NewValue} newValue The value to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValuesApi
     */
    adminCreateValue(groupId, appId, newValue, options) {
        return ValuesApiFp(this.configuration).adminCreateValue(groupId, appId, newValue, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a [value](https://www.mongodb.com/docs/realm/values-and-secrets) defined in an application.
     * @summary Delete a value defined in an application.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} valueId The unique &#x60;_id&#x60; value of a value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValuesApi
     */
    adminDeleteValue(groupId, appId, valueId, options) {
        return ValuesApiFp(this.configuration).adminDeleteValue(groupId, appId, valueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a [value](https://www.mongodb.com/docs/realm/values-and-secrets) definition from an application.
     * @summary Retrieve a value definition from an application
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} valueId The unique &#x60;_id&#x60; value of a value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValuesApi
     */
    adminGetValue(groupId, appId, valueId, options) {
        return ValuesApiFp(this.configuration).adminGetValue(groupId, appId, valueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all [values](https://www.mongodb.com/docs/realm/values-and-secrets) defined in an application.
     * @summary List all values defined in an application.
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValuesApi
     */
    adminListValues(groupId, appId, options) {
        return ValuesApiFp(this.configuration).adminListValues(groupId, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a [value](https://www.mongodb.com/docs/realm/values-and-secrets) definition in an application.
     * @summary Update a value definition in an application
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} valueId The unique &#x60;_id&#x60; value of a value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValuesApi
     */
    adminUpdateValue(groupId, appId, valueId, options) {
        return ValuesApiFp(this.configuration).adminUpdateValue(groupId, appId, valueId, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * WebhooksApi - axios parameter creator
 * @export
 */
export const WebhooksApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
         * @summary Create a webhook
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} body The webhook to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateWebhook: (groupId, appId, serviceId, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminCreateWebhook', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminCreateWebhook', 'appId', appId);
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('adminCreateWebhook', 'serviceId', serviceId);
            // verify required parameter 'body' is not null or undefined
            assertParamExists('adminCreateWebhook', 'body', body);
            const localVarPath = `/groups/{groupId}/apps/{appId}/services/{serviceId}/incoming_webhooks`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
         * @summary Delete a webhook
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} incomingWebhookId The unique &#x60;_id&#x60; value of an incoming webhook
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteWebhook: (groupId, appId, serviceId, incomingWebhookId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminDeleteWebhook', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminDeleteWebhook', 'appId', appId);
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('adminDeleteWebhook', 'serviceId', serviceId);
            // verify required parameter 'incomingWebhookId' is not null or undefined
            assertParamExists('adminDeleteWebhook', 'incomingWebhookId', incomingWebhookId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/services/{serviceId}/incoming_webhooks/{incomingWebhookId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)))
                .replace(`{${"incomingWebhookId"}}`, encodeURIComponent(String(incomingWebhookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
         * @summary Retrieve a webhook
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} incomingWebhookId The unique &#x60;_id&#x60; value of an incoming webhook
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetWebhook: (groupId, appId, serviceId, incomingWebhookId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminGetWebhook', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminGetWebhook', 'appId', appId);
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('adminGetWebhook', 'serviceId', serviceId);
            // verify required parameter 'incomingWebhookId' is not null or undefined
            assertParamExists('adminGetWebhook', 'incomingWebhookId', incomingWebhookId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/services/{serviceId}/incoming_webhooks/{incomingWebhookId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)))
                .replace(`{${"incomingWebhookId"}}`, encodeURIComponent(String(incomingWebhookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List [webhooks](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
         * @summary List webhooks
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListWebhooks: (groupId, appId, serviceId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminListWebhooks', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminListWebhooks', 'appId', appId);
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('adminListWebhooks', 'serviceId', serviceId);
            const localVarPath = `/groups/{groupId}/apps/{appId}/services/{serviceId}/incoming_webhooks`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
         * @summary Update a webhook
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} incomingWebhookId The unique &#x60;_id&#x60; value of an incoming webhook
         * @param {any} body The updated state of the webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateWebhook: (groupId, appId, serviceId, incomingWebhookId, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('adminUpdateWebhook', 'groupId', groupId);
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('adminUpdateWebhook', 'appId', appId);
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('adminUpdateWebhook', 'serviceId', serviceId);
            // verify required parameter 'incomingWebhookId' is not null or undefined
            assertParamExists('adminUpdateWebhook', 'incomingWebhookId', incomingWebhookId);
            // verify required parameter 'body' is not null or undefined
            assertParamExists('adminUpdateWebhook', 'body', body);
            const localVarPath = `/groups/{groupId}/apps/{appId}/services/{serviceId}/incoming_webhooks/{incomingWebhookId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)))
                .replace(`{${"incomingWebhookId"}}`, encodeURIComponent(String(incomingWebhookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication tokenAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * WebhooksApi - functional programming interface
 * @export
 */
export const WebhooksApiFp = function (configuration) {
    const localVarAxiosParamCreator = WebhooksApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
         * @summary Create a webhook
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} body The webhook to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateWebhook(groupId, appId, serviceId, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminCreateWebhook(groupId, appId, serviceId, body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Delete a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
         * @summary Delete a webhook
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} incomingWebhookId The unique &#x60;_id&#x60; value of an incoming webhook
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteWebhook(groupId, appId, serviceId, incomingWebhookId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminDeleteWebhook(groupId, appId, serviceId, incomingWebhookId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Retrieve a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
         * @summary Retrieve a webhook
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} incomingWebhookId The unique &#x60;_id&#x60; value of an incoming webhook
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetWebhook(groupId, appId, serviceId, incomingWebhookId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminGetWebhook(groupId, appId, serviceId, incomingWebhookId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * List [webhooks](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
         * @summary List webhooks
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListWebhooks(groupId, appId, serviceId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminListWebhooks(groupId, appId, serviceId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Update a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
         * @summary Update a webhook
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} incomingWebhookId The unique &#x60;_id&#x60; value of an incoming webhook
         * @param {any} body The updated state of the webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateWebhook(groupId, appId, serviceId, incomingWebhookId, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.adminUpdateWebhook(groupId, appId, serviceId, incomingWebhookId, body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * WebhooksApi - factory interface
 * @export
 */
export const WebhooksApiFactory = function (configuration, basePath, axios) {
    const localVarFp = WebhooksApiFp(configuration);
    return {
        /**
         * Create a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
         * @summary Create a webhook
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} body The webhook to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateWebhook(groupId, appId, serviceId, body, options) {
            return localVarFp.adminCreateWebhook(groupId, appId, serviceId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
         * @summary Delete a webhook
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} incomingWebhookId The unique &#x60;_id&#x60; value of an incoming webhook
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteWebhook(groupId, appId, serviceId, incomingWebhookId, options) {
            return localVarFp.adminDeleteWebhook(groupId, appId, serviceId, incomingWebhookId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
         * @summary Retrieve a webhook
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} incomingWebhookId The unique &#x60;_id&#x60; value of an incoming webhook
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetWebhook(groupId, appId, serviceId, incomingWebhookId, options) {
            return localVarFp.adminGetWebhook(groupId, appId, serviceId, incomingWebhookId, options).then((request) => request(axios, basePath));
        },
        /**
         * List [webhooks](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
         * @summary List webhooks
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminListWebhooks(groupId, appId, serviceId, options) {
            return localVarFp.adminListWebhooks(groupId, appId, serviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
         * @summary Update a webhook
         * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
         * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
         * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
         * @param {any} incomingWebhookId The unique &#x60;_id&#x60; value of an incoming webhook
         * @param {any} body The updated state of the webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateWebhook(groupId, appId, serviceId, incomingWebhookId, body, options) {
            return localVarFp.adminUpdateWebhook(groupId, appId, serviceId, incomingWebhookId, body, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * WebhooksApi - object-oriented interface
 * @export
 * @class WebhooksApi
 * @extends {BaseAPI}
 */
export class WebhooksApi extends BaseAPI {
    /**
     * Create a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary Create a webhook
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} body The webhook to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    adminCreateWebhook(groupId, appId, serviceId, body, options) {
        return WebhooksApiFp(this.configuration).adminCreateWebhook(groupId, appId, serviceId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary Delete a webhook
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} incomingWebhookId The unique &#x60;_id&#x60; value of an incoming webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    adminDeleteWebhook(groupId, appId, serviceId, incomingWebhookId, options) {
        return WebhooksApiFp(this.configuration).adminDeleteWebhook(groupId, appId, serviceId, incomingWebhookId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary Retrieve a webhook
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} incomingWebhookId The unique &#x60;_id&#x60; value of an incoming webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    adminGetWebhook(groupId, appId, serviceId, incomingWebhookId, options) {
        return WebhooksApiFp(this.configuration).adminGetWebhook(groupId, appId, serviceId, incomingWebhookId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List [webhooks](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary List webhooks
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    adminListWebhooks(groupId, appId, serviceId, options) {
        return WebhooksApiFp(this.configuration).adminListWebhooks(groupId, appId, serviceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
     * @summary Update a webhook
     * @param {any} groupId An Atlas [Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
     * @param {any} appId The ObjectID of your application. [The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this value.
     * @param {any} serviceId The unique &#x60;_id&#x60; value of a service.
     * @param {any} incomingWebhookId The unique &#x60;_id&#x60; value of an incoming webhook
     * @param {any} body The updated state of the webhook.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    adminUpdateWebhook(groupId, appId, serviceId, incomingWebhookId, body, options) {
        return WebhooksApiFp(this.configuration).adminUpdateWebhook(groupId, appId, serviceId, incomingWebhookId, body, options).then((request) => request(this.axios, this.basePath));
    }
}
