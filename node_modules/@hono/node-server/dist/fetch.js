"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetch = exports.Response = exports.Request = exports.Headers = exports.Blob = exports.File = exports.FormData = void 0;
const web_fetch_1 = require("@remix-run/web-fetch");
Object.defineProperty(exports, "Headers", { enumerable: true, get: function () { return web_fetch_1.Headers; } });
var web_fetch_2 = require("@remix-run/web-fetch");
Object.defineProperty(exports, "FormData", { enumerable: true, get: function () { return web_fetch_2.FormData; } });
var web_file_1 = require("@remix-run/web-file");
Object.defineProperty(exports, "File", { enumerable: true, get: function () { return web_file_1.File; } });
Object.defineProperty(exports, "Blob", { enumerable: true, get: function () { return web_file_1.Blob; } });
class NodeRequest extends web_fetch_1.Request {
    constructor(info, init) {
        super(info, init);
    }
    get headers() {
        return super.headers;
    }
    // @ts-ignore
    clone() {
        return new NodeRequest(this);
    }
}
exports.Request = NodeRequest;
class NodeResponse extends web_fetch_1.Response {
    get headers() {
        return super.headers;
    }
    clone() {
        return super.clone();
    }
}
exports.Response = NodeResponse;
const fetch = (info, init) => {
    init = {
        // Disable compression handling so people can return the result of a fetch
        // directly in the loader without messing with the Content-Encoding header.
        compress: false,
        ...init,
    };
    return (0, web_fetch_1.fetch)(info, init);
};
exports.fetch = fetch;
/**
 * Credits:
 *   - https://github.com/remix-run/remix/blob/e77e2eb/packages/remix-node/fetch.ts
 */
