/*!
* MongodbDataApi v0.4.0
* Copyright (c) Surmon. All rights reserved.
* Released under the MIT License.
* Surmon
*/
import _axios from 'axios';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) { throw new TypeError("Private accessor was defined without a getter"); }
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) { throw new TypeError("Cannot read private member from an object whose class did not declare it"); }
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") { throw new TypeError("Private method is not writable"); }
    if (kind === "a" && !f) { throw new TypeError("Private accessor was defined without a setter"); }
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) { throw new TypeError("Cannot write private member to an object whose class did not declare it"); }
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

var _MongoDBDataAPI_instances, _MongoDBDataAPI_config, _MongoDBDataAPI_baseParams, _MongoDBDataAPI_axios, _MongoDBDataAPI_newAPI;
var MongoDBDataAPI = function MongoDBDataAPI(config, baseParams, axios) {
    _MongoDBDataAPI_instances.add(this);
    _MongoDBDataAPI_config.set(this, void 0);
    _MongoDBDataAPI_baseParams.set(this, void 0);
    _MongoDBDataAPI_axios.set(this, void 0);
    if (!config.apiKey) {
        throw new Error('Invalid API key!');
    }
    __classPrivateFieldSet(this, _MongoDBDataAPI_config, config, "f");
    __classPrivateFieldSet(this, _MongoDBDataAPI_baseParams, baseParams || {}, "f");
    __classPrivateFieldSet(this, _MongoDBDataAPI_axios, axios || _axios.create(), "f");
};
/** Select a cluster. */
MongoDBDataAPI.prototype.$cluster = function $cluster (clusterName) {
    return __classPrivateFieldGet(this, _MongoDBDataAPI_instances, "m", _MongoDBDataAPI_newAPI).call(this, { dataSource: clusterName });
};
/** Select a database. */
MongoDBDataAPI.prototype.$database = function $database (database) {
    return __classPrivateFieldGet(this, _MongoDBDataAPI_instances, "m", _MongoDBDataAPI_newAPI).call(this, { database: database });
};
/** Select a collection. */
MongoDBDataAPI.prototype.$collection = function $collection (collection) {
    return __classPrivateFieldGet(this, _MongoDBDataAPI_instances, "m", _MongoDBDataAPI_newAPI).call(this, { collection: collection });
};
/**
 * Execute a API action.
 * @link https://www.mongodb.com/docs/atlas/api/data-api-resources/
 */
MongoDBDataAPI.prototype.$$action = function $$action (type, params, axiosConfig) {
        if ( params === void 0 ) params = {};

    var mergedParams = Object.assign(Object.assign({}, __classPrivateFieldGet(this, _MongoDBDataAPI_baseParams, "f")), params);
    if (!mergedParams.dataSource || !mergedParams.database || !mergedParams.collection) {
        return Promise.reject('Invalid params: dataSource, database, collection');
    }
    // https://www.mongodb.com/docs/atlas/api/data-api-resources/#base-url
    // https://www.mongodb.com/docs/atlas/api/data-api-resources/#regional-requests
    var getUrlEndpoint = function (appId, region, cloud) {
        return region && cloud
            ? ("https://" + region + "." + cloud + ".data.mongodb-api.com/app/" + appId + "/endpoint/data/v1")
            : ("https://data.mongodb-api.com/app/" + appId + "/endpoint/data/v1");
    };
    var getActionUrl = function (endpoint, action) {
        return (endpoint + "/action/" + action);
    };
    return __classPrivateFieldGet(this, _MongoDBDataAPI_axios, "f").call(this, Object.assign({ method: 'post', data: JSON.stringify(mergedParams), url: __classPrivateFieldGet(this, _MongoDBDataAPI_config, "f").urlEndpoint
            ? getActionUrl(__classPrivateFieldGet(this, _MongoDBDataAPI_config, "f").urlEndpoint, type)
            : getActionUrl(getUrlEndpoint(__classPrivateFieldGet(this, _MongoDBDataAPI_config, "f").appId, __classPrivateFieldGet(this, _MongoDBDataAPI_config, "f").region, __classPrivateFieldGet(this, _MongoDBDataAPI_config, "f").cloud), type), headers: {
            'Content-Type': 'application/json',
            'Access-Control-Request-Headers': '*',
            'api-key': __classPrivateFieldGet(this, _MongoDBDataAPI_config, "f").apiKey
        } }, axiosConfig))
        .then(function (response) {
        return response.data;
    })
        .catch(function (error) {
        // https://www.mongodb.com/docs/atlas/api/data-api-resources/#error-codes
        return Promise.reject(_axios.isAxiosError(error) ? error.toJSON() : error);
    });
};
/**
 * Find a Single Document.
 * @link https://www.mongodb.com/docs/atlas/api/data-api-resources/#find-a-single-document
 */
MongoDBDataAPI.prototype.findOne = function findOne (params) {
    return this.$$action('findOne', params);
};
/**
 * Find Multiple Documents.
 * @link https://www.mongodb.com/docs/atlas/api/data-api-resources/#find-multiple-documents
 */
MongoDBDataAPI.prototype.find = function find (params) {
    return this.$$action('find', params);
};
/**
 * Insert a Single Document.
 * @link https://www.mongodb.com/docs/atlas/api/data-api-resources/#insert-a-single-document
 */
MongoDBDataAPI.prototype.insertOne = function insertOne (params) {
    return this.$$action('insertOne', params);
};
/**
 * Insert Multiple Documents.
 * @link https://www.mongodb.com/docs/atlas/api/data-api-resources/#insert-multiple-documents
 */
MongoDBDataAPI.prototype.insertMany = function insertMany (params) {
    return this.$$action('insertMany', params);
};
/**
 * Update a Single Document.
 * @link https://www.mongodb.com/docs/atlas/api/data-api-resources/#update-a-single-document
 */
MongoDBDataAPI.prototype.updateOne = function updateOne (params) {
    return this.$$action('updateOne', params);
};
/**
 * Update Multiple Documents.
 * @link https://www.mongodb.com/docs/atlas/api/data-api-resources/#update-multiple-documents
 */
MongoDBDataAPI.prototype.updateMany = function updateMany (params) {
    return this.$$action('updateMany', params);
};
/**
 * Replace a Single Document.
 * @link https://www.mongodb.com/docs/atlas/api/data-api-resources/#replace-a-single-document
 */
MongoDBDataAPI.prototype.replaceOne = function replaceOne (params) {
    return this.$$action('replaceOne', params);
};
/**
 * Delete a Single Document.
 * @link https://www.mongodb.com/docs/atlas/api/data-api-resources/#delete-a-single-document
 */
MongoDBDataAPI.prototype.deleteOne = function deleteOne (params) {
    return this.$$action('deleteOne', params);
};
/**
 * Delete Multiple Documents.
 * @link https://www.mongodb.com/docs/atlas/api/data-api-resources/#delete-multiple-documents
 */
MongoDBDataAPI.prototype.deleteMany = function deleteMany (params) {
    return this.$$action('deleteMany', params);
};
/**
 * Run an Aggregation Pipeline.
 * @link https://www.mongodb.com/docs/atlas/api/data-api-resources/#run-an-aggregation-pipeline
 */
MongoDBDataAPI.prototype.aggregate = function aggregate (params) {
    return this.$$action('aggregate', params);
};
_MongoDBDataAPI_config = new WeakMap(), _MongoDBDataAPI_baseParams = new WeakMap(), _MongoDBDataAPI_axios = new WeakMap(), _MongoDBDataAPI_instances = new WeakSet(), _MongoDBDataAPI_newAPI = function _MongoDBDataAPI_newAPI(params) {
    return new MongoDBDataAPI(Object.assign({}, __classPrivateFieldGet(this, _MongoDBDataAPI_config, "f")), Object.assign(Object.assign({}, __classPrivateFieldGet(this, _MongoDBDataAPI_baseParams, "f")), params));
};
var createMongoDBDataAPI = function (config, axios) {
    return new MongoDBDataAPI(config, void 0, axios);
};

export { MongoDBDataAPI, createMongoDBDataAPI };
